
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y)))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y)))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y)))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y)))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y)))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y)))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x) (FORALL (y) (EQ (ite |@true| x y) x))))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x) (FORALL (y) (EQ (ite |@false| x y) y))))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t) (FORALL (i) (FORALL (v) (EQ (access (update t i v) i) v)))))

(BG_PUSH
 ;; Why axiom access_update_eq
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (FORALL (v) (IMPLIES (EQ i j) (EQ (access (update t i v) j) v))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (EQ i j)
 (FORALL (t) (FORALL (v) (EQ (access (update t i v) j) v)))))))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (FORALL (v) (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j)))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (NEQ i j)
 (FORALL (t) (FORALL (v) (EQ (access (update t i v) j) (access t j))))))))

(BG_PUSH
 ;; Why axiom sorted_array_def
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (IFF (EQ (sorted_array t i j) |@true|)
 (FORALL (k)
 (IMPLIES (AND (<= i k) (< k j)) (<= (access t k) (access t (+ k 1))))))))))

(BG_PUSH
 ;; Why axiom exchange_def
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (i)
 (FORALL (j)
 (IFF (EQ (exchange t1 t2 i j) |@true|)
 (AND (EQ (array_length t1) (array_length t2))
 (AND (EQ (access t1 i) (access t2 j))
 (AND (EQ (access t2 i) (access t1 j))
 (FORALL (k)
 (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k)))))))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|)))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t) (FORALL (g) (FORALL (d) (EQ (sub_permut g d t t) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))))

 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut g d t
 (update (update t i (access t j)) j (access t i))) |@true|)))))))

 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut g d t
 (update (update t i (access t j)) j (access t i))) |@true|))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d)
 (AND (<= g j) (AND (<= j d) (EQ (exchange t1 t2 i j) |@true|)))))
 (EQ (sub_permut g d t1 t2) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|)))))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t)
 (FORALL (i)
 (FORALL (v) (EQ (array_length (update t i v)) (array_length t))))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))

;; swap_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0)) (AND (<= 0 j) (< j (array_length t0))))))))))))))))

;; swap_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0))
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 j result)) (EQ (exchange t1 t i j) |@true|)))))))))))))))))

;; downheap_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))))))))

;; downheap_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(AND (<= 0 (+ (+ (* 2 k) 1) 1)) (< (+ (+ (* 2 k) 1) 1) (array_length t))))))))))))

;; downheap_po_3, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result result0)
(EQ (select_son t k n (+ (+ (* 2 k) 1) 1)) |@true|))))))))))))))

;; downheap_po_4, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result result0) (AND (<= 0 k) (< k (array_length t))))))))))))))))

;; downheap_po_5, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result1 result2)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (+ (* 2 k) 1) 1)) |@true|)
(AND (<= 0 (- n k)) (< (- n (+ (+ (* 2 k) 1) 1)) (- n k))))))))))))))))))))))))))

;; downheap_po_6, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result1 result2)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (+ (* 2 k) 1) 1)) |@true|)
(IMPLIES (AND (<= 0 (- n k)) (< (- n (+ (+ (* 2 k) 1) 1)) (- n k)))
(AND (AND (<= 0 (+ (+ (* 2 k) 1) 1)) (<= (+ (+ (* 2 k) 1) 1) n))
(AND (< n (array_length t0))
(FORALL (i)
(IMPLIES (AND (<= (+ (+ (+ (* 2 k) 1) 1) 1) i) (<= i n))
(EQ (heap t0 n i) |@true|)))))))))))))))))))))))))))))

;; downheap_po_7, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result1 result2)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (+ (* 2 k) 1) 1)) |@true|)
(IMPLIES (AND (<= 0 (- n k)) (< (- n (+ (+ (* 2 k) 1) 1)) (- n k)))
(IMPLIES (AND (AND (<= 0 (+ (+ (* 2 k) 1) 1)) (<= (+ (+ (* 2 k) 1) 1) n))
         (AND (< n (array_length t0))
         (FORALL (i)
         (IMPLIES (AND (<= (+ (+ (+ (* 2 k) 1) 1) 1) i) (<= i n))
         (EQ (heap t0 n i) |@true|)))))
(FORALL (t1)
(IMPLIES (AND (EQ (permut t1 t0) |@true|)
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ (+ (* 2 k) 1) 1) i) (<= i n))
         (EQ (heap t1 n i) |@true|)))
         (AND
         (FORALL (i)
         (IMPLIES
         (OR (AND (<= 0 i) (< i (+ (+ (* 2 k) 1) 1)))
         (OR
         (AND (< (+ (+ (* 2 k) 1) 1) i)
         (< i (+ (* 2 (+ (+ (* 2 k) 1) 1)) 1)))
         (AND (< n i) (< i (array_length t1)))))
         (EQ (access t1 i) (access t0 i))))
         (FORALL (v)
         (IMPLIES (EQ (inftree t0 n v (+ (+ (* 2 k) 1) 1)) |@true|)
         (EQ (inftree t1 n v (+ (+ (* 2 k) 1) 1)) |@true|))))))
(AND (EQ (permut t1 t) |@true|)
(AND
(FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (EQ (heap t1 n i) |@true|)))
(AND
(FORALL (i)
(IMPLIES
(OR (AND (<= 0 i) (< i k))
(OR (AND (< k i) (< i (+ (* 2 k) 1))) (AND (< n i) (< i (array_length t1)))))
(EQ (access t1 i) (access t i))))
(FORALL (v)
(IMPLIES (EQ (inftree t n v k) |@true|) (EQ (inftree t1 n v k) |@true|)))))))))))))))))))))))))))))))))

;; downheap_po_8, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (< result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (>= result1 result2)
(AND (EQ (permut t t) |@true|)
(AND (FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (EQ (heap t n i) |@true|)))
(AND
(FORALL (i)
(IMPLIES
(OR (AND (<= 0 i) (< i k))
(OR (AND (< k i) (< i (+ (* 2 k) 1))) (AND (< n i) (< i (array_length t)))))
(EQ (access t i) (access t i))))
(FORALL (v)
(IMPLIES (EQ (inftree t n v k) |@true|) (EQ (inftree t n v k) |@true|))))))))))))))))))))))))))

;; downheap_po_9, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (>= result result0) (EQ (select_son t k n (+ (* 2 k) 1)) |@true|))))))))))))))

;; downheap_po_10, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (>= result result0) (AND (<= 0 k) (< k (array_length t))))))))))))))))

;; downheap_po_11, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (>= result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (* 2 k) 1)))
(IMPLIES (< result1 result2)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (* 2 k) 1)) |@true|)
(AND (<= 0 (- n k)) (< (- n (+ (* 2 k) 1)) (- n k))))))))))))))))))))))))))

;; downheap_po_12, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (>= result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (* 2 k) 1)))
(IMPLIES (< result1 result2)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (* 2 k) 1)) |@true|)
(IMPLIES (AND (<= 0 (- n k)) (< (- n (+ (* 2 k) 1)) (- n k)))
(AND (AND (<= 0 (+ (* 2 k) 1)) (<= (+ (* 2 k) 1) n))
(AND (< n (array_length t0))
(FORALL (i)
(IMPLIES (AND (<= (+ (+ (* 2 k) 1) 1) i) (<= i n))
(EQ (heap t0 n i) |@true|)))))))))))))))))))))))))))))

;; downheap_po_13, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (>= result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (* 2 k) 1)))
(IMPLIES (< result1 result2)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (* 2 k) 1)) |@true|)
(IMPLIES (AND (<= 0 (- n k)) (< (- n (+ (* 2 k) 1)) (- n k)))
(IMPLIES (AND (AND (<= 0 (+ (* 2 k) 1)) (<= (+ (* 2 k) 1) n))
         (AND (< n (array_length t0))
         (FORALL (i)
         (IMPLIES (AND (<= (+ (+ (* 2 k) 1) 1) i) (<= i n))
         (EQ (heap t0 n i) |@true|)))))
(FORALL (t1)
(IMPLIES (AND (EQ (permut t1 t0) |@true|)
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ (* 2 k) 1) i) (<= i n))
         (EQ (heap t1 n i) |@true|)))
         (AND
         (FORALL (i)
         (IMPLIES
         (OR (AND (<= 0 i) (< i (+ (* 2 k) 1)))
         (OR (AND (< (+ (* 2 k) 1) i) (< i (+ (* 2 (+ (* 2 k) 1)) 1)))
         (AND (< n i) (< i (array_length t1)))))
         (EQ (access t1 i) (access t0 i))))
         (FORALL (v)
         (IMPLIES (EQ (inftree t0 n v (+ (* 2 k) 1)) |@true|)
         (EQ (inftree t1 n v (+ (* 2 k) 1)) |@true|))))))
(AND (EQ (permut t1 t) |@true|)
(AND
(FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (EQ (heap t1 n i) |@true|)))
(AND
(FORALL (i)
(IMPLIES
(OR (AND (<= 0 i) (< i k))
(OR (AND (< k i) (< i (+ (* 2 k) 1))) (AND (< n i) (< i (array_length t1)))))
(EQ (access t1 i) (access t i))))
(FORALL (v)
(IMPLIES (EQ (inftree t n v k) |@true|) (EQ (inftree t1 n v k) |@true|)))))))))))))))))))))))))))))))))

;; downheap_po_14, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (<= (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (+ (* 2 k) 1)))
(IMPLIES (AND (<= 0 (+ (+ (* 2 k) 1) 1))
         (< (+ (+ (* 2 k) 1) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (+ (* 2 k) 1) 1)))
(IMPLIES (>= result result0)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t (+ (* 2 k) 1)))
(IMPLIES (>= result1 result2)
(AND (EQ (permut t t) |@true|)
(AND (FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (EQ (heap t n i) |@true|)))
(AND
(FORALL (i)
(IMPLIES
(OR (AND (<= 0 i) (< i k))
(OR (AND (< k i) (< i (+ (* 2 k) 1))) (AND (< n i) (< i (array_length t)))))
(EQ (access t i) (access t i))))
(FORALL (v)
(IMPLIES (EQ (inftree t n v k) |@true|) (EQ (inftree t n v k) |@true|))))))))))))))))))))))))))

;; downheap_po_15, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (> (+ (+ (* 2 k) 1) 1) n)
(EQ (select_son t k n (+ (* 2 k) 1)) |@true|)))))))

;; downheap_po_16, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (> (+ (+ (* 2 k) 1) 1) n) (AND (<= 0 k) (< k (array_length t)))))))))

;; downheap_po_17, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (> (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t k))
(AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t))))))))))))

;; downheap_po_18, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (> (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (* 2 k) 1)))
(IMPLIES (< result result0)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (* 2 k) 1)) |@true|)
(AND (<= 0 (- n k)) (< (- n (+ (* 2 k) 1)) (- n k)))))))))))))))))))

;; downheap_po_19, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (> (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (* 2 k) 1)))
(IMPLIES (< result result0)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (* 2 k) 1)) |@true|)
(IMPLIES (AND (<= 0 (- n k)) (< (- n (+ (* 2 k) 1)) (- n k)))
(AND (AND (<= 0 (+ (* 2 k) 1)) (<= (+ (* 2 k) 1) n))
(AND (< n (array_length t0))
(FORALL (i)
(IMPLIES (AND (<= (+ (+ (* 2 k) 1) 1) i) (<= i n))
(EQ (heap t0 n i) |@true|))))))))))))))))))))))

;; downheap_po_20, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (> (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (* 2 k) 1)))
(IMPLIES (< result result0)
(IMPLIES (AND (AND (<= 0 k) (< k (array_length t)))
         (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t))))
(FORALL (t0)
(IMPLIES (EQ (exchange t0 t k (+ (* 2 k) 1)) |@true|)
(IMPLIES (AND (<= 0 (- n k)) (< (- n (+ (* 2 k) 1)) (- n k)))
(IMPLIES (AND (AND (<= 0 (+ (* 2 k) 1)) (<= (+ (* 2 k) 1) n))
         (AND (< n (array_length t0))
         (FORALL (i)
         (IMPLIES (AND (<= (+ (+ (* 2 k) 1) 1) i) (<= i n))
         (EQ (heap t0 n i) |@true|)))))
(FORALL (t1)
(IMPLIES (AND (EQ (permut t1 t0) |@true|)
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ (* 2 k) 1) i) (<= i n))
         (EQ (heap t1 n i) |@true|)))
         (AND
         (FORALL (i)
         (IMPLIES
         (OR (AND (<= 0 i) (< i (+ (* 2 k) 1)))
         (OR (AND (< (+ (* 2 k) 1) i) (< i (+ (* 2 (+ (* 2 k) 1)) 1)))
         (AND (< n i) (< i (array_length t1)))))
         (EQ (access t1 i) (access t0 i))))
         (FORALL (v)
         (IMPLIES (EQ (inftree t0 n v (+ (* 2 k) 1)) |@true|)
         (EQ (inftree t1 n v (+ (* 2 k) 1)) |@true|))))))
(AND (EQ (permut t1 t) |@true|)
(AND
(FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (EQ (heap t1 n i) |@true|)))
(AND
(FORALL (i)
(IMPLIES
(OR (AND (<= 0 i) (< i k))
(OR (AND (< k i) (< i (+ (* 2 k) 1))) (AND (< n i) (< i (array_length t1)))))
(EQ (access t1 i) (access t i))))
(FORALL (v)
(IMPLIES (EQ (inftree t n v k) |@true|) (EQ (inftree t1 n v k) |@true|))))))))))))))))))))))))))

;; downheap_po_21, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (<= (+ (* 2 k) 1) n)
(IMPLIES (> (+ (+ (* 2 k) 1) 1) n)
(IMPLIES (AND (<= 0 k) (< k (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t k))
(IMPLIES (AND (<= 0 (+ (* 2 k) 1)) (< (+ (* 2 k) 1) (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t (+ (* 2 k) 1)))
(IMPLIES (>= result result0)
(AND (EQ (permut t t) |@true|)
(AND (FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (EQ (heap t n i) |@true|)))
(AND
(FORALL (i)
(IMPLIES
(OR (AND (<= 0 i) (< i k))
(OR (AND (< k i) (< i (+ (* 2 k) 1))) (AND (< n i) (< i (array_length t)))))
(EQ (access t i) (access t i))))
(FORALL (v)
(IMPLIES (EQ (inftree t n v k) |@true|) (EQ (inftree t n v k) |@true|)))))))))))))))))))

;; downheap_po_22, Why obligation from file "", line 0, characters 0-0:
(FORALL (k)
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k n))
         (AND (< n (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i n)) (EQ (heap t n i) |@true|)))))
(IMPLIES (> (+ (* 2 k) 1) n)
(AND (EQ (permut t t) |@true|)
(AND (FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (EQ (heap t n i) |@true|)))
(AND
(FORALL (i)
(IMPLIES
(OR (AND (<= 0 i) (< i k))
(OR (AND (< k i) (< i (+ (* 2 k) 1))) (AND (< n i) (< i (array_length t)))))
(EQ (access t i) (access t i))))
(FORALL (v)
(IMPLIES (EQ (inftree t n v k) |@true|) (EQ (inftree t n v k) |@true|)))))))))))

;; heapsort_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(AND
(AND (<= (- 0 1) (Zdiv2 (- result 2)))
(<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
(AND
(FORALL (i)
(IMPLIES
(AND (<= (+ (Zdiv2 (- result 2)) 1) i) (<= i (- (array_length t) 1)))
(EQ (heap t (- (array_length t) 1) i) |@true|))) (EQ (permut t t) |@true|)))))))

;; heapsort_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (>= k 0)
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(AND (AND (<= 0 k) (<= k (- result0 1)))
(AND (< (- result0 1) (array_length t0))
(FORALL (i)
(IMPLIES (AND (<= (+ k 1) i) (<= i (- result0 1)))
(EQ (heap t0 (- result0 1) i) |@true|))))))))))))))))

;; heapsort_po_3, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (>= k 0)
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (AND (AND (<= 0 k) (<= k (- result0 1)))
         (AND (< (- result0 1) (array_length t0))
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- result0 1)))
         (EQ (heap t0 (- result0 1) i) |@true|)))))
(FORALL (t1)
(IMPLIES (AND (EQ (permut t1 t0) |@true|)
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= k i) (<= i (- result0 1)))
         (EQ (heap t1 (- result0 1) i) |@true|)))
         (AND
         (FORALL (i)
         (IMPLIES
         (OR (AND (<= 0 i) (< i k))
         (OR (AND (< k i) (< i (+ (* 2 k) 1)))
         (AND (< (- result0 1) i) (< i (array_length t1)))))
         (EQ (access t1 i) (access t0 i))))
         (FORALL (v)
         (IMPLIES (EQ (inftree t0 (- result0 1) v k) |@true|)
         (EQ (inftree t1 (- result0 1) v k) |@true|))))))
(FORALL (k0)
(IMPLIES (EQ k0 (- k 1))
(AND
(AND (AND (<= (- 0 1) k0) (<= k0 (- (array_length t1) 1)))
(AND
(FORALL (i)
(IMPLIES (AND (<= (+ k0 1) i) (<= i (- (array_length t1) 1)))
(EQ (heap t1 (- (array_length t1) 1) i) |@true|)))
(EQ (permut t1 t) |@true|))) (AND (<= 0 (+ k 1)) (< (+ k0 1) (+ k 1))))))))))))))))))))

;; heapsort_po_4, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (< k 0)
(AND (EQ (heap t0 (- (array_length t0) 1) 0) |@true|)
(EQ (permut t0 t) |@true|)))))))))))

;; heapsort_po_5, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (< k 0)
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(AND (AND (<= 0 (- result0 1)) (<= (- result0 1) (- (array_length t0) 1)))
(AND
(FORALL (i)
(IMPLIES (AND (<= 0 i) (<= i (- result0 1)))
(EQ (heap t0 (- result0 1) i) |@true|)))
(AND
(IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
(<= (access t0 0) (access t0 (+ (- result0 1) 1))))
(AND
(IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
(EQ (sorted_array t0 (+ (- result0 1) 1) (- (array_length t0) 1)) |@true|))
(EQ (permut t0 t) |@true|))))))))))))))))

;; heapsort_po_6, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (< k 0)
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (AND
         (AND (<= 0 (- result0 1))
         (<= (- result0 1) (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i (- result0 1)))
         (EQ (heap t0 (- result0 1) i) |@true|)))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (<= (access t0 0) (access t0 (+ (- result0 1) 1))))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (EQ (sorted_array t0 (+ (- result0 1) 1)
         (- (array_length t0) 1)) |@true|)) (EQ (permut t0 t) |@true|)))))
(FORALL (k0)
(FORALL (t1)
(IMPLIES (AND (AND (<= 0 k0) (<= k0 (- (array_length t1) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i k0)) (EQ (heap t1 k0 i) |@true|)))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (<= (access t1 0) (access t1 (+ k0 1))))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (EQ (sorted_array t1 (+ k0 1) (- (array_length t1) 1)) |@true|))
         (EQ (permut t1 t) |@true|)))))
(IMPLIES (>= k0 1)
(AND (AND (<= 0 0) (< 0 (array_length t1)))
(AND (<= 0 k0) (< k0 (array_length t1))))))))))))))))))))

;; heapsort_po_7, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (< k 0)
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (AND
         (AND (<= 0 (- result0 1))
         (<= (- result0 1) (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i (- result0 1)))
         (EQ (heap t0 (- result0 1) i) |@true|)))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (<= (access t0 0) (access t0 (+ (- result0 1) 1))))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (EQ (sorted_array t0 (+ (- result0 1) 1)
         (- (array_length t0) 1)) |@true|)) (EQ (permut t0 t) |@true|)))))
(FORALL (k0)
(FORALL (t1)
(IMPLIES (AND (AND (<= 0 k0) (<= k0 (- (array_length t1) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i k0)) (EQ (heap t1 k0 i) |@true|)))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (<= (access t1 0) (access t1 (+ k0 1))))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (EQ (sorted_array t1 (+ k0 1) (- (array_length t1) 1)) |@true|))
         (EQ (permut t1 t) |@true|)))))
(IMPLIES (>= k0 1)
(IMPLIES (AND (AND (<= 0 0) (< 0 (array_length t1)))
         (AND (<= 0 k0) (< k0 (array_length t1))))
(FORALL (t2)
(IMPLIES (EQ (exchange t2 t1 0 k0) |@true|)
(AND (AND (<= 0 0) (<= 0 (- k0 1)))
(AND (< (- k0 1) (array_length t2))
(FORALL (i)
(IMPLIES (AND (<= (+ 0 1) i) (<= i (- k0 1)))
(EQ (heap t2 (- k0 1) i) |@true|))))))))))))))))))))))))

;; heapsort_po_8, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (< k 0)
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (AND
         (AND (<= 0 (- result0 1))
         (<= (- result0 1) (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i (- result0 1)))
         (EQ (heap t0 (- result0 1) i) |@true|)))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (<= (access t0 0) (access t0 (+ (- result0 1) 1))))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (EQ (sorted_array t0 (+ (- result0 1) 1)
         (- (array_length t0) 1)) |@true|)) (EQ (permut t0 t) |@true|)))))
(FORALL (k0)
(FORALL (t1)
(IMPLIES (AND (AND (<= 0 k0) (<= k0 (- (array_length t1) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i k0)) (EQ (heap t1 k0 i) |@true|)))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (<= (access t1 0) (access t1 (+ k0 1))))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (EQ (sorted_array t1 (+ k0 1) (- (array_length t1) 1)) |@true|))
         (EQ (permut t1 t) |@true|)))))
(IMPLIES (>= k0 1)
(IMPLIES (AND (AND (<= 0 0) (< 0 (array_length t1)))
         (AND (<= 0 k0) (< k0 (array_length t1))))
(FORALL (t2)
(IMPLIES (EQ (exchange t2 t1 0 k0) |@true|)
(IMPLIES (AND (AND (<= 0 0) (<= 0 (- k0 1)))
         (AND (< (- k0 1) (array_length t2))
         (FORALL (i)
         (IMPLIES (AND (<= (+ 0 1) i) (<= i (- k0 1)))
         (EQ (heap t2 (- k0 1) i) |@true|)))))
(FORALL (t3)
(IMPLIES (AND (EQ (permut t3 t2) |@true|)
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i (- k0 1)))
         (EQ (heap t3 (- k0 1) i) |@true|)))
         (AND
         (FORALL (i)
         (IMPLIES
         (OR (AND (<= 0 i) (< i 0))
         (OR (AND (< 0 i) (< i (+ (* 2 0) 1)))
         (AND (< (- k0 1) i) (< i (array_length t3)))))
         (EQ (access t3 i) (access t2 i))))
         (FORALL (v)
         (IMPLIES (EQ (inftree t2 (- k0 1) v 0) |@true|)
         (EQ (inftree t3 (- k0 1) v 0) |@true|))))))
(FORALL (k1)
(IMPLIES (EQ k1 (- k0 1))
(AND
(AND (AND (<= 0 k1) (<= k1 (- (array_length t3) 1)))
(AND
(FORALL (i) (IMPLIES (AND (<= 0 i) (<= i k1)) (EQ (heap t3 k1 i) |@true|)))
(AND
(IMPLIES (<= (+ k1 1) (- (array_length t3) 1))
(<= (access t3 0) (access t3 (+ k1 1))))
(AND
(IMPLIES (<= (+ k1 1) (- (array_length t3) 1))
(EQ (sorted_array t3 (+ k1 1) (- (array_length t3) 1)) |@true|))
(EQ (permut t3 t) |@true|))))) (AND (<= 0 k0) (< k1 k0)))))))))))))))))))))))))))

;; heapsort_po_9, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 1 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= (- 0 1) (Zdiv2 (- result 2)))
         (<= (Zdiv2 (- result 2)) (- (array_length t) 1)))
         (AND
         (FORALL (i)
         (IMPLIES
         (AND (<= (+ (Zdiv2 (- result 2)) 1) i)
         (<= i (- (array_length t) 1)))
         (EQ (heap t (- (array_length t) 1) i) |@true|)))
         (EQ (permut t t) |@true|)))
(FORALL (k)
(FORALL (t0)
(IMPLIES (AND (AND (<= (- 0 1) k) (<= k (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= (+ k 1) i) (<= i (- (array_length t0) 1)))
         (EQ (heap t0 (- (array_length t0) 1) i) |@true|)))
         (EQ (permut t0 t) |@true|)))
(IMPLIES (< k 0)
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (AND
         (AND (<= 0 (- result0 1))
         (<= (- result0 1) (- (array_length t0) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i (- result0 1)))
         (EQ (heap t0 (- result0 1) i) |@true|)))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (<= (access t0 0) (access t0 (+ (- result0 1) 1))))
         (AND
         (IMPLIES (<= (+ (- result0 1) 1) (- (array_length t0) 1))
         (EQ (sorted_array t0 (+ (- result0 1) 1)
         (- (array_length t0) 1)) |@true|)) (EQ (permut t0 t) |@true|)))))
(FORALL (k0)
(FORALL (t1)
(IMPLIES (AND (AND (<= 0 k0) (<= k0 (- (array_length t1) 1)))
         (AND
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (<= i k0)) (EQ (heap t1 k0 i) |@true|)))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (<= (access t1 0) (access t1 (+ k0 1))))
         (AND
         (IMPLIES (<= (+ k0 1) (- (array_length t1) 1))
         (EQ (sorted_array t1 (+ k0 1) (- (array_length t1) 1)) |@true|))
         (EQ (permut t1 t) |@true|)))))
(IMPLIES (< k0 1)
(AND (EQ (sorted_array t1 0 (- (array_length t1) 1)) |@true|)
(EQ (permut t1 t) |@true|))))))))))))))))))

