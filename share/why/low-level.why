(**************************************************************************)
(*                                                                        *)
(*  This file is part of Frama-C.                                         *)
(*                                                                        *)
(*  Copyright (C) 2007-2009                                               *)
(*    CEA   (Commissariat à l'Énergie Atomique)                           *)
(*    INRIA (Institut National de Recherche en Informatique et en         *)
(*           Automatique)                                                 *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version v2.1                *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(*include "integer.why"
include "arrays.why"
*)
(* Low-level memory model for C programs *)

(* 1. Memory *)
type memory
type memory_type
logic Mbool : memory_type
logic Menum : memory_type
logic Mchar : memory_type
logic Mschar : memory_type
logic Muchar : memory_type
logic Mint : memory_type
logic Muint : memory_type
logic Mshort : memory_type
logic Mushort : memory_type
logic Mlong : memory_type
logic Mulong : memory_type
logic Mlonglong : memory_type
logic Mulonglong : memory_type

logic Mfloat : memory_type
logic Mdouble : memory_type
logic Mlongdouble : memory_type

logic Mptr : memory_type

logic sizeof : memory_type -> int

type address
logic base : int -> address
logic shift : address, int -> address
logic baseOf : address -> int
logic offsetOf : address -> int

predicate disjoint(a:address, t:memory_type, a':address, t':memory_type) =
baseOf(a) <> baseOf(a')
or offsetOf(a) + sizeof(t) <= offsetOf(a')
or offsetOf(a') + sizeof(t') <= offsetOf(a)

(* 2. Values *)

type value
logic Vint : int -> value
logic Vfloat : real -> value
logic Vptr : address -> value

logic vtoa : value -> address
logic atov : address -> value

axiom vtoa_atov_inv : forall a:address. vtoa(atov(a)) = a

(* 3. Memory access and update *)

logic acc : memory, memory_type, address -> value

logic upd : memory, memory_type, address, value -> memory

axiom acc_upd_eq : 
  forall m:memory. forall a:address. forall v:value. forall t: memory_type.
  acc(upd(m,t,a,v),t,a) = v

axiom acc_upd_neq : 
  forall m:memory. forall a, a':address.
  forall v:value. forall t, t': memory_type.
  disjoint(a,t,a',t') -> acc(upd(m,t,a,v),t',a') = acc(m,t',a')


(*
Put this in the coq file : 
Hint Rewrite [acc_upd_eq] in base0.
Ltac PPC := intuition;subst;autorewrite with base0;trivial.
Hint Resolve sep_c_x.
*)

