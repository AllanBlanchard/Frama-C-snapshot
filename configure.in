##########################################################################
#                                                                        #
#  This file is part of Frama-C.                                         #
#                                                                        #
#  Copyright (C) 2007-2008                                               #
#    CEA   (Commissariat à l'Énergie Atomique)                           #
#    INRIA (Institut National de Recherche en Informatique et en         #
#           Automatique)                                                 #
#                                                                        #
#  you can redistribute it and/or modify it under the terms of the GNU   #
#  Lesser General Public License as published by the Free Software       #
#  Foundation, version 2.1.                                              #
#                                                                        #
#  It is distributed in the hope that it will be useful,                 #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#  GNU Lesser General Public License for more details.                   #
#                                                                        #
#  See the GNU Lesser General Public License version v2.1                #
#  for more details (enclosed in the file licenses/LGPLv2.1).            #
#                                                                        #
##########################################################################

#
# autoconf input for Objective Caml programs
# Copyright (C) 2001 Jean-Christophe Filliâtre
#   from a first script by Georges Mariano

# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found,
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex" (or "ocamllex.opt" if present)
#   OCAMLYACC     "ocamlyacc"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number
#   OCAMLWIN32    "yes"/"no" depending on Sys.os_type = "Win32"
#   EXE           ".exe" if OCAMLWIN32=yes, "" otherwise

AC_INIT(src/kernel)
export CYGWIN=nobinmode

AC_CONFIG_HEADER(config.h)

upper() {
  echo "$1" | tr "a-z" "A-Z"
}

lower() {
  echo "$1" | tr "A-Z" "a-z"
}

new_section() {
  banner=`echo "* $1 *" | sed -e 's/./*/g'`
  title=`echo "* $1 *" | tr "a-z" "A-Z"`
  AC_MSG_NOTICE($banner)
  AC_MSG_NOTICE($title)
  AC_MSG_NOTICE($banner)
}

##########################
# Check for Make version #
##########################

new_section "configure make"

AC_CHECK_PROG(MAKE,make,make,)
MAKE_DISTRIB=`$MAKE -v | sed -n -e 's/\(.*\) Make.*$/\1/p' `
MAKE_MAJOR=`$MAKE -v | sed -n  -f bin/sed_get_make_major `
MAKE_MINOR=`$MAKE -v | sed -n -f bin/sed_get_make_minor `
echo $ECHO_N "make version is $MAKE_DISTRIB Make $MAKE_MAJOR.$MAKE_MINOR: $ECHO_C"
if test "$MAKE_DISTRIB" != GNU -o "$MAKE_MAJOR" -lt 3 -o "$MAKE_MINOR" -lt 81;
then
   echo "${ECHO_T}"
   AC_MSG_ERROR([unsupported version; GNU Make version 3.81
                 or higher is required.]);
else
   echo "${ECHO_T}Good!"
fi

# verbosemake feature
AC_ARG_ENABLE(verbosemake,[  --enable-verbosemake    verbose makefile commands],VERBOSEMAKE=yes,VERBOSEMAKE=no)
if test "$VERBOSEMAKE" = yes ; then
	AC_MSG_RESULT(Make will be verbose.)
fi

#############################
# Check for Ocaml compilers #
#############################

new_section "configure ocaml compilers"

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number and library path
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
echo $ECHO_N "ocaml version is $OCAMLVERSION: $ECHO_C"
case $OCAMLVERSION in
  3.09.3*) echo "${ECHO_T}Good!";;
  3.09*) echo "${ECHO_T}Warning: unsupported version. Compile at your own risks";;
  3.0*) echo "${ECHO_T}Unsupported version!"; exit 2;;
  3.10.0) echo "${ECHO_T}Warning: unsupported version. Compile at your own risks";;
  3.*) echo "${ECHO_T}Good!";;
  *) echo "${ECHO_T}Unsupported version!"; exit 2;;
esac

# Ocaml library path
OCAMLLIB=`$OCAMLC -where | tr -d '\\r'`
echo "ocaml library path is $OCAMLLIB"

# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
	AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
	    OCAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLC=$OCAMLCDOTOPT
	fi
fi

# checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVER" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLOPT=$OCAMLOPTDOTOPT
	fi
    fi
fi

##############################################
# Check for other mandatory tools/libraries #
##############################################

new_section "configure mandatory tools and libraries"

# ocamldep
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(Cannot find ocamldep.)
else
    AC_CHECK_PROG(OCAMLDEPDOTOPT,ocamldep.opt,ocamldep.opt,no)
    if test "$OCAMLDEPDOTOPT" != no ; then
	OCAMLDEP=$OCAMLDEPDOTOPT
    fi
fi

# ocamllex
AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
    AC_MSG_ERROR(Cannot find ocamllex.)
else
    AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
    if test "$OCAMLLEXDOTOPT" != no ; then
	OCAMLLEX=$OCAMLLEXDOTOPT
    fi
fi

# ocamlyacc
AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

# camlp4o
AC_CHECK_PROG(CAMLP4O,camlp4o,camlp4o,no)
if test "$CAMLP4O" == no ; then
   AC_MSG_ERROR([You need to install camlp4.])
fi

# camlp4oof
AC_CHECK_PROG(CAMLP4OOF,camlp4oof,camlp4oof,no)
if test "$CAMLP4OOF" == no ; then
  case $OCAMLVERSION in
    3.09*) CAMLP4OOF="$CAMLP4O pa_macro.cmo pr_o.cmo" ;;
    *) AC_MSG_ERROR([You need to install camlp4.]);;
  esac
fi

# ocamlgraph

OCAMLGRAPH_LOCAL=ocamlgraph
OCAMLGRAPH_EXISTS=no

OCAMLGRAPH_TEST=$OCAMLGRAPH_LOCAL
OCAMLGRAPH="-I lib"
AC_CHECK_FILE($OCAMLGRAPH_TEST,OCAMLGRAPH_EXISTS=yes)

if test "$OCAMLGRAPH_EXISTS" == "no"; then
 AC_CHECK_FILE(ocamlgraph.tar.gz,OCAMLGRAPH_EXISTS=yes)
 if test "$OCAMLGRAPH_EXISTS" == "yes"; then
         AC_MSG_NOTICE([Unarchiving ocamlgraph.tar.gz])
         tar zxf ocamlgraph.tar.gz
 fi   
fi

#NB: until now, it is not really possible to check a particular
#version of ocamlgraph if it is installed system-wide. for godi installs, this
#is taken into account by godi itself
if test "$OCAMLGRAPH_EXISTS" == "no"; then
   OCAMLGRAPH_LOCAL=""
   OCAMLGRAPH_TEST=$OCAMLLIB/ocamlgraph
   OCAMLGRAPH="-I +ocamlgraph"
   AC_CHECK_FILE($OCAMLGRAPH_TEST,OCAMLGRAPH_EXISTS=yes)

   if test "$OCAMLGRAPH_EXISTS" == "no"; then
      OCAMLGRAPH_TEST=$OCAMLLIB
      OCAMLGRAPH=
      AC_CHECK_FILE($OCAMLGRAPH_TEST/graph.cmo,OCAMLGRAPH_EXISTS=yes)
   fi

   if test "$OCAMLGRAPH_EXISTS" == "no"; then
      AC_MSG_ERROR(Cannot find $OCAMLGRAPH_LOCAL in current directory
      Please download the latest version from http://ocamlgraph.lri.fr/download
      Compile it in "ocamlgraph" then rerun ./configure)
   fi
else
        AC_CHECK_FILE($OCAMLGRAPH_TEST/Makefile,,
        AC_MSG_NOTICE([Configuring ocamlgraph])
        [(cd $OCAMLGRAPH_TEST && ./configure > /dev/null)])
#        AC_CHECK_FILE($OCAMLGRAPH_TEST/graph.cmo,,
#        AC_MSG_NOTICE([ocamlgraph not compiled: compiling it])
#        [$MAKE -s -C $OCAMLGRAPH_TEST])
fi

#################################################
# Check for other non-mandatory tools/libraries #
#################################################

new_section "configure non-mandatory tools and libraries"

AC_CHECK_PROG(OCAMLDOC,ocamldoc,ocamldoc,no)
if test "$OCAMLDOC" = no ; then
        AC_MSG_RESULT(ocamldoc discarded not present)
fi

AC_CHECK_PROG(OCAMLMKTOP,ocamlmktop,ocamlmktop,no)
if test "$OCAMLMKTOP" = no ; then
	AC_MSG_RESULT(Cannot find ocamlmktop: toplevels cannot be built.)
fi

AC_CHECK_PROG(OTAGS,otags,otags,)
AC_CHECK_PROG(DOT,dot,dot,)

############
# Platform #
############

new_section "configure platform"

AC_MSG_CHECKING(platform)
if echo "let _ = Sys.os_type;;" | ocaml | grep -q Win32; then
    AC_MSG_RESULT(Win32)
    OCAMLWIN32=yes
    EXE=.exe
else
    OCAMLWIN32=no
    EXE=
    if echo "let _ = Sys.os_type;;" | ocaml | grep -q Cygwin; then
       AC_MSG_RESULT(Cygwin)
       EXE=.exe
    fi
fi

AC_CHECK_HEADERS(stdlib.h)
AC_CHECK_HEADERS(wchar.h)


# Find out the true definitions of some integer types
# checkIntegerype(size_t) will echo "int" or "long"
checkIntegerType() {
  fn="testtype.c"
  fo="testtype.o"
  for t in "int" "unsigned int" "long" "unsigned long" "short" "unsigned short" "char" "unsigned  char" ;do
     echo "#include <stddef.h>" >$fn
     echo "#include <wchar.h>" >>$fn
     # We define a prototype with one type and the function with
     # another type. This will result in compilation error
     # unless the types are really identical
     echo "$t foo($t x);"      >>$fn
     echo "$1 foo($1 x) { return x;}" >>$fn
     if gcc -c $fn 2>/dev/null ;then
        # Found it
        echo $t
        rm -f $fn $fo
        return
     fi
  done
  rm -f $fn $fo
}

AC_MSG_CHECKING([definition of size_t])
TYPE_SIZE_T=`checkIntegerType "size_t"`
if test "x$TYPE_SIZE_T" = "x" ;then
  AC_MSG_ERROR([Cannot find definition of size_t])
fi
AC_DEFINE_UNQUOTED(TYPE_SIZE_T, "$TYPE_SIZE_T")
AC_MSG_RESULT([$TYPE_SIZE_T])

AC_MSG_CHECKING([definition of wchar_t])
TYPE_WCHAR_T=`checkIntegerType "wchar_t"`
if test "x$TYPE_WCHAR_T" = "x" ;then
  AC_MSG_ERROR([Cannot find definition of wchar_t])
fi
AC_DEFINE_UNQUOTED(TYPE_WCHAR_T, "$TYPE_WCHAR_T")
AC_MSG_RESULT([$TYPE_WCHAR_T])

AC_MSG_CHECKING([definition of ptrdiff_t])
TYPE_PTRDIFF_T=`checkIntegerType "ptrdiff_t"`
if test "x$TYPE_PTRDIFF_T" = "x" ;then
  AC_MSG_ERROR([Cannot find definition of ptrdiff_t])
fi
AC_DEFINE_UNQUOTED(TYPE_PTRDIFF_T, "$TYPE_PTRDIFF_T")
AC_MSG_RESULT([$TYPE_PTRDIFF_T])

AC_MSG_CHECKING([for gcc version])
AC_CHECK_TYPE(__builtin_va_list,
              HAVE_BUILTIN_VA_LIST=true,
              HAVE_BUILTIN_VA_LIST=false)
AC_MSG_CHECKING([if __thread is a keyword])
AC_COMPILE_IFELSE([int main(int __thread) { return 0; }],
                  THREAD_IS_KEYWORD=false,
                  THREAD_IS_KEYWORD=true)
AC_MSG_RESULT($THREAD_IS_KEYWORD)

# Does gcc add underscores to identifiers to make assembly labels?
# (I think MSVC always does)
AC_MSG_CHECKING([if gcc adds underscores to assembly labels.])
AC_LINK_IFELSE([int main() { __asm__("jmp _main"); }],
                  UNDERSCORE_NAME=true,
                  UNDERSCORE_NAME=false)
AC_MSG_RESULT($UNDERSCORE_NAME)

AC_MSG_CHECKING(if performance counters are usable)
# Create a C file from src/perfcount.c.in
rm -f ./cycles.exe
if gcc -DCONFIGURATION_ONLY \
       -x c cil/ocamlutil/perfcount.c.in -lm -o bin/cycles.exe >/dev/null 2>&1; then

   if CYCLES_PER_USEC=`bin/cycles.exe 2>&1` ;then
     AC_MSG_RESULT([ok ($CYCLES_PER_USEC cycles per us)])
   else
     # Print what we got
     AC_MSG_RESULT([no ($CYCLES_PER_USEC)])
     CYCLES_PER_USEC=0
   fi
else
   CYCLES_PER_USEC=0
   AC_MSG_RESULT([no (cannot compile perfcount.c)])
fi
rm -f bin/cycles.exe

# If we are on Linux and we use performance counters try to get
# the processor speed from /proc/cpuinfo
if test "$CYCLES_PER_USEC" != "0" ;then
     case "$target" in
        # linux
        *86*linux*)
             AC_MSG_CHECKING(if /proc/cpuinfo has processor speed)
             cpuinfo=`cat /proc/cpuinfo 2>/dev/null | grep "cpu MHz"`
             [procspeed=`echo $cpuinfo | sed 's/^.*[^0-9]\([0-9]\+\.[0-9]\+\).*$/\1/g'`]
             if test "$procspeed"!="" ;then
                CYCLES_PER_USEC=$procspeed
                AC_MSG_RESULT([got $CYCLES_PER_USEC cycles per us])
             else
                AC_MSG_RESULT(no)
             fi
             ;;
        *)
             ;;
      esac
      # Now set HAS_PERFCOUNT
      HAS_PERFCOUNT=1
else
      HAS_PERFCOUNT=0
fi

#################
# Plugin wished #
#################

new_section "wished frama-c plugins"

# Library declarations
######################

# REQUIRE_LIBRARY: library *must* be present in order to build plugins
# USE_LIBRARY: better for plugins if library is present, but not required
# HAS_LIBRARY: is the library available?

REQUIRE_ELSA=
USE_ELSA=
HAS_ELSA=

REQUIRE_LABLGTK=
USE_LABLGTK=
HAS_LABLGTK=

REQUIRE_WHYJC=
USE_WHYJC=
HAS_WHYJC=

# Tool declarations
####################

LABLGLADECC=
REQUIRE_LABLGLADECC=
USE_LABLGLADECC=
HAS_LABLGLADECC=

### Now plugin declarations

define([check_plugin],
[
define([PLUGIN_NAME],$1)
define([PLUGIN_FILE],$2)
define([PLUGIN_MSG],$3)
define([PLUGIN_DEFAULT],$4)
default=PLUGIN_DEFAULT
AC_CHECK_FILE(PLUGIN_FILE,plugin_present=yes,plugin_present=no;default=no)
FORCE=no
define([PLUGIN_HELP],
       AC_HELP_STRING([--enable-PLUGIN_NAME],
                      [PLUGIN_MSG (default: PLUGIN_DEFAULT)]))
AC_ARG_ENABLE(
  [PLUGIN_NAME],
  PLUGIN_HELP,
  ENABLE=$enableval;
  FORCE=$enableval,
  ENABLE=$default
)
if test "$plugin_present" == "no" -a "$FORCE" == "yes"; \
then
AC_MSG_ERROR([constant propagation is not available])
fi
up=`upper PLUGIN_NAME`
eval FORCE_$up=\$FORCE
eval ENABLE_$up=\$ENABLE

echo "PLUGIN_NAME... $ENABLE"
])

# constant propagation
######################

check_plugin(constant_propagation, src/constant_propagation,
             [support for constant propagation plugin], yes)

# cxx
#####

check_plugin(cxx,cxx_elsa,[support for cxx plugin],no)

if test "$ENABLE_CXX" == "yes"; then
  REQUIRE_ELSA=${REQUIRE_ELSA}" cxx"
fi

# from
######

check_plugin(from,src/from,[support for from analysis],yes)

# gui
#####

check_plugin(gui,src/gui,[support for gui],yes)

if test "$ENABLE_GUI" == "yes"; then
  REQUIRE_LABLGTK=${REQUIRE_LABLGTK}" gui"
fi

# impact
########

check_plugin(impact,src/impact,[support for impact plugin],yes)

# inout
#######

check_plugin(inout,src/inout,[support for inout analysis],yes)

# jessie
########

check_plugin(jessie,src/jessie,[support for jessie plugin],yes)

if test "$ENABLE_JESSIE" == "yes"; then
   REQUIRE_WHYJC=${REQUIRE_WHYJC}" jessie"
fi

# miel
######

check_plugin(miel,src/miel,[support for miel plugin],no)

if test "$ENABLE_MIEL" == "yes"; then
  REQUIRE_LABLGTK=${REQUIRE_LABLGTK}" miel"
  REQUIRE_LABLGLADECC=${REQUIRE_LABLGLADECC}" miel"
fi

# occurrence
############

check_plugin(occurrence,src/occurrence,[support for occurrence analysis],yes)

# pdg
#####

check_plugin(pdg,src/pdg,[support for pdg plugin],yes)

# postdominators
################

check_plugin(postdominators,src/postdominators,
             [support for postdominators plugin],yes)

# scope
############

check_plugin(scope,src/scope,[support for scope plugin],yes)

# security
##########

check_plugin(security,src/security,[support for security plugin],yes)

# semantic callgraph
####################

check_plugin(semantic_callgraph,src/semantic_callgraph,
             [support for semantic_callgraph],yes)

# slicing
#########

check_plugin(slicing,src/slicing,[support for slicing plugin],yes)

# spare code
############

check_plugin(sparecode,src/sparecode,[support for sparecode plugin],yes)

# users
#######

check_plugin(users,src/users,[support for users analysis],yes)

# value
#######

check_plugin(value,src/value,[support for value analysis],yes)

# wp
####

check_plugin(wp,src/wp,[support for wp plugin],yes)

#####################################################
# Check for tools/libraries requirements of plugins #
#####################################################

new_section "configure tools and libraries used by some plugins"

has=

# 1st param: uppercase name of the library
# 2nd param: file which must exist. This parameter can be a list of files.
# In this case, they will be tried in turn until one of them exists. The
# name of the file found will be put in the variable SELECTED_$1
# 3d  param: warning to display if problem
configure_library () {
  VAR=$1
  PROG=$2
  eval require=\$REQUIRE_$1
  eval use=\$USE_$1
  msg=$3

  if test -n "$require" -o -n "$use"; then
    has=no
    for file in $PROG; do
      AC_CHECK_FILE($file,has=yes,has=no)
      if test "$has" == "yes"; then eval SELECTED_$VAR=$file break; fi
    done
    if test "$has" == "no"; then
      AC_MSG_WARN([$msg])
      if test "$require" != ""; then
        echo "plugins disable:
 $require"
        for p in $require; do
	  fp=FORCE_`upper "$p"`
	  if eval test "\$$fp" == "yes"; then
	    AC_MSG_ERROR([$p requested but $PROG missing.])
	  fi
          ep=ENABLE_`upper "$p"`
	  eval $ep="no\ \(see\ warning\ about\ \$PROG\)"
        done
      fi
      if test "$use" != ""; then
        echo "plugins not fully functional:
 $use"
        for p in $use; do
          ep=ENABLE_`upper "$p"`
	  eval eep="\$$ep"
	  if test "`echo $eep | sed -e 's/ .*//' `" != "no"; then
	    eval $ep="partial\ \(see\ warning\ about\ \$PROG\)"
          fi
        done
      fi
      echo
    fi
  fi
  eval HAS_$VAR=$has
}

# 1st param: uppercase name of the program
# 2nd param: program which must exist. See comment on configure_livrary()
# on how to deal with multiple choices for a given program.
# 3d  param: warning to display if problem
configure_tool () {
  VAR=$1
  PROG=$2
  eval require=\$REQUIRE_$1
  eval use=\$USE_$1
  msg=$3

  if test -n "$require" -o -n "$use"; then
    for file in $PROG; do
     has=
     AC_CHECK_PROG(has,$file,yes,no)
      if test "$has" == "yes"; then eval SELECTED_$VAR=$file break; fi
      done
      echo "Has : $has, $VAR";
    if test "$has" == "no"; then
      AC_MSG_WARN([$msg])
      if test "$require" != ""; then
        echo "plugins disable:
 $require"
        for p in $require; do
	  fp=FORCE_`upper "$p"`
	  if eval test "\$$fp" == "yes"; then
	    AC_MSG_ERROR([$p requested but $PROG missing.])
	  fi
          ep=ENABLE_`upper "$p"`
	  eval $ep="no\ \(see\ warning\ about\ \$PROG\)"
        done
      fi
      if test "$use" != ""; then
        echo "plugins not fully functional:
 $use"
        for p in $use; do
          ep=ENABLE_`upper "$p"`
	  eval eep="\$$ep"
	  if test "`echo $eep | sed -e 's/ .*//' `" != "no"; then
	    eval $ep="partial\ \(see\ warning\ about\ \$PROG\)"
          fi
        done
      fi
      echo
    else
      eval $VAR=$PROG
    fi
  fi
  eval HAS_$VAR=$has
}

# elsa
######
configure_library \
  ELSA \
  cxx_elsa \
  "
  sources of cxx_elsa are not present in this directory.
  Please check them out from the cvs repository."

REQUIRE_CCPARSE=
USE_CCPARSE=
HAS_CCPARSE=
if test "$has" == "yes"; then
  USE_CCPARSE="$REQUIRE_ELSA$USE_ELSA"
fi

configure_library \
  CCPARSE \
  cxx_elsa/elsa-2006.06.11/elsa/ccparse \
  "elsa seems to be uncompiled. Please run 'make elsa'."

# lablglade
###########
configure_tool \
  LABLGLADECC \
  lablgladecc2 \
  "lablgladecc2 not found."

# lablgtk2
##########
configure_library \
  LABLGTK \
  $OCAMLLIB/lablgtk2/lablgtk.cma \
  "lablgtk2 not found."

REQUIRE_GTKSOURCEVIEW=
USE_GTKSOURCEVIEW=
HAS_GTKSOURCEVIEW=

AC_ARG_ENABLE(gtksourceview,
  [  --enable-gtksourceview  uses lablgtksourceview for the gui
                          (default: auto-detected)],
     FORCE_GTKSOURCEVIEW=$enableval,
     FORCE_GTKSOURCEVIEW="no")

if test "$FORCE_GTKSOURCEVIEW" == "yes"; then
  REQUIRE_GTKSOURCEVIEW="$REQUIRE_LABLGTK"
  USE_GTKSOURCEVIEW="$USE_LABLGTK"
else
  if test "$has" == "yes"; then
    USE_GTKSOURCEVIEW="$REQUIRE_LABLGTK$USE_LABLGTK"
  fi
fi

configure_library \
  GTKSOURCEVIEW \
  "$OCAMLLIB/lablgtk2/lablgtksourceview.cma \
   $OCAMLLIB/lablgtksourceview/lablgtksourceview.cma" \
  "lablgtksourceview not found"

case $SELECTED_GTKSOURCEVIEW in
$OCAMLLIB/lablgtksourceview/lablgtksourceview.cma)
  HAS_LEGACY_GTKSOURCEVIEW=yes
  ;;
esac

# why/jc library
################

define([WHY_DEFAULT],why)
AC_ARG_WITH(
  whydir,
  [  --with-whydir=<path>	directory for Why sources (default: WHY_DEFAULT) ],
  WHYDISTRIB=$with_whydir,
  WHYDISTRIB=WHY_DEFAULT
)

configure_library \
  WHYJC \
  "$WHYDISTRIB/jc $OCAMLLIB/jessie" \
  "why not found."

if test "$has" == "yes" -a "$REQUIRE_WHYJC" != ""; then
  case $SELECTED_WHYJC in
  $WHYDISTRIB/jc)
    JCCMO=$WHYDISTRIB/jc/jc.cmo
    JCCMX=$WHYDISTRIB/jc/jc.cmx
    JESSIE_LOCAL=yes
    JESSIE_INCLUDES="-I $WHYDISTRIB/src -I $WHYDISTRIB/jc"
    (cd $WHYDISTRIB && ./configure --prefix=$prefix --datarootdir=$datarootdir \
      --exec_prefix=$exec_prefix --bindir=$bindir --libdir=$libdir \
      --mandir=$mandir)
    ;;
  $OCAMLLIB/*/jessie)
    JCCMO=$SELECTED_WHYJC/jc.cmo
    JCCMX=$SELECTED_WHYJC/jc.cmx
    JESSIE_LOCAL=no
    JESSIE_INCLUDES="-I $SELECTED_WHYJC"
    ;;
  *)
    AC_MSG_WARN([Unexpected location for why tool: $SELECTED_WHYJC])
    JESSIE_LOCAL=no
    ;;
  esac
else
  JESSIE_LOCAL=no
fi

#######################
# Plugin dependencies #
#######################

new_section "checking for plugin dependencies"

# What are the dependencies?
############################
# Each plugin has to update these lists

REQUIRE_FROM="value inout pdg slicing"

USE_GUI="occurrence security slicing value impact"

REQUIRE_PDG="slicing security"

REQUIRE_SECURITY="impact"

USE_SLICING="security miel"

REQUIRE_VALUE="constant_propagation from inout occurrence pdg scope security \
  slicing sparecode users semantic_callgraph miel"

### Now compute the dependencies
# a bit ugly... Probably optimizable

# First, initialize some variables
for fp in ${!FORCE*}; do
  if test "$fp" != "FORCE_GTKSOURCEVIEW"; then
    plugin=`echo $fp | sed -e "s/FORCE_\(.*\)/\1/" `
    TODOLIST=$TODOLIST" "$plugin
    eval MARK_$plugin=
    eval REMEMBER_$plugin=
  fi
done

# Implementation of an ordering $1 < $2: "" < yes < partial < no
lt_mark () {
  first=`echo "$1" | sed -e 's/ .*//' `
  second=`echo "$2" | sed -e 's/ .*//' `
  case $first in
    "") echo "true";;
    "yes"*)
      case $second in
        "yes") echo "";;
        "partial" | "no") echo "true";;
      esac;;
    "partial"*)
      case $second in
        "yes" | "partial") echo "";;
        "no") echo "true";;
      esac;;
    "no"*) echo "";;
  esac
}

# Check and propagate marks to requires and users.
# $1: parent plugin
# $2: mark to propagate to requires
# $3: mark to propagate to users
check_and_propagate () {
  # for each requiers
  r=REQUIRE_$1
  eval require="\$$r"
  for p in $require; do
    up=`upper "$p"`
    m=MARK_"$up"
    eval mark="\$$m"
    if test `lt_mark "$mark" "$2" `; then
      # update marks
      eval MARK_$up=\"$2\";
      TODOLIST=$TODOLIST" "$p
      # display a warning or an error if required
      short_mark=`echo $2 | sed -e 's/ .*//'`
      lp=`lower $p`
      reason=`echo $2 | sed -e 's/no (\(.*\))/\1/' `
      if test "$short_mark" == "no"; then
        fp=FORCE_"$up"
        if eval test "\$$fp" == "yes"; then
	  AC_MSG_ERROR([$lp requested but $reason.])
        else
	  AC_MSG_WARN([$lp disable because $reason.])
        fi
      else
        if test "$short_mark" == "partial"; then
          reason=`echo $2 | sed -e 's/partial (\(.*\))/\1/' `
	  AC_MSG_WARN([$lp only partially enable because $reason.])
        fi
      fi
    fi
  done
  # for each users
  u=USE_$1
  eval use="\$$u"
  for p in $use; do
    up=`upper "$p"`
    m=MARK_$up
    eval mark="\$$m"
    if test `lt_mark "$mark" "$3" `; then
      # update marks
      eval MARK_$up=\"$3\";
      TODOLIST=$TODOLIST" "$p
      # display a warning if required
      lp=`lower $p`
      reason=`echo $3 | sed -e 's/partial (\(.*\))/\1/' `
      if test "$reason" != "$3"; then
        AC_MSG_WARN([$lp only partially enable because $reason.])
      fi
    fi
  done
}

# Recursively check the plugin dependencies using the plugin dependency graph
compute_dependency () {
  plugin=`echo $TODOLIST | sed -e 's/ .*//' `
  TODOLIST=`echo $TODOLIST | sed -e 's/[[^ ]]* *\(.*\)/\1/' `

  lplugin=`lower "$plugin"`
  uplugin=`upper "$plugin"`
  # new mark to consider
  m=MARK_$uplugin
  eval mark="\$$m"
  # old mark to consider
  r=REMEMBER_$uplugin
  eval remember="\$$r"
  # the exact mark (final result),
  # also the old mark if plugin already visited
  e=ENABLE_$uplugin
  eval enable="\$$e"

#  echo "plugin $lplugin (mark=$mark, remember=$remember, enable=$enable)"
  if test `lt_mark "$remember" "$mark"`; then
    # visit the current plugin:
    # mark <- max(mark, enable)
    case `echo "$mark" | sed -e 's/ .*//' ` in
      "" | "yes")
       if test -n "$enable"; then mark="$enable"; else mark="yes"; fi;;
      "partial") if test "$enable" == "no"; then mark="no"; fi;;
      "no")      ;;
    esac
    # update plugin attributes with the new mark
#    echo "update attributes with $mark"
    eval $m=\"$mark\"
    eval $e=\"$mark\"
    enable="$mark"
    eval $r=\"$mark\"
    # compute and propagate a new mark to requieres and users
    case `echo "$enable" | sed -e 's/ .*//' ` in
      "")        echo "problem?"; exit 3;;
      "yes")     check_and_propagate $uplugin "yes" "yes";;
      "partial")
        check_and_propagate \
	  "$uplugin" \
	  "partial ($lplugin partially enable)" \
	  "yes";;
      "no")
        check_and_propagate \
	  "$uplugin" \
	  "no ($lplugin not enable)" \
	  "partial ($lplugin not enable)";;
    esac
  fi

  # recursively consider the next plugins
  if test -n "$TODOLIST"; then
    compute_dependency;
  fi
}

# main call
compute_dependency

# Compute INFO_* and exported ENABLE_* from previously computed ENABLE_*
for fp in ${!FORCE*}; do
  if test "$fp" != "FORCE_GTKSOURCEVIEW"; then
    plugin=`echo $fp | sed -e "s/FORCE_\(.*\)/\1/" `
    ep=ENABLE_$plugin
    eval v=\$$ep
    eval ep_v=`echo $v | sed -e 's/ .*//' `
    eval ENABLE_$plugin=$ep_v
    reason=`echo $v | sed -e 's/[[a-z]]*\( .*\)/\1/' `
    if test "$reason" != "$ep_v"; then
      eval INFO_$plugin="\$reason"
    fi
  fi
done

############################
# Substitutions to perform #
############################

AC_SUBST(VERBOSEMAKE)
AC_SUBST(DOT)
AC_SUBST(OCAMLGRAPH)
AC_SUBST(OCAMLGRAPH_LOCAL)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLWIN32)
AC_SUBST(EXE)

AC_SUBST(HAVE_STDLIB_H)
AC_SUBST(HAVE_WCHAR_H)
AC_SUBST(HAVE_PTRDIFF_H)
AC_SUBST(HAVE_BUILTIN_VA_LIST)
AC_SUBST(THREAD_IS_KEYWORD)
AC_SUBST(UNDERSCORE_NAME)
AC_SUBST(HAS_PERFCOUNT)
AC_SUBST(CYCLES_PER_USEC)

AC_SUBST(HAS_LABLGTK)
AC_SUBST(HAS_GTKSOURCEVIEW)
AC_SUBST(HAS_LEGACY_GTKSOURCEVIEW)
AC_SUBST(LABLGLADECC)
AC_SUBST(HAS_LABLGLADECC)
AC_SUBST(JCCMO)
AC_SUBST(JCCMX)
AC_SUBST(JESSIE_LOCAL)
AC_SUBST(JESSIE_INCLUDES)

AC_SUBST(ENABLE_CONSTANT_PROPAGATION)
AC_SUBST(ENABLE_CXX)
AC_SUBST(ENABLE_FROM)
AC_SUBST(ENABLE_GUI)
AC_SUBST(ENABLE_IMPACT)
AC_SUBST(ENABLE_INOUT)
AC_SUBST(ENABLE_JESSIE)
AC_SUBST(WHYDISTRIB)
AC_SUBST(ENABLE_MIEL)
AC_SUBST(ENABLE_OCCURRENCE)
AC_SUBST(ENABLE_PDG)
AC_SUBST(ENABLE_POSTDOMINATORS)
AC_SUBST(ENABLE_SCOPE)
AC_SUBST(ENABLE_SECURITY)
AC_SUBST(ENABLE_SEMANTIC_CALLGRAPH)
AC_SUBST(ENABLE_SLICING)
AC_SUBST(ENABLE_SPARECODE)
AC_SUBST(ENABLE_USERS)
AC_SUBST(ENABLE_VALUE)
AC_SUBST(ENABLE_WP)

AC_SUBST(datarootdir)

################################################
# Finally create the Makefile from Makefile.in #
################################################

new_section "creating makefile"

AC_OUTPUT(cil/ocamlutil/perfcount.c Makefile)
chmod a-w cil/ocamlutil/perfcount.c
chmod a-w Makefile

###########
# Summary #
###########

new_section "summary: plugins available"

AC_MSG_NOTICE([constant propagation : $ENABLE_CONSTANT_PROPAGATION$INFO_CONSTANT_PROPAGATION])
AC_MSG_NOTICE([cxx                  : $ENABLE_CXX$INFO_CXX])
AC_MSG_NOTICE([from                 : $ENABLE_FROM$INFO_FROM])
AC_MSG_NOTICE([gui                  : $ENABLE_GUI$INFO_GUI])
AC_MSG_NOTICE([impact               : $ENABLE_IMPACT$INFO_IMPACT])
AC_MSG_NOTICE([inout                : $ENABLE_INOUT$INFO_INOUT])
AC_MSG_NOTICE([jessie               : $ENABLE_JESSIE$INFO_JESSIE])
AC_MSG_NOTICE([miel                 : $ENABLE_MIEL$INFO_MIEL])
AC_MSG_NOTICE([occurrence           : $ENABLE_OCCURRENCE$INFO_OCCURRENCE])
AC_MSG_NOTICE([pdg                  : $ENABLE_PDG$INFO_PDG])
AC_MSG_NOTICE([postdominators       : $ENABLE_POSTDOMINATORS$INFO_POSTDOMINATORS])
AC_MSG_NOTICE([scope                : $ENABLE_SCOPE$INFO_SCOPE])
AC_MSG_NOTICE([security             : $ENABLE_SECURITY$INFO_SECURITY])
AC_MSG_NOTICE([semantic callgraph   : $ENABLE_SEMANTIC_CALLGRAPH$INFO_SEMANTIC_CALLGRAPH])
AC_MSG_NOTICE([slicing              : $ENABLE_SLICING$INFO_SLICING])
AC_MSG_NOTICE([spare code           : $ENABLE_SPARECODE$INFO_SPARECODE])
AC_MSG_NOTICE([users                : $ENABLE_USERS$INFO_USERS])
AC_MSG_NOTICE([value                : $ENABLE_VALUE$INFO_VALUE])
AC_MSG_NOTICE([wp                   : $ENABLE_WP$INFO_WP])
