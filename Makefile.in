##########################################################################
#                                                                        #
#  This file is part of Frama-C.                                         #
#                                                                        #
#  Copyright (C) 2007-2008                                               #
#    CEA   (Commissariat à l'Énergie Atomique)                           #
#    INRIA (Institut National de Recherche en Informatique et en         #
#           Automatique)                                                 #
#                                                                        #
#  you can redistribute it and/or modify it under the terms of the GNU   #
#  Lesser General Public License as published by the Free Software       #
#  Foundation, version 2.1.                                              #
#                                                                        #
#  It is distributed in the hope that it will be useful,                 #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#  GNU Lesser General Public License for more details.                   #
#                                                                        #
#  See the GNU Lesser General Public License version v2.1                #
#  for more details (enclosed in the file licenses/LGPLv2.1).            #
#                                                                        #
##########################################################################

###################################
# Global variables from configure #
###################################

VERBOSEMAKE?=@VERBOSEMAKE@
ifeq ($(VERBOSEMAKE),yes)
 QUIET =
else
 QUIET = @echo $(1) &&
endif

# Be on the safe side with \r and cygwin
export CYGWIN=nobinmode

prefix	= @prefix@
datarootdir= @datarootdir@
datadir = @datadir@/frama-c
plugindir =$(datadir)/plugins
libdir = $(datadir)/lib
exec_prefix= @exec_prefix@
BINDIR	= @bindir@
DESTDIR =

# where to install the man page
MANDIR	=@mandir@

# other variables set by ./configure
OCAMLC  = @OCAMLC@
OCAMLOPT= @OCAMLOPT@
OCAMLDEP= @OCAMLDEP@ -slash
OCAMLLEX= @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLMKTOP= @OCAMLMKTOP@
OCAMLLIB= @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLDOC= @OCAMLDOC@
OCAMLVERSION = @OCAMLVERSION@
LOWER_THAN_311= @LOWER_THAN_311@
CAMLP4O = @CAMLP4O@
#CAMLP4OOF= @CAMLP4OOF@
OCAMLWIN32= @OCAMLWIN32@
LOCAL_MACHDEP=@LOCAL_MACHDEP@
EXE	= @EXE@
OCAMLGRAPH = @OCAMLGRAPH@
OCAMLGRAPH_LOCAL = @OCAMLGRAPH_LOCAL@
HAS_LABLGTK= @HAS_LABLGTK@
HAS_LABLGLADECC= @HAS_LABLGLADECC@
LABLGLADECC= @LABLGLADECC@ -hide-default
HAS_GTKSOURCEVIEW=@HAS_GTKSOURCEVIEW@
HAS_GNOMECANVAS=@HAS_GNOMECANVAS@
HAS_LEGACY_GTKSOURCEVIEW=@HAS_LEGACY_GTKSOURCEVIEW@
HAS_LABLGTK_CUSTOM_MODEL=@HAS_LABLGTK_CUSTOM_MODEL@
OTAGS	= @OTAGS@
DOT	= @DOT@

##################
# Shell commands #
##################

ECHO	= echo
MKDIR   = mkdir -p
CP      = cp -f
RM	= rm -f
CAT	= cat
SED	= sed
CHMOD_RO= chmod a-w
TAR	= tar

#################
# Command Names #
#################

N_OCAMLC   =Ocamlc      #
N_OCAMLOPT =Ocamlopt    #
N_OCAMLLEX =Ocamllex    #
N_OCAMLYACC=Ocamlyacc   #
N_CAMLP4   =Camlp4      #
N_DEP	   =Ocamldep    #
N_DOC	   =Ocamldoc    #
N_PACKING  =Packing     #
N_LINKING  =Linking     #
N_MKTOP    =Ocamlmktop  #

N_GCC	   =Gcc         #
N_MAKING   =Generating  #
N_CP       =Copying     #
N_RM       =Cleaning    #
N_EXEC	   =Running     #
N_UNTAR    =Unarchiving #

N_DOT	   =Dot         #
N_LATEX	   =Latex       #
N_DVIPS	   =Dvips       #

###########################
# Global plugin variables #
###########################

ENABLE_MIEL= @ENABLE_MIEL@
ENABLE_CXX=@ENABLE_CXX@
ENABLE_SLICING=@ENABLE_SLICING@

# the directory where compiled plugin files are stored
PLUGIN_LIB_DIR=lib/plugins

# Shared lists between Makefile.plugin and Makefile.in :
# initialized them as "simply extended variables" (with :=)
# for a correct behavior of += (see section 6.6 of GNU Make manual)
PLUGIN_LIST	:=
PLUGIN_DYN_EXISTS:="no"
PLUGIN_DYN_LIST :=
PLUGIN_CMO_LIST	:=
PLUGIN_CMX_LIST	:=
PLUGIN_DYN_CMO_LIST :=
PLUGIN_DYN_CMX_LIST :=
PLUGIN_INTERNAL_CMO_LIST:=
PLUGIN_INTERNAL_CMX_LIST:=
PLUGIN_DEP_GUI_CMO_LIST:=
PLUGIN_DEP_GUI_CMX_LIST:=
PLUGIN_GUI_CMO_LIST:=
PLUGIN_GUI_CMX_LIST:=
PLUGIN_DYN_DEP_GUI_CMO_LIST:=
PLUGIN_DYN_DEP_GUI_CMX_LIST:=
PLUGIN_DYN_GUI_CMO_LIST :=
PLUGIN_DYN_GUI_CMX_LIST :=
PLUGIN_TYPES_CMO_LIST :=
PLUGIN_TYPES_CMX_LIST :=
PLUGIN_GENERATED_LIST :=
PLUGIN_DEP_LIST:=
PLUGIN_DOC_LIST :=
PLUGIN_DISTRIBUTED_LIST:=
PLUGIN_DIST_TARGET_LIST:=
PLUGIN_DIST_DOC_LIST:=
PLUGIN_BIN_DOC_LIST:=
PLUGIN_DIST_EXTERNAL_LIST:=
PLUGIN_TESTS_LIST:=

# put here any config option for the binary distribution outside of
# plugins
CONFIG_DISTRIB_BIN:=

###############################
# Additional global variables #
###############################

# additional compilation targets for 'make all'.
# cannot be delayed after 'make all'
EXTRAS	= ptests
ifeq ("$(ENABLE_CXX)","yes")
EXTRAS	+= bin/cxx_translate
endif

# Directories containing some source code
SRC_DIRS= ptests $(PLUGIN_LIB_DIR)

# Directory containing source code documentation
DOC_DIR	= doc/code

# Source files to document
MODULES_TODOC=

# Frama-C directories containing files which are not part of any plugin
UNPACKED_DIRS= misc ai memory_state toplevel slicing_types pdg_types \
	       kernel logic cxx_types gui
ifneq ($(ENABLE_MIEL),no)
UNPACKED_DIRS+= miel
endif
UNPACKED_DIRS:= $(addprefix src/, $(UNPACKED_DIRS))

UNPACKED_DIRS+= external


# Directories containing some source code
SRC_DIRS+= $(UNPACKED_DIRS)

# Directories to include when compiling
INCLUDES=$(addprefix -I , $(UNPACKED_DIRS)) -I $(PLUGIN_LIB_DIR) -I lib

# Directories to include for ocamldep
INCLUDES_FOR_OCAMLDEP= $(patsubst +%,.,$(INCLUDES) $(GUI_INCLUDES))

# Ocamldep flags
DEP_FLAGS= $(INCLUDES_FOR_OCAMLDEP)

# Files for which dependencies are computed
FILES_FOR_OCAMLDEP+=$(PLUGIN_LIB_DIR)/*.mli \
		$(addsuffix /*.mli, $(UNPACKED_DIRS)) \
		$(addsuffix /*.ml, $(UNPACKED_DIRS))

#OPTIM="-unsafe -noassert"

# Flags to use by ocamlc and ocamlopt
FLAGS	= -w Ael -warn-error A -dtypes $(OPTIM) $(INCLUDES)
BFLAGS	= $(FLAGS) -g $(COVERAGE_COMPILER_BYTE)
OFLAGS	= $(FLAGS) $(COVERAGE_COMPILER_OPT)

# Libraries generated by Frama-C
GEN_BYTE_LIBS=
GEN_OPT_LIBS=

# Libraries used in Frama-C
BYTE_LIBS = nums.cma unix.cma bigarray.cma str.cma dynlink.cma \
	$(GRAPH_BYTE) $(GEN_BYTE_LIBS)
OPT_LIBS = nums.cmxa unix.cmxa bigarray.cmxa str.cmxa

ifeq ("$(LOWER_THAN_311)","no")
OPT_LIBS+= dynlink.cmxa
endif

OPT_LIBS+= $(GRAPH_OPT) $(GEN_OPT_LIBS)

# files to be included in the distribution.
# plugins may add some files to this list if they include files that are
# not in $PLUGIN_DIR
DISTRIB_FILES:=cil/*/*.ml* cil/src/*/*.ml* cil/*/*.in cil/LICENSE	\
      cil/CHANGES cil/doc/*.html cil/doc/*.tex cil/doc/*.gif		\
      cil/doc/*.pdf cil/doc/api/*.html cil/doc/examples/*.txt		\
      doc/manuals/*.pdf doc/README doc/code/*.ml*  			\
      doc/code/*.css doc/code/*.txt tests/*/*.c				\
      tests/*/*.h tests/*/*.ml ptests/*.ml*				\
      configure.in Makefile.in Makefile.plugin configure Changelog	\
      config.h.in VERSION						\
      $(filter-out CVS,licenses/*)					\
      share/*.c share/*.h share/Makefile.template			\
      share/jessie/*.c share/jessie/*.h share/why/*.why                 \
      $(filter-out %kui%,src/kernel/*.ml*)                              \
      external/ptmap.ml*                                                \
      src/ai/*.ml* src/buckx/*.ml* src/buckx/*.c                        \
      src/gui/*.ml* src/lib/*.ml* src/logic/*.ml*			\
      src/memory_state/*.ml* src/misc/*.ml* src/project/*.ml*		\
      src/toplevel/*.ml* bin/sed_get_make_major bin/sed_get_make_minor	\
      INSTALL .make-clean-stamp .make-ocamlgraph-stamp

################
# Main targets #
################

ifeq (@JESSIE_LOCAL@,yes)
all: why byte $(EXTRAS)
	$(MAKE) $(OCAMLBEST) $(EXTRAS_AFTER_BYTE)
else
all: byte $(EXTRAS)
	$(MAKE) $(OCAMLBEST) $(EXTRAS_AFTER_BYTE)
endif

clean::
	$(call QUIET,'$(N_REMOVING) $(OBJ_PERFCOUNT)') \
	$(RM) $(OBJ_PERFCOUNT)

.PHONY: top opt byte dist bdist archclean rebuild cxx
top: bin/toplevel.top$(EXE)
byte: bin/toplevel.byte$(EXE)
opt: bin/toplevel.opt$(EXE)

dist: clean
	OPTIM="-unsafe -noassert" $(MAKE) all
bdist: clean
	OPTIM="-unsafe -noassert" $(MAKE) byte

ifneq ("$(OCAMLGRAPH_LOCAL)","")
archclean: clean
	$(MAKE) -C $(OCAMLGRAPH_LOCAL) distclean
	cd $(OCAMLGRAPH_LOCAL) ; ./configure

rebuild: archclean
	$(MAKE) -C $(OCAMLGRAPH_LOCAL) && $(MAKE) all
else
archclean: clean

rebuild: archclean
	$(MAKE) all
endif


############
# Coverage #
############

USE_COVERAGE_TOOL=no
ifeq ($(USE_COVERAGE_TOOL),yes)
COVERAGE_PATH=.
COVERAGE_PREPRO=camlp4o -no_quot -filter $(COVERAGE_PATH)/coverage_filter.cmo
COVERAGE_COMPILER_BYTE=-I $(COVERAGE_PATH) -pp "$(COVERAGE_PREPRO)"
COVERAGE_COMPILER_OPT=-I $(COVERAGE_PATH) -pp "$(COVERAGE_PREPRO)"
COVERAGE_LIB_BYTE=coverage.cma
COVERAGE_LIB_OPT=coverage.cmxa
endif

INCLUDES+=$(COVERAGE_COMPILER_BYTE)
GEN_BYTE_LIBS+=$(COVERAGE_LIB_BYTE)
GEN_OPT_LIBS+=$(COVERAGE_LIB_OPT)
SRC_DIRS+=$(COVERAGE_PATH)

##############
# Ocamlgraph #
##############

ifneq ("$(OCAMLGRAPH_LOCAL)","")
lib/graph%: $(OCAMLGRAPH_LOCAL)/graph%
	$(call QUIET,'$(N_CP) $@') \
	$(CP) $< $@

$(OCAMLGRAPH_LOCAL)/graph.cmo: $(OCAMLGRAPH_LOCAL)/Makefile \
			       	$(OCAMLGRAPH_LOCAL)/src/*.ml*
	$(MAKE) -C $(OCAMLGRAPH_LOCAL) $(notdir $@)

$(OCAMLGRAPH_LOCAL)/%.cmi: $(OCAMLGRAPH_LOCAL)/%.cmo
	touch $@

$(OCAMLGRAPH_LOCAL)/graph.cmx: $(OCAMLGRAPH_LOCAL)/graph.cmi \
			       	$(OCAMLGRAPH_LOCAL)/src/*.ml*
	$(MAKE) -C $(OCAMLGRAPH_LOCAL) $(notdir $@)

$(OCAMLGRAPH_LOCAL)/%.o: $(OCAMLGRAPH_LOCAL)/%.cmx
	touch $@

$(OCAMLGRAPH_LOCAL)/Makefile: $(OCAMLGRAPH_LOCAL)/configure \
			      	$(OCAMLGRAPH_LOCAL)/Makefile.in
	cd $(OCAMLGRAPH_LOCAL); ./configure

$(OCAMLGRAPH_LOCAL)/configure: $(OCAMLGRAPH_LOCAL)/configure.in
	cd $(OCAMLGRAPH_LOCAL); autoconf

# Correct over-approximation: all frama-c source files depend on ocamlgraph
# Required because ocamldep doesn't see any dependency to packed module
src/*/*.cmi: lib/graph.cmi
src/*/*.cmo src/*/*.cma: lib/graph.cmo
src/*/*.cmxa src/*/*.cmx: lib/graph.cmx

GENERATED+= lib/graph.cmo lib/graph.cmx lib/graph.o lib/graph.cmi

GRAPH_BYTE=
GRAPH_OPT=
GRAPH_BYTE_LIBS=lib/graph.cmo
GRAPH_OPT_LIBS=lib/graph.cmx
GEN_BYTE_LIBS+=$(GRAPH_BYTE_LIBS)
GEN_OPT_LIBS+=$(GRAPH_OPT_LIBS)

# viewgraph (included in ocamlgraph)
ifeq ($(HAS_GNOMECANVAS),yes)
ifeq (@ENABLE_SYNTACTIC_CALLGRAPH@,yes)

$(OCAMLGRAPH_LOCAL)/view_graph/%.cmo: $(OCAMLGRAPH_LOCAL)/graph.cmi \
				$(OCAMLGRAPH_LOCAL)/view_graph/%.ml
	$(MAKE) -C $(OCAMLGRAPH_LOCAL) $(patsubst $(OCAMLGRAPH_LOCAL)/%,%,$@)

$(OCAMLGRAPH_LOCAL)/view_graph/%.cmx: $(OCAMLGRAPH_LOCAL)/graph.cmx \
					$(OCAMLGRAPH_LOCAL)/view_graph/%.ml
	$(MAKE) -C $(OCAMLGRAPH_LOCAL) $(patsubst $(OCAMLGRAPH_LOCAL)/%,%,$@)

lib/viewGraph%: $(OCAMLGRAPH_LOCAL)/view_graph/viewGraph%
	$(call QUIET,'$(N_CP) $@') \
	$(CP) $< $@

GRAPH_GUICMO= lib/viewGraph.cmo lib/viewGraph_select.cmo
GRAPH_GUICMX= $(GRAPH_GUICMO:.cmo=.cmx)

GENERATED+= lib/viewGraph.cmo lib/viewGraph.cmx lib/viewGraph.o \
	lib/viewGraph.cmi lib/viewGraph_select.cmo lib/viewGraph_select.cmx \
	lib/viewGraph_select.o lib/viewGraph_select.cmi

INCLUDES_FOR_OCAMLDEP+=-I $(OCAMLGRAPH_LOCAL)/view_graph
HAS_VIEWGRAPH=yes

endif
endif # viewgraph available

# If 'make untar-ocamlgraph' have to be performed after 'cvs update':
# change '.make-ocamlgraph-stamp' before 'cvs commit'
.make-ocamlgraph: .make-ocamlgraph-stamp
	touch $@
	$(MAKE) untar-ocamlgraph

include .make-ocamlgraph

# force "make untar-ocamlgraph" to be executed for all users of CVS
force-ocamlgraph:
	expr `$(CAT) .make-ocamlgraph-stamp` + 1 > .make-ocamlgraph-stamp

.PHONY: untar-ocamlgraph
untar-ocamlgraph: ocamlgraph.tar.gz
	$(call QUIET,'$(N_UNTAR) $@') \
	($(RM) -r $(OCAMLGRAPH_LOCAL); \
	$(TAR) xzf $<)

else # does not use ocamlgraph local version

INCLUDES+=$(OCAMLGRAPH)
GRAPH_BYTE=graph.cmo
GRAPH_OPT=graph.cmx

# viewgraph (included in ocamlgraph)
ifeq ($(HAS_GNOMECANVAS),yes)
ifeq (@ENABLE_SYNTACTIC_CALLGRAPH@,yes)
GRAPH_GUICMO= viewGraph.cmo viewGraph_select.cmo
GRAPH_GUICMX= $(GRAPH_GUICMO:.cmo=.cmx)
HAS_VIEWGRAPH=yes
endif
endif

endif # whether ocamlgraph is local

####################################
# Internal miscellaneous libraries #
####################################

LIB_PATH= src/lib
LIB_CMO = myDynlink extlib pretty_utils hook mergemap rangemap \
	binary_cache ptset type funTbl journal
LIB_CMO:= $(patsubst %, $(LIB_PATH)/%.cmo, $(LIB_CMO))
LIB_CMX = $(LIB_CMO:.cmo=.cmx)
LIB_CMI = $(LIB_CMO:.cmo=.cmi)

$(LIB_CMI) $(LIB_CMO) $(LIB_CMX): INCLUDES=-I $(LIB_PATH) -I src/project \
				-I external

MODULES_TODOC+=	$(LIB_PATH)/myDynlink.mli $(LIB_PATH)/extlib.mli \
	$(LIB_PATH)/pretty_utils.mli $(LIB_PATH)/hook.mli \
	$(LIB_PATH)/mergemap.mli $(LIB_PATH)/rangemap.mli \
	$(LIB_PATH)/binary_cache.mli $(LIB_PATH)/ptset.mli \
	$(LIB_PATH)/type.mli $(LIB_PATH)/funTbl.mli $(LIB_PATH)/journal.mli \

INCLUDES+=-I $(LIB_PATH)
# binary_cache and ptset depends of project.
# So delay its addition to GEN_*_LIBS
GEN_BYTE_LIBS+=$(filter-out $(LIB_PATH)/binary_cache.cmo $(LIB_PATH)/ptset.cmo, $(LIB_CMO))
GEN_OPT_LIBS+=$(filter-out $(LIB_PATH)/binary_cache.cmx $(LIB_PATH)/ptset.cmx, $(LIB_CMX))
FILES_FOR_OCAMLDEP+=$(addsuffix /*.mli, $(LIB_PATH)) \
		$(addsuffix /*.ml, $(LIB_PATH))
SRC_DIRS+=$(LIB_PATH)

# Dynlink library
#################

GENERATED += src/lib/myDynlink.ml
src/lib/myDynlink.ml: Makefile

ifeq ("$(LOWER_THAN_311)","yes")

# Just for ocamldep
src/lib/myDynlink.ml: src/lib/dynlink_lower_311_byte.ml
	$(call QUIET,'$(N_CP) $@') \
	($(CP) $< $@; \
	$(CHMOD_RO) $@)

src/lib/myDynlink.cmo: src/lib/dynlink_lower_311_byte.ml
	$(call QUIET,'$(N_CP) src/lib/myDynlink.ml') \
	($(CP) $< src/lib/myDynlink.ml; \
	$(CHMOD_RO) src/lib/myDynlink.ml)
	$(call QUIET,'$(N_OCAMLC) $@') \
	$(OCAMLC) -c $(BFLAGS) src/lib/myDynlink.ml

src/lib/myDynlink.o src/lib/myDynlink.cmx: src/lib/dynlink_lower_311_opt.ml
	$(call QUIET,'$(N_CP) src/lib/myDynlink.ml') \
	($(CP) $< src/lib/myDynlink.ml; \
	$(CHMOD_RO) src/lib/myDynlink.ml)
	$(call QUIET,'$(N_OCAMLOPT) $@') \
	$(OCAMLOPT) -c $(OFLAGS) src/lib/myDynlink.ml

else # ocaml >= 3.11

src/lib/myDynlink.ml: src/lib/dynlink_311_or_higher.ml
	$(call QUIET,'$(N_CP) $@') \
	($(CP) $< $@; \
	$(CHMOD_RO) $@)

endif

###########
# Project #
###########

PROJECT_PATH=src/project
PROJECT_CMO= qstack namespace kind project datatype computation
PROJECT_CMO:= $(patsubst %, $(PROJECT_PATH)/%.cmo, $(PROJECT_CMO))
PROJECT_CMX= $(PROJECT_CMO:.cmo=.cmx)
PROJECT_CMI= signature.cmi $(PROJECT_CMO:.cmo=.cmi)

PROJECT_CMA=$(PROJECT_PATH)/project.cma
PROJECT_CMXA=$(PROJECT_CMA:.cma=.cmxa)

$(PROJECT_CMA): $(PROJECT_CMO)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) -a -o $@ $(PROJECT_CMO)

$(PROJECT_CMXA): $(PROJECT_CMX)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) -a -o $@ $(PROJECT_CMX)

MODULES_TODOC+=	$(PROJECT_PATH)/kind.mli $(PROJECT_PATH)/project.mli \
	$(PROJECT_PATH)/signature.mli $(PROJECT_PATH)/namespace.mli \
	$(PROJECT_PATH)/datatype.mli $(PROJECT_PATH)/computation.mli

$(PROJECT_CMI) $(PROJECT_CMO) $(PROJECT_CMX): INCLUDES=-I $(PROJECT_PATH) \
	-I $(LIB_PATH) $(OCAMLGRAPH)

INCLUDES+=-I $(PROJECT_PATH)
GEN_BYTE_LIBS+=$(PROJECT_CMA) $(LIB_PATH)/binary_cache.cmo
GEN_OPT_LIBS+=$(PROJECT_CMXA) $(LIB_PATH)/binary_cache.cmx
FILES_FOR_OCAMLDEP+=$(addsuffix /*.mli, $(PROJECT_PATH)) \
		$(addsuffix /*.ml, $(PROJECT_PATH))
SRC_DIRS+=$(PROJECT_PATH)

# Testing save/load
###################

PLUGIN_TESTS_LIST += saveload

tests/saveload/%.cmx: tests/saveload/%.ml $(GEN_OPT_LIBS)
	$(OCAMLOPT) -c $(OFLAGS) -I tests/saveload $(OPT_LIBS) $<

tests/saveload/%.opt: tests/saveload/%.cmx bin/toplevel.opt$(EXE)
	$(OCAMLOPT) $(OFLAGS) -o $@ -I tests/saveload \
		$(OPT_LIBS) $< $(ALL_CMX) $(STARTUPCMX)

tests/saveload/%.cmo: tests/saveload/%.ml $(GEN_BYTE_LIBS)
	$(OCAMLC) -c $(BFLAGS) -I tests/saveload $(BYTE_LIBS) $<

tests/saveload/%.byte: tests/saveload/%.cmo bin/toplevel.byte$(EXE)
	$(OCAMLC) $(BFLAGS) -o $@ -I tests/saveload  \
		$(BYTE_LIBS) $< $(ALL_CMO) $(STARTUPCMO)

# Testing dynamic loading
##########################

PLUGIN_TESTS_LIST += dynamic

DYNAMIC_TESTS_TARGETS:=tests/dynamic/empty.cmo tests/dynamic/empty_gui.cmo \
	tests/dynamic/.cmo tests/dynamic/empty.cmofoo \
	tests/dynamic/Register_mod1.cmo tests/dynamic/Register_mod2.cmo \
	tests/dynamic/Apply.cmo

tests/dynamic/%.cmo: tests/dynamic/%.ml $(GEN_BYTE_LIBS)
	$(OCAMLC) -c $(BFLAGS) -I tests/dynamic $<

tests/dynamic_plugin/%.cmo: tests/dynamic_plugin/%.ml $(GEN_BYTE_LIBS)
	$(OCAMLC) -c $(BFLAGS) -I tests/dynamic_plugin $<

tests/dynamic/.cmi tests/dynamic/empty.cmifoo:tests/dynamic/empty.cmi
	$(CP) $< $@

tests/dynamic/.cmo tests/dynamic/empty.cmofoo:tests/dynamic/empty.cmo \
	tests/dynamic/.cmi tests/dynamic/empty.cmifoo
	$(CP) $< $@

tests/dynamic/Register_mod1.cmo:tests/dynamic_plugin/register_mod1.cmo
	$(OCAMLC) -o $@ -pack $^

tests/dynamic/Register_mod2.cmo:tests/dynamic_plugin/register_mod2.cmo
	$(OCAMLC) -o $@ -pack $^

tests/dynamic/Apply.cmo:tests/dynamic_plugin/apply.cmo
	$(OCAMLC) -o $@ -pack $^

.PHONY:tests/dynamic/all
tests/dynamic/all:
	$(RM) tests/dynamic/.cm* tests/dynamic/*.cm* tests/dynamic_plugin/*.cm*
	$(MAKE) $(DYNAMIC_TESTS_TARGETS)

#########
# Buckx #
#########

BUCKX_PATH=src/buckx
BUCKX_CMO= buckx
BUCKX_CMO:= $(patsubst %, $(BUCKX_PATH)/%.cmo, $(BUCKX_CMO))
BUCKX_CMX= $(BUCKX_CMO:.cmo=.cmx)
BUCKX_CMI= $(BUCKX_CMO:.cmo=.cmi)

MODULES_TODOC+=	$(BUCKX_PATH)/buckx.mli

$(BUCKX_CMI) $(BUCKX_CMO) $(BUCKX_CMX): INCLUDES=-I $(BUCKX_PATH) \
						-I $(PROJECT_PATH)

INCLUDES+=-I $(BUCKX_PATH)
GEN_BUCKX=src/buckx/mybigarray.o src/buckx/buckx_c.o
GEN_BYTE_LIBS+=$(GEN_BUCKX) $(BUCKX_CMO)
GEN_OPT_LIBS+=$(GEN_BUCKX) $(BUCKX_CMX)
FILES_FOR_OCAMLDEP+=$(addsuffix /*.mli, $(BUCKX_PATH)) \
		$(addsuffix /*.ml, $(BUCKX_PATH))
SRC_DIRS+=$(BUCKX_PATH)

src/buckx/buckx_c.o: src/buckx/buckx_c.c
	$(call QUIET,'$(N_OCAMLC) $@') \
	$(OCAMLC) $(BFLAGS) -ccopt "-O3 -fno-pic -fomit-frame-pointer -o $@" $<


#######
# Cil #
#######

CIL_PATH= cil/src

ifeq ("$(LOCAL_MACHDEP)","yes")

# Create the machine dependency module
# If the cl command cannot be run then the MSVC part will be identical to GCC
.PHONY : machdep $(CIL_PATH)/local_machdep.ml
machdep: $(CIL_PATH)/local_machdep.ml
bin/machdep.exe: machdep

$(CIL_PATH)/local_machdep.ml : cil/src/machdep.c configure.in Makefile.in
	$(call QUIET,'$(N_MAKING) $@') \
	($(RM) $@; \
	$(ECHO) "(* This module was generated automatically by code in Makefile and machdep.c *)" >$@; \
# Now generate the type definition
	$(ECHO) "open Cil_types" >> $@; \
	if gcc -D_GNUCC $< -o bin/machdep.exe ;then \
	    $(ECHO) "machdep.exe created succesfully." \
	;else \
            $(RM) $@; exit 1 \
        ;fi; \
	$(ECHO) "let gcc = {" >>$@; \
	bin/machdep.exe >>$@; \
	$(ECHO) "	 underscore_name = @UNDERSCORE_NAME@ ;" >> $@;\
	$(ECHO) "}"          >>$@; \
	if cl /D_MSVC $< /Febin/machdep.exe /Fobin/machdep.obj ;then \
           $(ECHO) "let hasMSVC = true" >>$@ \
        ;else \
           $(ECHO) "let hasMSVC = false" >>$@ ;fi; \
	$(ECHO) "let msvc = {" >>$@; \
	bin/machdep.exe >>$@; \
	$(ECHO) "	 underscore_name = true ;" >> $@; \
	$(ECHO) "}"          >>$@; \
	$(ECHO) "let gccHas__builtin_va_list = @HAVE_BUILTIN_VA_LIST@" >>$@; \
	$(ECHO) "let __thread_is_keyword = @THREAD_IS_KEYWORD@"  >>$@; \
	$(ECHO) "$@ generated. You may have this file merged into Frama-C by developers."; \
	$(CHMOD_RO) $@)

endif

# Create the cil version information module
.PHONY: cilversion
cilversion: $(CIL_PATH)/cilversion.ml
GENERATED += $(CIL_PATH)/cilversion.ml
$(CIL_PATH)/cilversion.ml: Makefile.in
	$(call QUIET,'$(N_MAKING) $@') \
	($(RM) $@; \
	$(ECHO) "(* This module was generated automatically by code in Makefile *)" >$@; \
	$(ECHO) "let cilVersionMajor = 1" >>$@; \
	$(ECHO) "let cilVersionMinor = 3" >>$@; \
	$(ECHO) "let cilVersionRev   = 6"   >>$@; \
	$(ECHO) "let cilVersion      = \"1.3.6\""  >>$@; \
	$(CHMOD_RO) $@)

# Performance counters
PERFCOUNT=cil/ocamlutil/perfcount
USE_PERFCOUNT=no
ifeq ($(USE_PERFCOUNT),yes)
OBJ_PERFCOUNT=$(PERFCOUNT).o
STATS=cil/ocamlutil/stats.cmo
else
OBJ_PERFCOUNT=
STATS=
endif

# .cmo files of cil
CIL_CMO = cil/ocamlutil/pretty.cmo \
	cil/ocamlutil/errormsg.cmo \
	cil/ocamlutil/alpha.cmo cil/ocamlutil/clist.cmo \
	cil/ocamlutil/growArray.cmo \
	cil/ocamlutil/inthash.cmo $(STATS) \
	cil/ocamlutil/trace.cmo cil/ocamlutil/cilutil.cmo \
	cil/ocamlutil/setWithNearest.cmo \
	$(addprefix $(CIL_PATH)/, \
		cil_datatype.cmo cil_computation.cmo \
		logic/utf8_logic.cmo \
		messages_manager.cmo \
		cilglobopt.cmo \
		cilversion.cmo \
		machdep_x86_16.cmo machdep_x86_32.cmo machdep_x86_64.cmo \
		machdep_ppc_32.cmo machdep_ppc_32_diab.cmo \
		machdep.cmo logic/logic_env.cmo \
		escape.cmo cil.cmo frontc/cabs.cmo \
		frontc/cabshelper.cmo frontc/whitetrack.cmo \
		logic/logic_const.cmo \
                logic/logic_parser.cmo logic/logic_lexer.cmo \
		frontc/lexerhack.cmo \
		mergecil.cmo rmtmps.cmo testcil.cmo \
		logic/logic_typing.cmo \
		frontc/cprint.cmo \
		frontc/cabsvisit.cmo frontc/cabs2cil.cmo \
		frontc/clexer.cmo frontc/cparser.cmo \
		logic/logic_preprocess.cmo \
		frontc/patch.cmo frontc/frontc.cmo \
		ext/obfuscate.cmo ext/ciltools.cmo \
		ext/callgraph.cmo ext/dataflow.cmo ext/dominators.cmo \
		ext/oneret.cmo ext/cfg.cmo ext/expcompare.cmo \
		ext/usedef.cmo ext/liveness.cmo ext/reachingdefs.cmo \
		ext/availexpslv.cmo ext/rmciltmps.cmo ext/deadcodeelim.cmo \
		zrapp.cmo) # end of addprefix
CIL_CMX = $(CIL_CMO:.cmo=.cmx)
CIL_CMI = cil/src/cil_types.cmi cil/src/logic/logic_ptree.cmi \
	$(CIL_CMO:.cmo=.cmi)

GENERATED += $(addprefix $(CIL_PATH)/, \
		frontc/clexer.ml frontc/cparser.ml frontc/cparser.mli \
		logic/logic_lexer.ml logic/logic_parser.ml \
		logic/logic_parser.mli logic/logic_preprocess.ml  \
		)

MODULES_TODOC += cil/ocamlutil/pretty.mli \
	cil/ocamlutil/errormsg.mli \
	cil/ocamlutil/alpha.mli cil/ocamlutil/clist.mli \
	cil/ocamlutil/growArray.mli \
	cil/ocamlutil/inthash.mli cil/ocamlutil/stats.mli \
	cil/ocamlutil/trace.mli cil/ocamlutil/cilutil.mli \
	cil/ocamlutil/setWithNearest.mli \
	$(addprefix $(CIL_PATH)/, \
		messages_manager.mli \
		cilglobopt.ml \
		cilversion.ml machdep.mli \
		cil_types.mli \
		escape.mli cil.mli frontc/cabs.ml \
		frontc/cabshelper.mli frontc/whitetrack.mli \
		logic/logic_parser.mli \
		frontc/lexerhack.ml \
		mergecil.mli rmtmps.mli \
		logic/logic_const.ml logic/logic_typing.mli \
		frontc/cprint.mli frontc/cabsvisit.mli frontc/cabs2cil.mli \
		frontc/cparser.mli logic/logic_preprocess.mli \
		frontc/patch.mli frontc/frontc.mli \
		logic/logic_ptree.mli \
		ext/obfuscate.mli \
		ext/callgraph.mli ext/dataflow.mli ext/dominators.mli \
		ext/oneret.mli) # end of addprefix

CIL_CMA	=$(CIL_PATH)/cil.cma
CIL_CMXA=$(CIL_PATH)/cil.cmxa

$(CIL_CMA): $(CIL_CMO) $(OBJ_PERFCOUNT)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) -a -custom -o $@ $(CIL_CMO) $(OBJ_PERFCOUNT)
$(CIL_CMXA): $(CIL_CMX) $(OBJ_PERFCOUNT)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) -a -o $@ $(CIL_CMX) $(OBJ_PERFCOUNT)

CIL_DIRS= $(CIL_PATH) $(CIL_PATH)/ext $(CIL_PATH)/frontc $(CIL_PATH)/logic \
	cil/ocamlutil

SRC_DIRS+=$(CIL_DIRS)

$(CIL_CMI) $(CIL_CMO) $(CIL_CMX):INCLUDES=$(addprefix -I , $(CIL_DIRS) \
	$(LIB_PATH) $(PROJECT_PATH)) $(OCAMLGRAPH)

INCLUDES+=$(addprefix -I , $(CIL_DIRS))
GEN_BYTE_LIBS+=$(CIL_CMA)
GEN_OPT_LIBS+=$(CIL_CMXA)
FILES_FOR_OCAMLDEP+=$(addsuffix /*.mli, $(CIL_DIRS)) \
	$(addsuffix /*.ml, $(CIL_DIRS))

.PHONY : cil.byte cil.opt
cil.byte: $(CIL_PATH)/cil.cma
cil.opt: $(CIL_PATH)/cil.cmxa

##############
# Pre-Kernel #
##############

# modules to be linked before ptmap
PRECMO =	src/kernel/version.cmo src/kernel/ast_printer.cmo \
	src/kernel/ast_info.cmo \
	src/kernel/kernel_type.cmo src/kernel/alarms.cmo src/kernel/cilE.cmo \
	src/kernel/cil_state.cmo

PRECMX = $(PRECMO:.cmo=.cmx)

PRECMI = $(PRECMO:.cmo=.cmi)

$(PRECMI) $(PRECMO) $(PRECMX): INCLUDES= $(addprefix -I , $(CIL_DIRS)) \
	-I $(LIB_PATH) -I $(BUCKX_PATH) -I $(PROJECT_PATH)  -I src/kernel

GEN_BYTE_LIBS+=$(PRECMO)
GEN_OPT_LIBS+=$(PRECMX)


#################################
# External libraries to compile #
#################################

EXTERNAL_PATH= external
EXTERNAL_CMO = ptmap #size
EXTERNAL_CMO:= $(patsubst %, $(EXTERNAL_PATH)/%.cmo, $(EXTERNAL_CMO))
EXTERNAL_CMX:= $(EXTERNAL_CMO:.cmo=.cmx)
EXTERNAL_CMI:= $(EXTERNAL_CMO:.cmo=.cmi)

$(EXTERNAL_CMI) $(EXTERNAL_CMO) $(EXTERNAL_CMX): INCLUDES=-I $(EXTERNAL_PATH) \
			-I $(LIB_PATH) -I $(BUCKX_PATH) -I $(PROJECT_PATH) -I src/kernel

INCLUDES+=-I $(EXTERNAL_PATH)
FILES_FOR_OCAMLDEP+=$(addsuffix /*.mli, $(EXTERNAL_PATH)) \
		$(addsuffix /*.ml, $(EXTERNAL_PATH))
SRC_DIRS+=$(EXTERNAL_PATH)

# Ptset depends on Ptmap
GEN_BYTE_LIBS+= $(EXTERNAL_CMO) $(LIB_PATH)/ptset.cmo
GEN_OPT_LIBS+= $(EXTERNAL_CMX) $(LIB_PATH)/ptset.cmx

#
# Kernel
#

ACMO =	src/ai/my_bigint.cmo \
	src/ai/abstract_interp.cmo \
	src/memory_state/mweak.cmo \
	src/ai/int_Base.cmo \
	src/kernel/cmdline.cmo \
	src/kernel/unicode.cmo \
	src/misc/bit_utils.cmo \
	src/misc/subst.cmo \
	src/kernel/annotations.cmo src/kernel/globals.cmo \
	src/kernel/kernel_function.cmo \
        src/misc/service_graph.cmo \
	src/ai/base.cmo \
	src/ai/base_Set_Lattice.cmo \
	src/ai/origin.cmo \
	src/ai/map_Lattice.cmo \
	src/ai/ival.cmo \
	src/memory_state/abstract_value.cmo \
	src/memory_state/baseUtils.cmo \
	src/memory_state/locations.cmo \
	src/memory_state/inout_type.cmo \
	src/memory_state/shifted_Location.cmo \
	src/memory_state/path_lattice.cmo \
	src/memory_state/int_Interv.cmo \
	src/memory_state/int_Interv_Map.cmo \
	src/memory_state/offsetmap.cmo \
	src/memory_state/offsetmap_bitwise.cmo \
	src/memory_state/lmap.cmo \
	src/memory_state/lmap_bitwise.cmo \
	src/memory_state/lmap_whole.cmo \
	src/memory_state/function_Froms.cmo \
	src/memory_state/cvalue_type.cmo \
	src/memory_state/memzone_type.cmo \
	src/memory_state/widen_type.cmo \
	src/memory_state/relations_type.cmo \
	src/logic/why_output.cmo

ACMX = $(ACMO:.cmo=.cmx)

MODULES_TODOC += src/kernel/version.mli \
	src/kernel/alarms.mli src/kernel/cilE.mli \
	src/kernel/ast_info.mli \
	src/kernel/kernel_type.mli \
	src/kernel/cil_state.mli \
	src/ai/my_bigint.ml \
	src/ai/abstract_interp.mli \
	src/memory_state/mweak.mli \
	src/ai/int_Base.ml \
	src/kernel/cmdline.mli \
	src/misc/bit_utils.mli \
	src/misc/subst.mli \
	src/ai/base.mli \
	src/ai/base_Set_Lattice.ml \
	src/ai/origin.ml \
	src/ai/map_Lattice.ml \
	src/ai/ival.ml \
	src/memory_state/abstract_value.ml \
	src/toplevel/options.mli \
	src/memory_state/baseUtils.ml \
	src/memory_state/locations.mli \
	src/memory_state/inout_type.ml \
	src/memory_state/shifted_Location.mli \
	src/memory_state/path_lattice.mli \
	src/memory_state/int_Interv.ml \
	src/memory_state/int_Interv_Map.ml \
	src/memory_state/offsetmap.mli \
	src/memory_state/offsetmap_bitwise.mli \
	src/memory_state/lmap.mli \
	src/memory_state/lmap_bitwise.mli \
	src/memory_state/lmap_whole.mli \
	src/memory_state/function_Froms.ml \
	src/memory_state/cvalue_type.ml \
	src/memory_state/memzone_type.ml \
	src/memory_state/widen_type.mli \
	src/memory_state/relations_type.mli \
	src/logic/why_output.mli

KERNEL_CMO = src/kernel/stmts_graph.cmo \
	src/kernel/visitor.cmo \
	src/kernel/printer.cmo src/kernel/unroll_loops.cmo \
	src/kernel/loop.cmo \
	src/kernel/db.cmo  \
	src/kernel/dynamic.cmo \
	src/toplevel/options.cmo \
	src/kernel/file.cmo \
	src/misc/debug.cmo \
	src/misc/filter.cmo

KERNEL_CMX =$(KERNEL_CMO:.cmo=.cmx)

MODULES_TODOC += src/kernel/db_types.mli \
	src/kernel/stmts_graph.mli \
	src/kernel/annotations.mli src/kernel/globals.mli \
	src/kernel/visitor.mli src/kernel/printer.mli \
	src/kernel/unroll_loops.ml \
	src/kernel/file.mli src/kernel/kernel_function.mli src/kernel/loop.mli \
	src/kernel/db.mli src/kernel/dynamic.mli \
	src/misc/filter.mli

########################################################
# Alias, dependency analysis, locations interpretation #
########################################################

LOCCMO = src/memory_state/widen.cmo \
	src/memory_state/memzone.cmo \
	src/memory_state/bit_model_access.cmo
LOCCMX = $(LOCCMO:.cmo=.cmx)

MODULES_TODOC += src/memory_state/widen.ml \
	src/memory_state/memzone.ml \
	src/memory_state/bit_model_access.mli

###################
# Journal loader #
###################

PLUGIN_ENABLE:=@ENABLE_JOURNAL_LOADER@
PLUGIN_NAME:=Journal_loader
PLUGIN_DISTRIBUTED:=yes
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_DIR:=src/journal_loader
PLUGIN_CMO:=register
PLUGIN_GUI_CMO:=register_gui
PLUGIN_DYNAMIC:=yes
PLUGIN_TESTS_DIRS:=journal
include Makefile.plugin

# Disabling warnings for journal
tests/journal/result/%.cmo: FLAGS+=-w x

##################
# Occurrence     #
##################

PLUGIN_ENABLE:=@ENABLE_OCCURRENCE@
PLUGIN_NAME:=Occurrence
PLUGIN_DISTRIBUTED:=yes
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_DIR:=src/occurrence
PLUGIN_CMO:= register
PLUGIN_GUI_CMO:=register_gui
include Makefile.plugin

######################
# Occurrence dynamic #
######################
# PLUGIN_ENABLE:=@ENABLE_OCCURRENCE_DYN@
# PLUGIN_DYNAMIC:=yes
# PLUGIN_NAME:=Occurrence_dyn
# PLUGIN_HAS_MLI:=yes
# PLUGIN_NO_TEST:=yes
# PLUGIN_DIR:=src/occurrence_dyn
# PLUGIN_CMO:= register
# PLUGIN_GUI_CMO:=register_gui
# include Makefile.plugin

###########
# Metrics #
###########

PLUGIN_ENABLE:=@ENABLE_METRICS@
PLUGIN_NAME:=Metrics
PLUGIN_DISTRIBUTED:=yes
PLUGIN_HAS_MLI:=yes
#PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_NO_TEST:=yes
PLUGIN_DIR:=src/metrics
PLUGIN_CMO:= register
PLUGIN_NO_TEST:= yes
PLUGIN_GUI_CMO:=register_gui
include Makefile.plugin

#######################
# Syntactic callgraph #
#######################

# Extension of the GUI for syntactic callgraph is compilable
# only if viewgraph is available
ifeq ($(HAS_VIEWGRAPH),yes)
PLUGIN_GUI_CMO:=cg_viewer
endif

PLUGIN_ENABLE:=@ENABLE_SYNTACTIC_CALLGRAPH@
PLUGIN_NAME:=Syntactic_callgraph
PLUGIN_DISTRIBUTED:=yes
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_DIR:=src/syntactic_callgraph
PLUGIN_CMO:= register
PLUGIN_NO_TEST:=yes
include Makefile.plugin

##################
# Value analysis #
##################

PLUGIN_ENABLE:=@ENABLE_VALUE@
PLUGIN_NAME:=Value
PLUGIN_DIR:=src/value
PLUGIN_CMO:= state_set kf_state eval kinstr register
PLUGIN_GUI_CMO:=register_gui
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_NO_TEST:=yes
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

#################
# From analysis #
#################

PLUGIN_ENABLE:=@ENABLE_FROM@
PLUGIN_NAME:=From
PLUGIN_DIR:=src/from
PLUGIN_CMO:= register
PLUGIN_GUI_CMO:=register_gui
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_TESTS_DIRS:=idct test misc float
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

##################
# Users analysis #
##################

PLUGIN_ENABLE:=@ENABLE_USERS@
PLUGIN_NAME:=Users
PLUGIN_DIR:=src/users
PLUGIN_CMO:= users_register
PLUGIN_HAS_MLI:=yes
PLUGIN_NO_TEST:=yes
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

########################
# Constant propagation #
########################

PLUGIN_ENABLE:=@ENABLE_CONSTANT_PROPAGATION@
PLUGIN_NAME:=Constant_Propagation
PLUGIN_DIR:=src/constant_propagation
PLUGIN_CMO:= register
PLUGIN_HAS_MLI:=yes
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

###################
# Post-dominators #
###################

PLUGIN_ENABLE:=@ENABLE_POSTDOMINATORS@
PLUGIN_NAME:=Postdominators
PLUGIN_DIR:=src/postdominators
PLUGIN_CMO:= print compute
PLUGIN_HAS_MLI:=yes
PLUGIN_NO_TEST:=yes
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

#########
# inout #
#########

PLUGIN_ENABLE:=@ENABLE_INOUT@
PLUGIN_NAME:=Inout
PLUGIN_DIR:=src/inout
PLUGIN_CMO:= kf_state context inputs outputs derefs access_path register
PLUGIN_HAS_MLI:=yes
PLUGIN_NO_TEST:=yes
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

######################
# Semantic callgraph #
######################

PLUGIN_ENABLE:=@ENABLE_SEMANTIC_CALLGRAPH@
PLUGIN_NAME:=Semantic_callgraph
PLUGIN_DIR:=src/semantic_callgraph
PLUGIN_CMO:= register
PLUGIN_HAS_MLI:=yes
PLUGIN_NO_TEST:=yes
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

######
# wp #
######

PLUGIN_ENABLE:=@ENABLE_WP@
PLUGIN_NAME:=Wp
PLUGIN_DIR:=src/wp
PLUGIN_CMO:= macros wpBase wpFol translate \
             cil2cfg calculus lowlevel_model hoare_model \
	     model0 \
	     register
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_CMO:=wp_gui
PLUGIN_DISTRIBUTED:=no
PLUGIN_DISTRIB_BIN:=no
PLUGIN_NO_DEFAULT_TEST:=yes
include Makefile.plugin

#####################
# Security analysis #
#####################

PLUGIN_ENABLE:=@ENABLE_SECURITY@
PLUGIN_NAME:=Security
PLUGIN_DIR:=src/security
PLUGIN_CMO:= lattice model components analysis register
PLUGIN_GUI_CMO:=register_gui
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_UNDOC:=analysis.ml
 # ocamldoc doesn't like recursive modules!
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

###################
# Impact analysis #
###################

PLUGIN_ENABLE:=@ENABLE_IMPACT@
PLUGIN_NAME:=Impact
PLUGIN_DIR:=src/impact
PLUGIN_CMO:= register
PLUGIN_GUI_CMO:= register_gui
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_HAS_MLI:=yes
PLUGIN_DISTRIBUTED:=yes
# PLUGIN_UNDOC:=impact_gui.ml
include Makefile.plugin

#################
# Jessie output #
#################

JESSIE_INCLUDES=@JESSIE_INCLUDES@

PLUGIN_ENABLE:=@ENABLE_JESSIE@
PLUGIN_NAME:=Jessie
PLUGIN_DIR:=src/jessie
PLUGIN_CMO:= integer common rewrite norm retype interp register
PLUGIN_HAS_MLI:=yes
PLUGIN_BFLAGS:=$(JESSIE_INCLUDES)
PLUGIN_OFLAGS:=$(JESSIE_INCLUDES)
PLUGIN_DEPFLAGS:=$(JESSIE_INCLUDES)
PLUGIN_DOCFLAGS:=$(JESSIE_INCLUDES)
PLUGIN_DISTRIBUTED:=yes
PLUGIN_DISTRIB_BIN:=no
PLUGIN_DISTRIB_EXTERNAL:=src-distrib-jessie
include Makefile.plugin

ifeq (@JESSIE_LOCAL@,yes)
# Same variable JCCML_EXPORT as in Why Makefile
JCCML_EXPORT = src/lib.ml src/rc.ml src/loc.ml src/pp.ml src/option_misc.ml \
       jc/jc_type_var.ml jc/output.ml \
       jc/jc_common_options.ml jc/jc_stdlib.ml \
       jc/jc_envset.ml jc/jc_region.ml jc/jc_fenv.ml jc/jc_constructors.ml \
       jc/jc_pervasives.ml jc/jc_iterators.ml \
       jc/jc_output_misc.ml jc/jc_poutput.ml jc/jc_output.ml jc/jc_noutput.ml
JCCML_EXPORT := $(addprefix @WHYDISTRIB@/, $(JCCML_EXPORT))

# Use the makefile of Why in order to compile Why's source files
@JCCMO@ @JCCMX@: $(JCCML_EXPORT)
	$(MAKE) -j 1 FRAMAC=yes -C @WHYDISTRIB@ \
		$(patsubst @WHYDISTRIB@/%, %, $@)

$(Jessie_CMI) $(Jessie_CMO): @JCCMO@
$(Jessie_CMX): @JCCMX@

# Call Why makefile from all, only if installed locally
.PHONY: why
why:
	$(MAKE) -j 1 FRAMAC=yes -C @WHYDISTRIB@

GEN_BYTE_LIBS+=@JCCMO@
GEN_OPT_LIBS+=@JCCMX@
else ifeq (@ENABLE_JESSIE@,yes)
BYTE_LIBS+=@JCCMO@
OPT_LIBS+=@JCCMX@
endif

##################################
# PDG : program dependence graph #
##################################

PLUGIN_ENABLE:=@ENABLE_PDG@
PLUGIN_NAME:=Pdg
PLUGIN_DIR:=src/pdg
PLUGIN_HAS_MLI:=yes
PLUGIN_CMO:= print \
            macros \
            lexical_successors \
            ctrlDpds \
	    state \
            build \
            sets \
            annot \
	    marks \
            register

PDG_TYPES:=pdgIndex pdgTypes pdgMarks
PDG_TYPES:=$(addprefix src/pdg_types/, $(PDG_TYPES))
PLUGIN_TYPES_CMO:=$(PDG_TYPES)

PLUGIN_INTRO:=doc/code/intro_pdg.txt
PLUGIN_TYPES_TODOC:=$(addsuffix .mli, $(PDG_TYPES))

PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

#####################################
# Scope : (very experimental !)     #
#####################################

PLUGIN_ENABLE:=@ENABLE_SCOPE@
PLUGIN_NAME:=Scope
PLUGIN_DIR:=src/scope
PLUGIN_CMO:= datascope zones
PLUGIN_HAS_MLI:=yes
PLUGIN_GUI_CMO:=dpds_gui
PLUGIN_INTRO:=doc/code/intro_scope.txt
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

#####################################
# Sparecode : unused code detection #
#####################################

PLUGIN_ENABLE:=@ENABLE_SPARECODE@
PLUGIN_NAME:=Sparecode
PLUGIN_DIR:=src/sparecode
PLUGIN_CMO:= globs marks transform register
PLUGIN_HAS_MLI:=yes
PLUGIN_DEPENDS:=Pdg
PLUGIN_INTRO:=doc/code/intro_sparecode.txt
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

###########
# Slicing #
###########

PLUGIN_ENABLE:=$(ENABLE_SLICING)
PLUGIN_NAME:=Slicing
PLUGIN_DIR:=src/slicing
PLUGIN_CMO:= slicingMacros \
            slicingMarks \
            slicingActions \
            fct_slice \
            printSlice \
            slicingProject \
	    slicingTransform \
            slicingCmds \
            register
SLICING_TYPES:=slicingTypes
SLICING_TYPES:=$(addprefix src/slicing_types/, $(SLICING_TYPES))
PLUGIN_TYPES_CMO:=$(SLICING_TYPES)

PLUGIN_GUI_CMO:=register_gui

PLUGIN_INTRO:=doc/code/intro_slicing.txt
PLUGIN_TYPES_TODOC:= $(addsuffix .ml, $(SLICING_TYPES))
PLUGIN_UNDOC:=register.ml # slicing_gui.ml

PLUGIN_TESTS_DIRS:= slicing slicing2
PLUGIN_TESTS_LIB:= tests/slicing/libSelect tests/slicing/libAnim
PLUGIN_DEPENDS:=Pdg
PLUGIN_DISTRIBUTED:=yes
include Makefile.plugin

FILES_FOR_OCAMLDEP+=$(TEST_SLICING_ML)

##########################
# C++ analysis extension #
##########################

PPCHOME=@abs_top_srcdir@

CXX_ELSADISTRIB=cxx_elsa/elsa-2006.06.11

CXX_ELSAHOME=$(CXX_ELSADISTRIB)/elsa

.PHONY: elsa
elsa:
	$(MAKE) -C $(CXX_ELSADISTRIB)

### the ast generator.
#   Can not be part of the generic plugin mechanism, as we need it to
#   generate some of the sources of the plugin itself (i.e. it must be
#   built before the dependencies computation for the plugin takes place.

#The files
CXX_ASTGENINT=std_utils loc astgen_type astgen_parse astgen_main
CXX_ASTGENMOD=std_utils loc astgen_type astgen_parse astgen_lex astgen_main
$(CXX_ASTGENMOD:%=cxx_elsa/%.cmo) $(CXX_OBJ:%=cxx_elsa/%.cmi): BFLAGS:=-I cxx_elsa $(BFLAGS)
$(CXX_ASTGENMOD:%=cxx_elsa/%.cmx): OFLAGS:=-I cxx_elsa $(OFLAGS)

# generator dependencies
.PHONY: cxx_depend
cxx_depend: cxx_elsa/.cxx_depend

ifeq ($(ENABLE_CXX),yes)
include cxx_elsa/.cxx_depend

cxx_elsa/.cxx_depend: $(CXX_ASTGENMOD:%=cxx_elsa/%.ml) \
                      $(CXX_ASTGENINT:%=cxx_elsa/%.mli)
	$(call QUIET,'$(N_DEP) $@') \
	$(OCAMLDEP) -pp $(CAMLP4O) -I cxx_elsa $^ > cxx_elsa/.cxx_depend
endif

bin/astgen$(EXE): $(CXX_ASTGENMOD:%=cxx_elsa/%.cmo)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) -I cxx_elsa -o $@ -g str.cma $^

### main modules of the elsa-to-cil translator
CXX_TRANSLATE=std_utils install elsa_loc loc config astgen_lex		\
parse_tree predef_cxx cc_ast_parse cc_ast_visitor elsa_utils		\
cc_analyse_types mangling expr nameSpace types logic normalize cxx_print class	\
statements translate

### c++ ast description from elsa
CXX_ELSAAST=cc.ast cc_tcheck.ast cc_elaborate.ast gnu.ast annot_ast.ast

# local c++ ast descriptions (needed because some AST nodes are in the
# verbatim sections of elsa's *.ast)
CXX_EXTRAAST=cxx_elsa/extra.ast

# unused for now
#	     cxx_elsa/annot_ast.ml cxx_elsa/annot_ast_parse.ml

### local configuration
cxx_elsa/install.ml: Makefile
	@$(ECHO) "(* local installation related variables. " > $@
	@$(ECHO) "Automatically generated by Makefile. DO NOT EDIT! *)" >> $@
	@$(ECHO) "let framac_home = \"$(PPCHOME)\";;" >> $@
	@$(ECHO) \
         "let elsa_home = Filename.concat framac_home \"$(CXX_ELSAHOME)\";;" >> $@

### stand-alone translator

cxx_elsa/test.cmo: $(CXX_TRANSLATE:%=cxx_elsa/%.cmo)
cxx_elsa/test.cmo: BFLAGS:=-I cxx_elsa $(BFLAGS)
bin/cxx_translate$(EXE):$(GEN_BYTE_LIBS) \
    $(CXX_TRANSLATE:%=cxx_elsa/%.cmo) cxx_elsa/test.cmo
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) $(BFLAGS) -I cxx_elsa  $(BYTE_LIBS) \
        $(CXX_TRANSLATE:%=cxx_elsa/%.cmo) cxx_elsa/test.cmo -o $@

CXX_TESTS_DIR=basic class val_analysis template specs

#NB: PTESTS_OPTS is intended to be set outside of the Makefile
#In particular make cxx_tests PTESTS_OPTS=-update will update the oracles.
.PHONY: cxx_tests
cxx_tests: bin/cxx_translate ptests
	cd cxx_elsa && \
        ../bin/ptests.byte$(EXE) $(PTESTS_OPTS) $(CXX_TESTS_DIR)

ifeq ($(ENABLE_CXX),yes)
tests: cxx_tests
endif


GENERATED += src/cxx_types/cc_ast.mli

DISTRIB_FILES += src/cxx_types/cc_ast.mli.in

ifeq ($(ENABLE_CXX),yes)
src/cxx_types/cc_ast.mli: Makefile \
	bin/astgen$(EXE) $(CXX_ELSAAST:%=$(CXX_ELSAHOME)/%) $(CXX_EXTRAAST)
	bin/astgen$(EXE) -prefix "cxx_elsa/cc_ast" \
           $(CXX_ELSAAST:%=$(CXX_ELSAHOME)/%) $(CXX_EXTRAAST)
	mv cxx_elsa/cc_ast.mli $@

else

CC_AST_STUB=src/cxx_types/cc_ast.mli.in

src/cxx_types/cc_ast.mli: Makefile $(CC_AST_STUB)
	$(call QUIET,'$(N_CP) $@') \
	$(CP) $(CC_AST_STUB) $@
endif

cxx_elsa/cc_ast_parse.ml: src/cxx_types/cc_ast.mli
	:

cxx_elsa/cc_ast_visitor.ml: src/cxx_types/cc_ast.mli
	:

cxx_elsa/annot_ast.ml cxx_elsa/annot_ast_parse.ml: \
     bin/astgen $(CXX_ELSAHOME)/annot.ast
	bin/astgen -prefix "cxx_elsa/annot_ast" \
	   $(CXX_ELSAHOME)/annot.ast

cxx_elsa/.depend: cxx_elsa/.cxx_depend bin/astgen$(EXE)

PLUGIN_ENABLE:=$(ENABLE_CXX)
PLUGIN_NAME:=Cxx
PLUGIN_DIR:=cxx_elsa
PLUGIN_NO_TEST:=yes
PLUGIN_NO_DEFAULT_TEST:=yes
PLUGIN_BFLAGS:=-pp $(CAMLP4O)
PLUGIN_OFLAGS:=-pp $(CAMLP4O)
PLUGIN_DEPFLAGS:=-pp $(CAMLP4O)
PLUGIN_DOCFLAGS:=-pp $(CAMLP4O)
PLUGIN_CMO:= $(CXX_TRANSLATE) cxx_state register
PLUGIN_GENERATED:= cxx_elsa/.cxx_depend bin/astgen \
                   cxx_elsa/astgen_parse.ml cxx_elsa/astgen_parse.mli \
                   cxx_elsa/astgen_lex.ml cxx_elsa/install.ml \
                   cxx_elsa/cc_ast_visitor.ml cxx_elsa/cc_ast_parse.ml \
	           src/cxx_types/cc_ast.mli

PLUGIN_HAS_MLI:=yes
PLUGIN_UNDOC:=astgen_lex.ml astgen_parse.ml cc_ast_parse.ml
PLUGIN_TESTS_DIRS:=cxx_elsa/tests
PLUGIN_INTRO:=cxx_elsa/doc_intro.txt
PLUGIN_DISTRIBUTED:=no
include Makefile.plugin

ifeq ($(ENABLE_SLICING),yes)
PLUGIN_ENABLE:=$(ENABLE_CXX)
else
PLUGIN_ENABLE:=no
endif
PLUGIN_NAME:=CxxSlicing
PLUGIN_DIR:=cxx_elsa/cxx_slicing
PLUGIN_CMO:= cxx_slice register_slicing
PLUGIN_HAS_MLI:=yes
PLUGIN_BFLAGS:= -I cxx_elsa
PLUGIN_OFLAGS:= -I cxx_elsa
PLUGIN_DEPFLAGS:= -I cxx_elsa
PLUGIN_NO_TEST:=yes
PLUGIN_INTRO:=cxx_elsa/cxx_slicing/doc_intro.txt
PLUGIN_DEPENDS:=Cxx
PLUGIN_DISTRIBUTED:=no
include Makefile.plugin

#########
# Logic #
#########

LCMO = src/logic/fol.cmo src/logic/logic_interp.cmo \
	src/logic/infer_annotations.cmo
LCMX = $(LCMO:.cmo=.cmx)

MODULES_TODOC += src/logic/fol.mli src/logic/logic_interp.mli \
	src/logic/infer_annotations.mli

PLUGIN_TESTS_LIST += spec

#######################
# Aorai : ltl_to_acsl #
#######################

PLUGIN_ENABLE:=@ENABLE_LTL_TO_ACSL@
PLUGIN_NAME:=Ltl_to_acsl
PLUGIN_DIR:=src/ltl_to_acsl
PLUGIN_GENERATED:= $(addprefix ${PLUGIN_DIR}/, \
		promelalexer.ml promelaparser.ml promelaparser.mli \
		ltllexer.ml ltlparser.ml ltlparser.mli \
		)
PLUGIN_CMO:= bool3 \
	data_for_ltl \
	ltl_utils \
	promelaoutput \
	ltl_output \
	ltlparser \
	ltllexer \
	promelaparser \
	promelalexer \
	abstract_ai \
	bycase_ai \
	ltl_to_acsl_visitors \
	ltl_to_acsl_register
PLUGIN_CMI:= ltlast.mli \
	promelaast.mli
PLUGIN_NO_TEST:=yes
PLUGIN_HAS_MLI:=yes
PLUGIN_DISTRIBUTED:=yes
PLUGIN_DISTRIB_BIN:=no
include Makefile.plugin

##########################################################################
# Common startup module                                                  #
# All link command should add it as last linked module and depend on it. #
##########################################################################

STARTUPCMO=src/kernel/boot.cmo
STARTUPCMX=$(STARTUPCMO:.cmo=.cmx)

############
# toplevel #
############

TOPCMO = src/toplevel/main.cmo
TOPCMX = $(TOPCMO:.cmo=.cmx)

ALL_CMO=$(ACMO) $(PLUGIN_TYPES_CMO_LIST) \
	$(KERNEL_CMO) $(LCMO) $(LOCCMO) \
        $(PLUGIN_CMO_LIST) $(TOPCMO)

bin/toplevel.byte$(EXE): $(ALL_CMO) $(STARTUPCMO) $(GEN_BYTE_LIBS) \
			$(PLUGIN_DYN_CMO_LIST)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) $(BFLAGS) -o $@ $(BYTE_LIBS) $(ALL_CMO) $(STARTUPCMO)

bin/toplevel.prof$(EXE): $(GEN_BYTE_LIBS) $(ALL_CMO) $(STARTUPCMO) \
			$(PLUGIN_DYN_CMO_LIST)
	ocamlcp $(BFLAGS) -o $@ $(BYTE_LIBS) $(ALL_CMO) $(STARTUPCMO)

ALL_CMX= $(ALL_CMO:.cmo=.cmx)

bin/toplevel.opt$(EXE): $(ALL_CMX) $(STARTUPCMX) $(GEN_OPT_LIBS) \
			$(PLUGIN_DYN_CMX_LIST)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) $(OFLAGS) -o $@ $(OPT_LIBS) $(ALL_CMX) $(STARTUPCMX)

bin/toplevel.top$(EXE): $(ALL_CMO) src/toplevel/toplevel_topdirs.cmo \
		$(STARTUPCMO) $(GEN_BYTE_LIBS) $(PLUGIN_DYN_CMO_LIST)
	$(call QUIET,'$(N_MKTOP) $@') \
	$(OCAMLMKTOP) $(BFLAGS) -o $@ $(BYTE_LIBS) $(ALL_CMO) \
	  src/toplevel/toplevel_topdirs.cmo $(STARTUPCMO)

#######
# GUI #
#######

ifneq (@ENABLE_GUI@,no)
GUI_INCLUDES = -I src/gui -I +lablgtk2
BYTE_GUI_LIBS+= lablgtk.cma
OPT_GUI_LIBS += lablgtk.cmxa

ifeq ($(HAS_VIEWGRAPH),yes)
BYTE_GUI_LIBS += lablgnomecanvas.cma
OPT_GUI_LIBS += lablgnomecanvas.cmxa
endif

ifeq ($(HAS_LABLGTK),yes)
EXTRAS_AFTER_BYTE+= gui
endif

ifeq ($(HAS_GTKSOURCEVIEW),yes)
ifeq ($(HAS_LEGACY_GTKSOURCEVIEW),yes)
GUI_INCLUDES  += -I +lablgtksourceview
endif
BYTE_GUI_LIBS += lablgtksourceview.cma
OPT_GUI_LIBS  += lablgtksourceview.cmxa
endif

src/gui/filetree.ml: Makefile

ifeq ($(HAS_LABLGTK_CUSTOM_MODEL),yes)
src/gui/filetree.ml: src/gui/filetree_custom.ml
	$(call QUIET,'$(N_CP) $@') \
	($(CP) $< $@; \
	$(CHMOD_RO) $@)
else
src/gui/filetree.ml: src/gui/filetree_default.ml
	$(call QUIET,'$(N_CP) $@') \
	($(CP) $< $@; \
	$(CHMOD_RO) $@)
endif
GENERATED += src/gui/filetree.ml

GUICMO += gtk_helper source_viewer source_manager warning_manager \
	 pretty_source filetree design project_manager journal_manager \
	 about_dialog gui_boot
GUICMO:= $(patsubst %, src/gui/%.cmo, $(GUICMO)) $(PLUGIN_GUI_CMO_LIST)

MODULES_TODOC+= $(addprefix src/gui/,$(addsuffix .mli,\
		gtk_helper source_viewer source_manager warning_manager \
		pretty_source filetree design project_manager journal_manager))

GUICMI = $(GUICMO:.cmo=.cmi)
GUICMX = $(GUICMO:.cmo=.cmx)

$(GUICMI) $(GUICMO)  bin/viewer.byte$(EXE): BFLAGS+= $(GUI_INCLUDES)
$(GUICMX) bin/viewer.opt$(EXE): OFLAGS+= $(GUI_INCLUDES)

$(PLUGIN_DEP_GUI_CMO_LIST) $(PLUGIN_DYN_DEP_GUI_CMO_LIST): BFLAGS+= $(GUI_INCLUDES)
$(PLUGIN_DEP_GUI_CMX_LIST) $(PLUGIN_DYN_DEP_GUI_CMX_LIST): OFLAGS+= $(GUI_INCLUDES)

.PHONY:gui

gui: bin/viewer.byte$(EXE) bin/viewer.$(OCAMLBEST)$(EXE)

bin/viewer.byte$(EXE): BYTE_LIBS+=$(BYTE_GUI_LIBS)
bin/viewer.byte$(EXE): $(ALL_CMO) $(GRAPH_GUICMO) $(GUICMO) $(STARTUPCMO) \
			$(GEN_BYTE_LIBS) $(PLUGIN_DYN_GUI_CMO_LIST)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) $(BFLAGS) -o $@ $(BYTE_LIBS) $(ALL_CMO) $(GRAPH_GUICMO) \
		$(GUICMO) $(STARTUPCMO)

bin/viewer.opt$(EXE): OPT_LIBS+= $(OPT_GUI_LIBS)
bin/viewer.opt$(EXE): $(ALL_CMX) $(GRAPH_GUICMX) $(GUICMX) $(STARTUPCMX) \
			$(GEN_OPT_LIBS) $(PLUGIN_DYN_GUI_CMX_LIST)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) $(OFLAGS) -o $@ $(OPT_LIBS)	$(ALL_CMX) $(GRAPH_GUICMX) \
		$(GUICMX) $(STARTUPCMX)
endif

##################
# Journalization #
##################

JOURNALS = $(patsubst %.ml, %, $(wildcard frama_c_journal*.ml))
JOURNALS_CMO = $(addsuffix .cmo, $(JOURNALS))

ifeq ($(LOWER_THAN_311), no)
JOURNALS_CMXS = $(JOURNALS_CMO:.cmo=.cmxs)
journal: $(JOURNALS_CMO) $(JOURNALS_CMXS)
else
journal: $(JOURNALS_CMO)
endif

$(JOURNALS_CMO) $(JOURNALS_CMXS): FLAGS+=-w x

#########################
# Standalone Obfuscator #
#########################

obfuscator: bin/obfuscator.$(OCAMLBEST)

bin/obfuscator.byte$(EXE): $(ACMO) $(KERNEL_CMO) $(STARTUPCMO) $(GEN_BYTE_LIBS)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) $(BFLAGS) -o $@ $(BYTE_LIBS) $^

bin/obfuscator.opt$(EXE): $(ACMX) $(KERNEL_CMX) $(STARTUPCMX) $(GEN_OPT_LIBS)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) $(OFLAGS) -o $@ $(OPT_LIBS) $^

########
# Miel #
########

# the following line should be removed when/if miel becomes a plugin
CONFIG_DISTRIB_BIN+="--disable-miel"

ifneq ($(ENABLE_MIEL), no)
MIELCMO = src/miel/miel_spec_parsing_internals.cmo \
	src/miel/miel_user.cmo \
	src/miel/miel_spec.cmo \
	src/miel/miel_spec_compilation_lexer.cmo \
	src/miel/miel_spec_compilation_parser.cmo \
	src/miel/miel_spec_pointers_lexer.cmo \
	src/miel/miel_spec_pointers_parser.cmo \
	src/miel/miel_spec_lexer.cmo src/miel/miel_spec_parser.cmo \
	src/miel/parallelism.cmo  src/miel/proc_names.cmo \
        src/miel/build_parallel_model.cmo \
	src/miel/alcool.cmo src/miel/miel_ext_pointers.cmo \
        src/miel/miel_ext_raw.cmo src/miel/promela.cmo \
	src/miel/miel_init.cmo \
        src/miel/passerelle.cmo \
        src/miel/miel_cg.cmo \
	src/miel/miel.cmo

MIELCMX = $(MIELCMO:.cmo=.cmx)

ALL_MIEL_CMO= $(ACMO) $(PLUGIN_TYPES_CMO_LIST) $(KERNEL_CMO) $(KCMO) $(LCMO) $(LOCCMO)  $(PLUGIN_CMO_LIST) $(TOPCMO) $(MIELCMO)

ALL_MIEL_CMX = $(ACMX) $(PLUGIN_TYPES_CMX_LIST) $(KERNEL_CMX) $(KCMX) $(LCMX) $(LOCCMX)  $(PLUGIN_CMX_LIST) $(TOPCMX) $(MIELCMX)

# The references to MIELO have been removed so far. They will be restored as
# soon as they are needed.
MIELO = src/miel/ocaml_tcl.o

GENERATED += src/miel/miel_spec_lexer.ml src/miel/miel_spec_parser.ml \
	src/miel/miel_spec_compilation_lexer.ml \
	src/miel/miel_spec_compilation_parser.ml \
	src/miel/miel_spec_pointers_lexer.ml \
	src/miel/miel_spec_pointers_parser.ml \
	src/miel/miel_spec_parser.mli \
	src/miel/miel_spec_pointers_parser.mli \
	src/miel/miel_spec_compilation_parser.mli

miel: bin/miel.opt$(EXE)

bin/miel.top$(EXE): $(ALL_MIEL_CMO) src/toplevel/toplevel_topdirs.cmo \
              src/miel/mieltop_dirs.cmo $(TOPCMO) $(STARTUPCMO) \
	      $(GEN_BYTE_LIBS)
	$(call QUIET,'$(N_MKTOP) $@') \
	$(OCAMLMKTOP) $(BFLAGS) -o $@ $(BYTE_LIBS) \
		$(ALL_MIEL_CMO) $(TOPCMO) \
		src/toplevel/toplevel_topdirs.cmo src/miel/mieltop_dirs.cmo \
		$(STARTUPCMO)

bin/miel.byte$(EXE): $(ALL_MIEL_CMO) $(STARTUPCMO) $(GEN_BYTE_LIBS)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) $(BFLAGS) -o $@ $(BYTE_LIBS) $(ALL_MIEL_CMO) $(STARTUPCMO)

bin/miel.opt$(EXE): $(ALL_MIEL_CMX) $(STARTUPCMX) $(GEN_OPT_LIBS)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) $(OFLAGS) -o $@ $(OPT_LIBS)	$(ALL_MIEL_CMX) $(STARTUPCMX)

miel_tests: bin/miel.byte$(EXE)
	$(MAKE) -C src/miel/tests

ifeq ($(HAS_LABLGTK),yes)

GENERATED += src/miel/miel_gui.ml
src/miel/miel_gui.ml : src/miel/gui/miel_gui.glade
	$(call QUIET,'$(N_MAKING) $@') \
	($(CP) src/miel/gui/miel_gui.glade bin/; \
	$(LABLGLADECC) $^ > $@)

bin/miel_gui.glade : src/miel/gui/miel_gui.glade
	$(call QUIET,'$(N_CP) $@') \
	$(CP) $^ $@

MIEL_GUI_CMO = src/miel/miel_gui.cmo src/miel/miel_gui_actions.cmo
MIEL_GUI_CMX = $(MIEL_GUI_CMO:.cmo=.cmx)
$(MIEL_GUI_CMO) $(MIEL_GUI_CMX) : INCLUDES+=$(GUI_INCLUDES)

#bin/miel_gui.opt : $(OPT_LIBS)+=lablglade.cmxa lablgtk.cmxa
bin/miel_gui.opt$(EXE) : $(ALL_MIEL_CMX) $(MIEL_GUI_CMX) $(STARTUPCMX) \
	           $(GEN_OPT_LIBS)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) $(OFLAGS) -o $@ $(OPT_LIBS) \
	  -I +lablgtk2 lablgtk.cmxa lablglade.cmxa \
          $(ALL_MIEL_CMX) $(MIEL_GUI_CMX) $(STARTUPCMX)

miel_gui: bin/miel_gui.glade bin/miel_gui.opt$(EXE)

endif

else
miel:
	-$(ECHO) "Unsupported extension. Rerun ./configure --enable-miel"
endif

VERSION=$(shell $(SED) -e 's/\\(.*\\)/\\1/' VERSION)

VERSIONDIR=src/kernel
VERSIONFILE=$(VERSIONDIR)/version.ml
VERSIONCMO=$(VERSIONDIR)/version.cmo
GENERATED +=$(VERSIONFILE)

empty:=
space:=$(empty) $(empty)
$(VERSIONFILE): VERSION Makefile
	$(call QUIET,'$(N_MAKING) $@') \
	($(RM) $@; \
	$(ECHO) "(* This file is generated in Makefile.in. Do not modify. *)" \
		> $@; \
	$(ECHO) "let version = \""$(VERSION)"\"" >> $@; \
	$(ECHO) "let date = \""`LC_ALL=C date`"\"" >> $@; \
	$(ECHO) "let dataroot = try Sys.getenv \"FRAMAC_SHARE\" with Not_found -> \"$(DESTDIR)$(datadir)\"" >> $@;\
	$(ECHO) "let static_plugins = [" \
		$(subst $(space),"; ",$(foreach p,$(PLUGIN_LIST),\"$(notdir $p)\")) \
		"]" >> $@; \
	$(ECHO) "let static_gui_plugins = [" \
		$(subst $(space),"; ",$(foreach p,$(PLUGIN_GUI_CMO_LIST),\"$(notdir $(patsubst %.cmo,%,$p))\")) \
		"]" >> $@; \
	$(CHMOD_RO) $@)

#################
# Generic rules #
#################

ifdef DOT
%.png: %.dot
	$(call QUIET,'$(N_DOT) $@') \
	$(DOT) -Tpng -o $@ $<

%.svg: %.dot
	$(call QUIET,'$(N_DOT) $@') \
	($(SED) "s/\(digraph .*\)/\1 node [href=\"\\\\N.html\"];/" $< \
		> $<.tmp; \
	$(DOT) -Tsvg -o $@ $<.tmp; \
	$(RM) $<.tmp)

%.ps: %.dot
	$(call QUIET,'$(N_DOT) $@') \
	$(DOT) -Tps -o $@ $<
else
%.png: %.dot
	@$(ECHO) "dot missing: generation of $@ skipped."
%.svg: %.dot
	@$(ECHO) "dot missing: generation of $@ skipped."
%.ps: %.dot
	@$(ECHO) "dot missing: generation of $@ skipped."
endif

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .tex .dvi .ps .html .cmxs

.mli.cmi:
	$(call QUIET,'$(N_OCAMLC) $@') \
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmi:
	$(call QUIET,'$(N_OCAMLC) $@') \
	if `test -e $<i`; then $(OCAMLC) -c $(BFLAGS) $<i; \
	else $(OCAMLC) -c $(BFLAGS) $<; fi

.ml.cmo:
	$(call QUIET,'$(N_OCAMLC) $@') \
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(call QUIET,'$(N_OCAMLOPT) $@') \
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(call QUIET,'$(N_OCAMLOPT) $@') \
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmxs:
	$(call QUIET,'$(N_OCAMLOPT) $@') \
	$(OCAMLOPT) -shared -o $@ $(OFLAGS) $<

.mll.ml:
	$(call QUIET,'$(N_OCAMLLEX) $@') \
	$(OCAMLLEX) $<

.mly.ml:
	$(call QUIET,'$(N_OCAMLYACC) $@') \
	$(OCAMLYACC) -v $<

.mly.mli:
	$(call QUIET,'$(N_OCAMLYACC) $@') \
	$(OCAMLYACC) -v $<

.tex.dvi:
	$(call QUIET,'$(N_LATEX) $@') \
	latex $< && latex $<

.dvi.ps:
	$(call QUIET,'$(N_DVIPS) $@') \
	dvips $< -o $@

.tex.html:
	hevea $<

.c.o:
	$(call QUIET,'$(N_OCAMLC) $@') \
	$(OCAMLC) $(BFLAGS) -ccopt "-o $@" $<

#########
# Tests #
#########

.PHONY: tests oracles btests tests_dist
tests: byte opt top ptests
	$(call QUIET,'$(N_EXEC) ptests') \
	time -p ./bin/ptests.byte$(EXE) $(PLUGIN_TESTS_LIST)

oracles: opt top ptests
	$(call QUIET, '$(N_MAKING) oracles') \
	(./bin/ptests.byte$(EXE) $(PLUGIN_TESTS_LIST) > /dev/null 2>&1 ; \
	 ./bin/ptests.byte$(EXE) -update $(PLUGIN_TESTS_LIST))

btests: byte top ptests
	$(call QUIET,'$(N_EXEC) ptest') \
	time -p ./bin/ptests.byte$(EXE) -byte $(PLUGIN_TESTS_LIST)

tests_dist: dist top ptests
	$(call QUIET,'$(N_EXEC) ptests') \
	time -p ./bin/ptests.byte$(EXE) $(PLUGIN_TESTS_LIST)

# test only one test suite : make suite_tests
%_tests: opt top ptests
	$(call QUIET,'$(N_EXEC) ptests') \
	./bin/ptests.byte$(EXE) $($*_TESTS_OPTS) $*

# full test suite
wp_TESTS_OPTS=-j 1
fulltests: tests wp_tests

acsl_tests: byte
	find doc/speclang -name \*.c -exec bin/toplevel.byte$(EXE) {} \; > /dev/null




##############
# Emacs tags #
##############

.PHONY: tags
# otags gives a better tagging of ocaml files than etags
ifdef OTAGS
tags:
	$(OTAGS) -r external src lib cil
vtags:
	$(OTAGS) -vi -r external src lib cil
else
tags:
	find . -name "*.ml[ily]" -o -name "*.ml" | sort -r | xargs \
	etags "--regex=/[ \t]*let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/[ \t]*let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/[ \t]*and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/[ \t]*type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/[ \t]*exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/[ \t]*val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/[ \t]*module[ \t]+\([^ \t]+\)/\1/"
endif

#################
# Documentation #
#################

wc:
	ocamlwc -p src/*/*.ml src/*/*.ml[iyl] cil/ocamlutil/*.ml cil/ocamlutil/*.ml[ily] cil/src/*.ml cil/src/*.ml[ily] cil/src/*.ml cil/src/*.ml[ily] cil/src/logic/*.ml cil/src/logic/*.ml[ily] cil/src/ext/*.ml cil/src/ext/*.ml[ily] cil/src/frontc/*.ml cil/src/frontc/*.ml[ily]

$(DOC_DIR)/plugin.css: $(DOC_DIR)/style.css
	$(call QUIET,'$(N_MAKING) $@') \
	($(RM) $@; \
	($(CAT) $<; $(ECHO) "body { background-color : #FFFFEE }") > $@; \
	$(CHMOD_RO) $@)

$(DOC_DIR)/docgen.cmo: $(DOC_DIR)/docgen.ml
	$(call QUIET,'$(N_OCAMLC) $@') \
	$(OCAMLC) -c -I +ocamldoc -I $(VERSIONDIR) $(DOC_DIR)/docgen.ml
clean::
	$(RM) $(DOC_DIR)/docgen.cm[io]

.PHONY: doc html plugins-doc

plugins-doc: $(PLUGIN_DOC_LIST)

# to make the documentation for one pluggin only,
# the name of the pluggin should begin with a capital letter :
# Example for the pdg doc : make Pdg_DOC
# While working on the documentation of a pluggin, it can also be usefull
# to use : make -o doc/code/kernel-doc.ocamldoc Plugin_DOC
# to avoid redoing the global documentation each time.

DOC_FLAGS:= -colorize-code -stars -inv-merge-ml-mli -m A -hide-warnings \
	$(INCLUDES) $(GUI_INCLUDES)

STDLIB_FILES=map set pervasives big_int list array string char marshal \
	printf format scanf hashtbl buffer sys
STDLIB_FILES:=$(patsubst %, $(OCAMLLIB)/%.mli, $(STDLIB_FILES))

html $(DOC_DIR)/kernel-doc.ocamldoc: $(MODULES_TODOC) \
				   byte bin/viewer.byte \
				   $(DOC_DIR)/docgen.cmo
	$(call QUIET,'$(N_DOC) kernel') \
	($(MKDIR) $(DOC_DIR)/html; \
	$(RM) $(DOC_DIR)/html/*.html; \
	$(OCAMLDOC) $(DOC_FLAGS) -I $(OCAMLLIB) \
	  $(addprefix -stdlib , $(STDLIB_FILES)) \
          -sort -css-style ../style.css \
	  -g $(DOC_DIR)/docgen.cmo \
	  -d $(DOC_DIR)/html -dump $(DOC_DIR)/kernel-doc.ocamldoc \
	  $(MODULES_TODOC))

doc: html plugins-doc

doc/db/db.tex: src/kernel/db.mli
	$(call QUIET,'$(N_DOC) $@') \
	($(MKDIR) $(dir $@); \
	$(OCAMLDOC) $(INCLUDES) -I $(OCAMLLIB) \
	  -latex -noindex -latextitle 3,paragraph -notoc -noheader -notrailer \
	  -o $@ $<)

# Could be optimized
.PHONY: db_doc
db_doc doc/db/db.pdf: doc/db/main.tex doc/db/main.bib doc/db/db.tex
	$(call QUIET,'$(N_MAKING) doc/db/db.pdf') \
	cd $(dir $@); \
	  pdflatex $(notdir $<); bibtex main; \
	  pdflatex $(notdir $<); pdflatex $(notdir $<); \
	  mv main.pdf $(notdir $@)

#find src -name "*.ml[i]" -o -name "*.ml" -maxdepth 3 | sort -r | xargs
dots: $(ALL_CMO)
	$(call QUIET,'$(N_DOC) callgraph') \
	$(OCAMLDOC) $(INCLUDES) -o doc/call_graph.dot -dot -dot-include-all -dot-reduce $(MODULES_TODOC)
	$(MAKE) doc/call_graph.svg
	$(MAKE) doc/call_graph.ps

datatype_dependencies.dot computation_dependencies.dot: ./bin/toplevel.byte$(EXE)
	$(call QUIET,'$(N_EXEC) toplevel.byte') \
	./bin/toplevel.byte$(EXE) -project-debug -dump > /dev/null 2> /dev/null

.PHONY:display_dependencies
display_dependencies: datatype_dependencies.svg computation_dependencies.svg
	inkscape datatype_dependencies.svg computation_dependencies.svg &

################
# Installation #
################

FILTER_INTERFACE_DIRS=lib/plugins src/gui

.PHONY: install
install:
#	$(MAKE) -C ocamlgraph install
	$(MKDIR) $(DESTDIR)$(BINDIR)
	$(MKDIR) $(DESTDIR)$(datadir)
	$(MKDIR) $(DESTDIR)$(plugindir)
	$(MKDIR) $(DESTDIR)$(libdir)
	$(CP) -R share/*.c share/*.h share/Makefile.template share/why share/jessie \
		$(DESTDIR)$(datadir)
	$(CP) bin/toplevel.$(OCAMLBEST) $(DESTDIR)$(BINDIR)/frama-c$(EXE)
	$(CP) bin/toplevel.byte$(EXE) $(DESTDIR)$(BINDIR)/frama-c.byte$(EXE)
	if [ -x bin/toplevel.top ] ; then \
          $(CP) bin/toplevel.top $(DESTDIR)$(BINDIR)/frama-c.toplevel$(EXE) ; fi
	if [ -x bin/viewer.$(OCAMLBEST) ] ; then \
	  $(CP) bin/viewer.$(OCAMLBEST) $(DESTDIR)$(BINDIR)/frama-c-gui$(EXE) ; fi
	if [ -x bin/viewer.byte$(EXE) ] ; then \
	  $(CP) bin/viewer.byte$(EXE) $(DESTDIR)$(BINDIR)/frama-c-gui.byte$(EXE) ; fi
	if [ -d doc/manuals ]; then \
	  $(CP) -R doc/manuals $(DESTDIR)$(datadir); \
        fi
	if [ -d lib/plugins -a $(PLUGIN_DYN_EXISTS) = "yes" ]; then \
	  $(CP)  $(PLUGIN_DYN_CMO_LIST) $(PLUGIN_DYN_CMX_LIST) \
	         $(PLUGIN_DYN_GUI_CMO_LIST) $(PLUGIN_DYN_GUI_CMX_LIST) \
		 $(DESTDIR)$(plugindir); \
	fi
# 	line below does not work if INCLUDES contains twice the same directory
#       Do not attempt to copy gui interfaces if gui is disabled
	$(CP) $(foreach d,$(filter-out $(FILTER_INTERFACE_DIRS),$(INCLUDES:-I%=%)), $(d)/*.cmi) $(DESTDIR)$(libdir)
	if [ "$(ENABLE_GUI)" = "yes" ]; then \
	  $(CP) src/gui/*.cmi $(DESTDIR)$(libdir); \
        fi
#	remove CVS directories
	find $(DESTDIR)$(datadir) -name CVS | xargs $(RM) -r
ifeq (@JESSIE_LOCAL@,yes)
	$(MAKE) -C @WHYDISTRIB@ DESTDIR=$(DESTDIR) install
endif

toto:
	@echo $(DESTDIR)

################################
# File headers: license policy #
################################

HEADACHE= headache -c headers/headache_config.txt

MODIFIED_MENHIR=external/ptmap.ml*

CIL	= cil/ocamlutil/*.ml* \
	cil/src/*.ml* \
	cil/src/ext/*.ml* cil/src/ext/pta/*.ml* \
	cil/src/frontc/*.ml*

CEA_INRIA_LGPL	= Makefile.in configure.in config.h.in \
	src/logic/*.ml* \
	cil/src/logic/*.ml* \
	src/pdg_types/*.ml* src/pdg/*.ml* \
	src/slicing_types/*.ml* src/slicing/*.ml* \
	src/scope/*.ml* \
	src/sparecode/*.ml* \
	src/wp/*.ml*

INRIA_LGPL= src/jessie/*.ml* \
	src/ltl_to_acsl/*.ml* \
	share/jessie/*.h

CEA_LGPL= Makefile.plugin \
	src/ai/*.ml* \
	src/buckx/*.ml* src/buckx/*.[cS] \
	src/constant_propagation/*.ml* \
        src/cxx_types/cc_ast.mli.in \
	src/from/*.ml* \
	src/gui/*.ml* \
	src/inout/*.ml* \
	src/journal_loader/*.ml* \
	src/kernel/*.ml* \
	src/lib/*.ml* \
	src/memory_state/*.ml* \
	src/metrics/*.ml* \
	src/misc/*.ml* \
	src/occurrence/*.ml* \
	src/postdominators/*.ml* \
	src/project/*.ml* \
	src/semantic_callgraph/*.ml* \
	src/syntactic_callgraph/*.ml* \
	src/toplevel/*.ml* \
	src/users/*.ml* \
	src/value/*.ml* \
	share/*.c share/*.h \
	share/Makefile.template \
	ptests/*.ml*

CEA_PROPRIETARY:= src/modular_dependencies/*.ml* \
	src/impact/*.ml* \
	src/security/*.ml* \
        share/*.cc \
	share/miel-mode.el \
	src/cxx_types/predef_cxx_types.mli

ifneq ($(ENABLE_CXX),no)
CEA_PROPRIETARY+= \
	cxx_elsa/*.ml* \
	cxx_elsa/*.ast \
	cxx_elsa/cxx_slicing/*.ml*
endif
ifeq ($(ENABLE_MIEL),yes)
CEA_PROPRIETARY+=src/miel/*.ml*
endif

LICENSES= MODIFIED_MENHIR CEA_LGPL CEA_PROPRIETARY CEA_INRIA_LGPL INRIA_LGPL \
	CIL MODIFIED_CAMLLIB

.PHONY: headers
headers: clean
	@echo "Applying Headers..."
	$(foreach l,$(LICENSES),\
	$(foreach f,$($l),$(shell $(HEADACHE) -h headers/$l $f)))

########################################################################
# Makefile is rebuilt whenever Makefile.in or configure.in is modified #
########################################################################

Makefile: Makefile.plugin Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf

$(PERFCOUNT).c: $(PERFCOUNT).c.in
$(PERFCOUNT).c.in:
	./configure

# If 'make clean' have to be performed after 'cvs update':
# change '.make-clean-stamp' before 'cvs commit'
.make-clean: .make-clean-stamp
	touch $@
	$(MAKE) clean

include .make-clean

# force "make clean" to be executed for all users of CVS
force-clean:
	expr `$(CAT) .make-clean-stamp` + 1 > .make-clean-stamp

############
# cleaning #
############

clean-journal:
	$(call QUIET,'$(N_RM) journal') \
	$(RM) frama_c_journal*

clean-tests:
	$(call QUIET,'$(N_RM) tests') \
	($(RM) tests/*/*.byte$(EXE) tests/*/*.opt$(EXE) tests/*/*.cm* \
		tests/dynamic/.cm* tests/*/*~ tests/*/#* ; \
	$(RM) tests/*/result/*.*)

clean-doc: $(PLUGIN_LIST:=_CLEAN_DOC)
	$(call QUIET,'$(N_RM) documentation') \
	($(RM) -r $(DOC_DIR)/html; \
	$(RM) $(DOC_DIR)/docgen.cm* $(DOC_DIR)/*~; \
	$(RM) doc/db/*~ doc/db/ocamldoc.sty doc/db/db.tex; \
	if [ -f doc/developer/Makefile ]; then \
	  $(MAKE) --silent -C doc/developer clean; \
	fi; \
	if [ -f doc/architecture/Makefile ]; then \
	  $(MAKE) --silent -C doc/architecture clean; \
	fi; \
	if [ -f doc/speclang/Makefile ]; then \
	  $(MAKE) --silent -C doc/speclang clean; \
	fi; \
	if [ -f doc/www/src/Makefile ]; then \
	  $(MAKE) --silent -C doc/www/src clean; \
	fi)

clean-gui::
	$(call QUIET,'$(N_RM) gui') \
	$(RM) src/*/*_gui.cm* src/*/*_gui.o src/gui/*.cm* src/gui/*.o

clean-why:
	$(call QUIET,'$(N_RM) why') \
	if [ -f why/Makefile ]; then \
	  $(MAKE) --silent -C why clean; \
	fi

clean:: $(PLUGIN_LIST:=_CLEAN) $(PLUGIN_DYN_LIST:=_CLEAN) \
		clean-tests clean-journal
	$(call QUIET,'$(N_RM) plugins') \
	($(RM) $(PLUGIN_GENERATED_LIST); \
	$(RM) $(PLUGIN_LIB_DIR)/*.mli $(PLUGIN_LIB_DIR)/*.cm* \
		$(PLUGIN_LIB_DIR)/*.p)
	$(call QUIET,'$(N_RM) sources') \
	for d in . $(SRC_DIRS); do \
	  $(RM) $$d/*.cm* $$d/*.o $$d/*.a $$d/*.annot $$d/*~ $$d/*.output \
	   	$$d/*.annot $$d/\#*; \
	done
	$(call QUIET,'$(N_RM) generated files') \
	$(RM) $(GENERATED)
	$(call QUIET,'$(N_RM) binaries') \
	$(RM) bin/*.byte$(EXE) bin/*.opt$(EXE) bin/*.top$(EXE)

distclean-ocamlgraph:
	$(call QUIET,'$(N_RM) ocamlgraph') \
	if [ -f ocamlgraph/Makefile ]; then \
	  $(MAKE) --silent -C ocamlgraph distclean; \
	fi

distclean-why:
	$(call QUIET,'$(N_RM) why') \
	if [ -f why/Makefile ]; then \
	  $(MAKE) --silent -C why dist-clean; \
	fi

dist-clean distclean:: clean clean-doc \
			distclean-why distclean-ocamlgraph
	$(call QUIET,'$(N_RM) distribution') \
	$(RM) Makefile config.cache config.log config.status config.h

##########
# depend #
##########

PLUGIN_DEP_LIST:=$(PLUGIN_LIST) $(PLUGIN_DYN_LIST)

.PHONY: depend
.depend: $(PLUGIN_DEP_LIST:%=%_DEP)
depend:  $(PLUGIN_DEP_LIST:%=%_DEP_REDO)

.depend depend: $(GENERATED) $(PLUGIN_GENERATED_LIST)
	$(call QUIET,'$(N_DEP) why/.depend') \
	(if [ -f why/Makefile ]; then \
	  $(MAKE) --silent -C why .depend; \
	fi)
	$(call QUIET,'$(N_DEP) depend') \
	($(RM) .depend; \
	if test "$(PLUGIN_DEP_LIST)" != ""; then \
	  $(CAT) $(foreach d, $(PLUGIN_DEP_LIST), $(dir $d).depend) > .depend; \
	fi; \
	$(OCAMLDEP) $(DEP_FLAGS) $(FILES_FOR_OCAMLDEP) >> .depend; \
	$(SED) -i -e "s&why/[/A-Za-z_0-9]\+.cm[oxi]&&g" .depend; \
	$(SED) -i -e "s&$(OCAMLGRAPH_LOCAL)/view_graph/\([/A-Za-z_0-9]\+.cm[oxi]\)&lib/\1&g" .depend; \
	$(CHMOD_RO) .depend)

include .depend

#####################
# ptest development #
#####################

.PHONY: ptests

# Because Ocaml on MacOS X has issues with native threads
ptests: bin/ptests.byte$(EXE)

PTESTS_SRC=ptests/config.ml ptests/ptests.ml

ifeq ($(OCAMLWIN32),yes)
# OCaml on Win32 does not support vmthreads, use native ones.
bin/ptests.byte$(EXE): $(PTESTS_SRC)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) -I ptests -dtypes -thread -g -o $@ \
            unix.cma threads.cma str.cma $^
else
bin/ptests.byte$(EXE): $(PTESTS_SRC)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLC) -I ptests -dtypes -vmthread -g -o $@ \
            unix.cma threads.cma str.cma $^
endif

bin/ptests.opt$(EXE): $(PTESTS_SRC)
	$(call QUIET,'$(N_LINKING) $@') \
	$(OCAMLOPT) -I ptests -dtypes -thread -o $@ \
            unix.cmxa threads.cmxa str.cmxa $^

ptests/config.ml: Makefile
	$(call QUIET, '$(N_MAKING) $@') \
	($(RM) $@; \
	 $(ECHO) \
         "let default_suites = [" $(PLUGIN_TESTS_LIST:%='"%";') "]" > $@)

#######################
# source distribution #
#######################

STANDALONE_PLUGINS_FILES = \
	$(addprefix src/dummy/hello_world/, hello_world.ml Makefile) \
	$(addprefix src/dummy/untyped_metrics/, count_for.ml Makefile)

DISTRIB_FILES+= $(PLUGIN_DISTRIBUTED_LIST) $(PLUGINS_DIST_DOC_LIST) $(STANDALONE_PLUGINS_FILES)

EXPORT=frama-c-$(VERSION)

MANUALS= doc/architecture/archi.pdf doc/developer/developer.pdf \
	doc/speclang/acsl-implementation.pdf \
	doc/valviewer/doc_valviewer_en.pdf
.PHONY: $(MANUALS)

doc/architecture/archi.pdf:
	$(MAKE) -C doc/architecture

doc/developer/developer.pdf:
	$(MAKE) -C doc/developer

doc/speclang/acsl-implementation.pdf:
	$(MAKE) -C doc/speclang acsl-implementation.pdf

doc/valviewer/%:
	$(MAKE) -C doc/valviewer $(basename $@)

doc-distrib: $(PLUGIN_DIST_DOC_LIST) $(MANUALS)
	$(MKDIR) doc/manuals
	cp doc/developer/developer.pdf doc/manuals/plug-in_development_guide.pdf
	cp doc/speclang/acsl-implementation.pdf doc/manuals/acsl-implementation.pdf
	cp doc/valviewer/doc_valviewer_en.pdf doc/manuals/frama-c-manual-en.pdf

clean-distrib: dist-clean
	rm -fr $(EXPORT) $(EXPORT).tar.gz

src-distrib: doc-distrib src-distrib-ocamlgraph \
             $(PLUGIN_DIST_EXTERNAL_LIST)
	$(TAR) cf tmp.tar $(DISTRIB_FILES)
	$(MKDIR) $(EXPORT)/bin
	$(MKDIR) $(EXPORT)/lib/plugins
	$(MKDIR) $(EXPORT)/external
	cd $(EXPORT); $(TAR) xf ../tmp.tar;
	rm tmp.tar
	for dir in $(EXPORT)/tests/*; do \
	  $(MKDIR) $$dir/result; \
	  $(MKDIR) $$dir/oracle; \
        done
	$(TAR) czf $(EXPORT).tar.gz $(EXPORT)
	$(CP) $(EXPORT).tar.gz doc/www/src/download

bin-distrib: clean configure
	$(RM) -fr $(VERSION)
	./configure --prefix `pwd`/$(VERSION) $(CONFIG_DISTRIB_BIN)
	$(MAKE)
	$(MAKE) install
	if [ -d why ]; then \
	  $(MAKE) -C why install; \
	fi
	$(CP) README $(VERSION)

distrib: src-distrib bin-distrib

ifeq (@OCAMLGRAPH_LOCAL@,"")
src-distrib-ocamlgraph:
	@ $(ECHO) "Can not make distrib tar ball without local ocamlgraph installation"
	@ exit 2
else
src-distrib-ocamlgraph:
	$(MKDIR) $(EXPORT)
	$(CP) ocamlgraph.tar.gz $(EXPORT)
endif

ifeq (@JESSIE_LOCAL@,yes)
src-distrib-jessie:
	$(MAKE) -C @WHYDISTRIB@ tarball-for-framac
# Resulting tarball in @WHYDISTRIB@/export/why-for-framac.tar.gz
	$(MKDIR) $(EXPORT)
	cd $(EXPORT); $(TAR) zxf ../@WHYDISTRIB@/export/why-for-framac.tar.gz
	mv $(EXPORT)/why-* $(EXPORT)/why
else
src-distrib-jessie:
	@ $(ECHO) "Can not make distrib tar ball without local why installation"
	@ exit 2
endif


###############################################################################
# Local Variables:
# compile-command: "LC_ALL=C make"
# End:
