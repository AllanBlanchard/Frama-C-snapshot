type token =
  | IDENTIFIER of (string)
  | STRING_LITERAL of (string)
  | TYPENAME of (string)
  | CONSTANT of (Logic_ptree.constant)
  | LPAR
  | RPAR
  | IF
  | ELSE
  | COLON
  | COLON2
  | COLONCOLON
  | DOT
  | DOTDOT
  | DOTDOTDOT
  | INT
  | INTEGER
  | REAL
  | FLOAT
  | LT
  | GT
  | LE
  | GE
  | EQ
  | NE
  | COMMA
  | ARROW
  | EQUAL
  | FORALL
  | EXISTS
  | IFF
  | IMPLIES
  | AND
  | OR
  | NOT
  | TRUE
  | FALSE
  | OLD
  | AT
  | RESULT
  | BLOCK_LENGTH
  | BASE_ADDR
  | VALID
  | VALID_INDEX
  | VALID_RANGE
  | FRESH
  | DOLLAR
  | QUESTION
  | MINUS
  | PLUS
  | STAR
  | AMP
  | SLASH
  | PERCENT
  | LSQUARE
  | RSQUARE
  | EOF
  | GLOBAL
  | INVARIANT
  | VARIANT
  | DECREASES
  | FOR
  | LABEL
  | ASSERT
  | SEMICOLON
  | NULL
  | EMPTY
  | REQUIRES
  | ENSURES
  | ASSIGNS
  | LOOP
  | NOTHING
  | SLICE
  | IMPACT
  | PRAGMA
  | FROM
  | READS
  | LOGIC
  | PREDICATE
  | AXIOM
  | LEMMA
  | LBRACE
  | RBRACE
  | GHOST
  | VOID
  | CHAR
  | SIGNED
  | UNSIGNED
  | SHORT
  | LONG
  | DOUBLE
  | STRUCT
  | ENUM
  | UNION
  | BSUNION
  | INTER
  | LTCOLON
  | COLONGT
  | TYPE
  | BEHAVIOR
  | BEHAVIORS
  | ASSUMES
  | COMPLETE
  | DISJOINT
  | TERMINATES
  | HAT
  | HATHAT
  | PIPE
  | TILDE
  | GTGT
  | LTLT
  | SIZEOF
  | LAMBDA
  | TYPEOF
  | BSTYPE

open Parsing;;
# 27 "cil/src/logic/logic_parser.mly"

  open Cil
  open Cil_types
  open Logic_ptree
  open Logic_const

  let loc () = (symbol_start_pos (), symbol_end_pos ())
  let loc_i i = (rhs_start i, rhs_end i)
  let info x = { lexpr_node = x; lexpr_loc = loc () }
  let loc_info loc x = { lexpr_node = x; lexpr_loc = loc }
  let loc_start x = fst x.lexpr_loc
  let loc_end x = snd x.lexpr_loc

  type sense_of_relation = Unknown | Equal | Disequal | Less | Greater

  let relation_sense rel sense =
    match rel, sense with
        Eq, _ -> sense, true
      | Neq, Unknown -> Disequal, true (* No chain of disequality for now*)
      | (Gt|Ge), (Unknown|Equal|Greater) -> Greater, true
      | (Lt|Le), (Unknown|Equal|Less) -> Less, true
      | _ -> sense, false

# 143 "cil/src/logic/logic_parser.ml"
let yytransl_const = [|
  261 (* LPAR *);
  262 (* RPAR *);
  263 (* IF *);
  264 (* ELSE *);
  265 (* COLON *);
  266 (* COLON2 *);
  267 (* COLONCOLON *);
  268 (* DOT *);
  269 (* DOTDOT *);
  270 (* DOTDOTDOT *);
  271 (* INT *);
  272 (* INTEGER *);
  273 (* REAL *);
  274 (* FLOAT *);
  275 (* LT *);
  276 (* GT *);
  277 (* LE *);
  278 (* GE *);
  279 (* EQ *);
  280 (* NE *);
  281 (* COMMA *);
  282 (* ARROW *);
  283 (* EQUAL *);
  284 (* FORALL *);
  285 (* EXISTS *);
  286 (* IFF *);
  287 (* IMPLIES *);
  288 (* AND *);
  289 (* OR *);
  290 (* NOT *);
  291 (* TRUE *);
  292 (* FALSE *);
  293 (* OLD *);
  294 (* AT *);
  295 (* RESULT *);
  296 (* BLOCK_LENGTH *);
  297 (* BASE_ADDR *);
  298 (* VALID *);
  299 (* VALID_INDEX *);
  300 (* VALID_RANGE *);
  301 (* FRESH *);
  302 (* DOLLAR *);
  303 (* QUESTION *);
  304 (* MINUS *);
  305 (* PLUS *);
  306 (* STAR *);
  307 (* AMP *);
  308 (* SLASH *);
  309 (* PERCENT *);
  310 (* LSQUARE *);
  311 (* RSQUARE *);
    0 (* EOF *);
  312 (* GLOBAL *);
  313 (* INVARIANT *);
  314 (* VARIANT *);
  315 (* DECREASES *);
  316 (* FOR *);
  317 (* LABEL *);
  318 (* ASSERT *);
  319 (* SEMICOLON *);
  320 (* NULL *);
  321 (* EMPTY *);
  322 (* REQUIRES *);
  323 (* ENSURES *);
  324 (* ASSIGNS *);
  325 (* LOOP *);
  326 (* NOTHING *);
  327 (* SLICE *);
  328 (* IMPACT *);
  329 (* PRAGMA *);
  330 (* FROM *);
  331 (* READS *);
  332 (* LOGIC *);
  333 (* PREDICATE *);
  334 (* AXIOM *);
  335 (* LEMMA *);
  336 (* LBRACE *);
  337 (* RBRACE *);
  338 (* GHOST *);
  339 (* VOID *);
  340 (* CHAR *);
  341 (* SIGNED *);
  342 (* UNSIGNED *);
  343 (* SHORT *);
  344 (* LONG *);
  345 (* DOUBLE *);
  346 (* STRUCT *);
  347 (* ENUM *);
  348 (* UNION *);
  349 (* BSUNION *);
  350 (* INTER *);
  351 (* LTCOLON *);
  352 (* COLONGT *);
  353 (* TYPE *);
  354 (* BEHAVIOR *);
  355 (* BEHAVIORS *);
  356 (* ASSUMES *);
  357 (* COMPLETE *);
  358 (* DISJOINT *);
  359 (* TERMINATES *);
  360 (* HAT *);
  361 (* HATHAT *);
  362 (* PIPE *);
  363 (* TILDE *);
  364 (* GTGT *);
  365 (* LTLT *);
  366 (* SIZEOF *);
  367 (* LAMBDA *);
  368 (* TYPEOF *);
  369 (* BSTYPE *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* STRING_LITERAL *);
  259 (* TYPENAME *);
  260 (* CONSTANT *);
    0|]

let yylhs = "\255\255\
\004\000\005\000\006\000\006\000\007\000\007\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\018\000\018\000\018\000\018\000\018\000\018\000\
\012\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\010\000\
\010\000\019\000\019\000\017\000\020\000\020\000\020\000\020\000\
\020\000\023\000\023\000\024\000\024\000\024\000\021\000\022\000\
\022\000\027\000\027\000\027\000\027\000\026\000\026\000\026\000\
\028\000\028\000\029\000\031\000\032\000\013\000\035\000\035\000\
\030\000\030\000\037\000\037\000\034\000\034\000\038\000\038\000\
\038\000\038\000\038\000\038\000\040\000\040\000\025\000\025\000\
\039\000\039\000\036\000\036\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\033\000\033\000\041\000\
\042\000\043\000\044\000\045\000\047\000\048\000\049\000\050\000\
\050\000\052\000\052\000\053\000\053\000\054\000\054\000\054\000\
\055\000\055\000\056\000\056\000\058\000\057\000\059\000\059\000\
\060\000\060\000\060\000\003\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\063\000\063\000\063\000\063\000\068\000\
\068\000\069\000\070\000\070\000\064\000\064\000\066\000\061\000\
\061\000\071\000\071\000\071\000\071\000\071\000\074\000\067\000\
\075\000\072\000\072\000\073\000\073\000\065\000\051\000\051\000\
\051\000\076\000\046\000\046\000\077\000\078\000\078\000\079\000\
\079\000\079\000\079\000\011\000\081\000\081\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\015\000\015\000\080\000\080\000\014\000\002\000\084\000\
\084\000\083\000\083\000\083\000\083\000\083\000\085\000\085\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\000\000\000\000\000\000"

let yylen = "\002\000\
\000\000\000\000\000\000\001\000\001\000\003\000\001\000\002\000\
\002\000\001\000\001\000\004\000\006\000\008\000\004\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\002\000\002\000\002\000\002\000\002\000\004\000\
\004\000\004\000\006\000\004\000\004\000\001\000\004\000\007\000\
\004\000\001\000\003\000\003\000\003\000\003\000\004\000\003\000\
\003\000\003\000\004\000\004\000\001\000\004\000\004\000\005\000\
\007\000\007\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\004\000\
\004\000\003\000\003\000\003\000\005\000\003\000\001\000\002\000\
\003\000\000\000\001\000\001\000\001\000\003\000\003\000\002\000\
\004\000\001\000\002\000\001\000\004\000\004\000\002\000\001\000\
\002\000\001\000\004\000\003\000\004\000\000\000\001\000\003\000\
\001\000\003\000\001\000\001\000\004\000\002\000\001\000\003\000\
\002\000\002\000\002\000\002\000\000\000\001\000\001\000\001\000\
\002\000\002\000\003\000\002\000\003\000\004\000\001\000\002\000\
\003\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\001\000\002\000\002\000\001\000\001\000\002\000\
\002\000\001\000\002\000\002\000\003\000\002\000\003\000\002\000\
\003\000\003\000\003\000\004\000\004\000\001\000\001\000\002\000\
\002\000\002\000\002\000\001\000\004\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\001\000\000\000\004\000\000\000\001\000\004\000\004\000\004\000\
\000\000\005\000\003\000\001\000\002\000\003\000\001\000\003\000\
\000\000\005\000\005\000\004\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\009\000\003\000\001\000\007\000\004\000\004\000\000\000\
\003\000\001\000\001\000\006\000\003\000\003\000\002\000\004\000\
\002\000\004\000\003\000\005\000\004\000\004\000\001\000\003\000\
\003\000\001\000\001\000\003\000\001\000\006\000\003\000\001\000\
\004\000\004\000\007\000\001\000\000\000\003\000\002\000\004\000\
\004\000\003\000\004\000\006\000\006\000\005\000\005\000\006\000\
\001\000\001\000\003\000\001\000\003\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\001\000\001\000\001\000\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\244\000\017\000\000\000\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\000\000\000\000\000\014\001\
\000\000\001\000\201\000\001\000\001\000\197\000\199\000\200\000\
\000\000\000\000\000\000\001\000\001\000\001\000\001\000\000\000\
\198\000\203\000\202\000\130\001\000\000\000\000\204\000\205\000\
\206\000\207\000\012\001\001\001\013\001\218\000\219\000\000\000\
\000\000\000\000\000\000\000\000\010\001\001\000\131\001\000\000\
\000\000\139\000\133\000\134\000\158\000\135\000\136\000\000\000\
\000\000\143\000\000\000\159\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\060\000\061\000\062\000\063\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\001\000\001\000\223\000\225\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\001\000\000\000\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\094\001\095\001\096\001\097\001\098\001\
\099\001\100\001\101\001\102\001\103\001\104\001\105\001\106\001\
\107\001\108\001\109\001\110\001\111\001\112\001\113\001\123\001\
\114\001\122\001\124\001\125\001\115\001\116\001\117\001\118\001\
\119\001\120\001\121\001\126\001\127\001\128\001\011\001\000\000\
\001\000\209\000\001\000\000\000\001\000\247\000\001\000\009\001\
\007\001\000\000\001\000\001\000\001\000\000\000\181\000\000\000\
\000\000\000\000\140\000\137\000\144\000\000\000\141\000\138\000\
\145\000\000\000\150\000\000\000\160\000\161\000\162\000\163\000\
\045\000\046\000\000\000\000\000\127\000\000\000\000\000\110\000\
\118\000\119\000\000\000\000\000\092\000\088\000\000\000\000\000\
\000\000\098\000\095\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\024\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\222\000\002\000\001\000\000\000\221\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\131\000\000\000\132\000\
\000\000\002\000\000\000\001\000\001\000\001\000\000\000\001\000\
\001\000\000\000\250\000\016\001\000\000\000\000\000\000\227\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\189\000\000\000\000\000\000\000\000\000\
\000\000\149\000\000\000\151\000\000\000\155\000\000\000\000\000\
\128\000\000\000\000\000\121\000\000\000\000\000\124\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\087\000\000\000\034\000\001\000\037\000\036\000\
\012\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\
\054\000\055\000\032\000\033\000\000\000\051\000\052\000\000\000\
\026\000\025\000\081\000\039\000\000\000\001\000\001\000\168\000\
\169\000\192\000\001\000\000\000\214\000\001\000\215\000\177\000\
\000\000\234\000\002\000\176\000\000\000\000\000\230\000\229\000\
\000\000\000\000\116\000\115\000\174\000\001\000\000\000\000\000\
\006\001\000\000\000\000\000\000\001\000\251\000\000\000\000\000\
\000\000\001\000\000\000\002\000\224\000\226\000\249\000\002\000\
\248\000\179\000\000\000\000\000\000\000\000\000\187\000\000\000\
\001\000\001\000\001\000\196\000\165\000\000\000\156\000\157\000\
\125\000\000\000\123\000\000\000\000\000\105\000\107\000\000\000\
\000\000\000\000\000\000\100\000\000\000\000\000\089\000\000\000\
\000\000\000\000\000\000\000\000\056\000\006\000\000\000\000\000\
\003\001\000\000\000\000\001\000\211\000\175\000\000\000\000\000\
\228\000\000\000\000\000\241\000\001\000\000\000\000\000\002\000\
\246\000\000\000\000\000\254\000\255\000\000\000\000\000\173\000\
\172\000\183\000\184\000\182\000\190\000\000\000\000\000\000\000\
\000\000\167\000\130\000\126\000\000\000\114\000\113\000\094\000\
\093\000\101\000\099\000\035\000\013\000\000\000\000\000\000\000\
\000\000\000\001\220\000\000\000\233\000\232\000\236\000\109\000\
\238\000\005\001\001\000\000\000\170\000\253\000\252\000\002\000\
\000\000\000\000\000\000\000\000\217\000\104\000\106\000\000\000\
\058\000\057\000\040\000\213\000\000\000\112\000\171\000\001\000\
\186\000\194\000\195\000\014\000\243\000\000\000\210\000"

let yydgoto = "\004\000\
\107\001\060\000\079\000\165\000\248\001\108\001\109\001\037\000\
\038\000\157\000\039\000\097\000\098\000\016\002\142\001\158\001\
\104\000\158\000\100\000\105\000\106\000\091\001\086\001\087\001\
\092\001\052\002\093\001\053\002\054\002\055\002\056\002\160\001\
\192\001\080\001\088\002\057\002\193\001\081\001\082\001\083\001\
\152\001\166\000\020\002\095\002\180\001\002\002\175\001\176\000\
\155\001\003\002\004\002\080\000\054\001\055\001\188\001\056\001\
\186\001\057\001\167\000\191\001\044\002\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\153\001\069\000\070\000\
\071\000\072\000\073\000\005\002\006\002\074\000\178\000\018\002\
\167\001\075\000\076\000\077\000\039\001\040\001"

let yysindex = "\228\001\
\136\012\059\013\221\254\000\000\000\000\000\000\041\011\221\013\
\221\013\040\013\000\000\000\000\048\255\070\255\000\000\108\255\
\150\255\215\255\236\255\039\000\041\000\040\013\040\013\040\013\
\040\013\000\000\000\000\136\012\043\000\057\000\040\013\069\000\
\221\013\084\000\094\000\018\012\000\000\168\001\036\255\000\000\
\197\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\129\000\151\255\252\255\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\000\000\184\010\219\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\122\000\
\130\000\025\000\005\001\121\001\000\000\000\000\000\000\058\000\
\119\000\000\000\000\000\000\000\000\000\000\000\000\000\129\255\
\196\255\000\000\013\255\000\000\147\000\147\000\062\255\010\000\
\158\000\163\000\169\255\162\000\147\000\155\255\046\000\108\000\
\152\000\000\000\125\000\025\255\038\255\136\012\136\012\136\012\
\136\012\136\012\136\012\136\012\136\012\025\255\025\255\025\255\
\025\255\211\008\136\012\136\012\025\255\041\011\126\000\136\012\
\177\003\136\012\136\012\136\012\136\012\136\012\136\012\136\012\
\136\012\136\012\147\000\000\000\000\000\000\000\000\000\000\000\
\000\000\147\000\040\013\040\013\040\013\040\013\040\013\136\012\
\040\013\140\011\040\013\040\013\000\000\040\013\136\012\136\012\
\000\000\000\000\136\012\136\000\147\000\180\000\176\000\144\000\
\000\000\000\000\000\000\000\000\000\000\209\000\221\013\000\000\
\049\255\206\000\207\000\210\000\000\000\169\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\010\
\000\000\000\000\000\000\172\000\000\000\000\000\000\000\000\000\
\000\000\178\000\000\000\000\000\000\000\112\000\000\000\123\000\
\098\255\221\013\000\000\000\000\000\000\107\255\000\000\000\000\
\000\000\109\255\000\000\208\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\013\169\255\000\000\136\012\193\255\000\000\
\000\000\000\000\240\255\136\012\000\000\000\000\241\255\147\000\
\046\000\000\000\000\000\095\255\251\255\136\012\027\012\136\012\
\099\002\172\012\205\002\206\004\065\011\018\013\217\013\102\012\
\147\000\041\011\228\013\219\000\000\000\220\000\182\012\236\000\
\136\012\006\013\244\000\061\000\061\000\072\255\066\255\182\002\
\000\000\200\000\206\255\103\255\000\000\000\000\237\255\237\255\
\025\255\025\255\025\255\149\000\201\000\025\255\025\255\000\000\
\012\255\012\255\168\001\251\000\018\012\179\000\238\000\001\001\
\018\012\000\000\000\000\000\000\247\255\000\000\205\000\211\000\
\215\000\232\011\216\000\217\000\253\000\000\000\169\255\000\000\
\169\255\000\000\009\001\000\000\000\000\000\000\109\000\000\000\
\000\000\022\001\000\000\000\000\019\001\136\012\223\000\000\000\
\228\000\229\000\136\012\233\000\221\254\234\000\237\000\240\000\
\136\012\058\000\000\000\000\000\213\000\230\000\250\000\023\001\
\029\001\000\000\044\001\000\000\047\001\000\000\025\255\054\001\
\000\000\018\012\024\001\000\000\240\255\221\013\000\000\000\000\
\221\013\136\012\241\255\068\001\251\255\221\013\136\012\018\012\
\155\255\000\000\000\000\018\012\000\000\000\000\000\000\000\000\
\000\000\136\012\136\012\000\000\053\001\069\255\152\255\136\012\
\000\000\000\000\000\000\000\000\018\012\000\000\000\000\136\012\
\000\000\000\000\000\000\000\000\080\001\000\000\000\000\000\000\
\000\000\000\000\000\000\030\001\000\000\000\000\000\000\000\000\
\018\012\000\000\000\000\000\000\014\001\065\001\000\000\000\000\
\028\001\221\013\000\000\000\000\000\000\000\000\083\001\079\001\
\000\000\025\001\221\013\101\001\000\000\000\000\136\012\046\001\
\048\001\000\000\041\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\058\000\058\000\018\009\000\000\105\001\
\000\000\000\000\000\000\000\000\000\000\221\013\000\000\000\000\
\000\000\061\001\000\000\114\001\096\001\000\000\000\000\046\000\
\046\000\116\001\070\001\000\000\117\001\072\001\000\000\124\001\
\062\013\251\013\136\012\136\012\000\000\000\000\018\012\136\012\
\000\000\069\001\071\001\000\000\000\000\000\000\056\012\136\012\
\000\000\111\001\127\001\000\000\000\000\118\001\113\001\000\000\
\000\000\073\001\076\001\000\000\000\000\221\013\136\001\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\081\001\082\001\
\084\001\000\000\000\000\000\000\202\013\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\012\174\005\170\009\
\137\001\000\000\000\000\085\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\221\013\000\000\000\000\000\000\000\000\
\119\001\123\000\098\255\098\255\000\000\000\000\000\000\139\013\
\000\000\000\000\000\000\000\000\135\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\097\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\006\002\000\000\000\000\000\000\146\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\162\002\000\000\134\009\224\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\001\
\000\000\000\000\000\000\000\000\000\000\166\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\168\002\000\000\000\000\000\000\000\000\004\000\
\123\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\001\000\000\151\001\000\000\000\000\000\000\000\000\156\001\
\000\000\000\000\081\005\000\000\000\000\000\000\000\000\000\000\
\230\255\000\000\000\000\148\005\224\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\213\005\023\006\086\006\
\149\006\000\000\172\001\172\001\212\006\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\146\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\115\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\179\002\
\000\000\000\000\000\000\216\012\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\007\000\
\009\000\000\000\000\000\000\000\000\000\218\001\000\000\000\000\
\000\000\029\002\000\000\135\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\130\001\035\004\000\000\
\000\000\000\000\000\000\216\255\000\000\000\000\177\255\000\000\
\000\000\000\000\000\000\000\000\029\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\010\070\010\214\000\026\010\000\000\
\000\000\199\009\178\003\254\009\000\000\000\000\141\008\204\008\
\019\007\082\007\145\007\156\001\000\000\208\007\015\008\000\000\
\011\009\074\009\144\009\000\000\227\000\000\000\113\255\000\000\
\113\000\000\000\000\000\000\000\000\000\000\000\000\000\123\001\
\000\000\000\000\000\000\216\012\070\000\000\000\143\000\000\000\
\143\000\000\000\120\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\002\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\000\000\193\002\000\000\
\175\001\000\000\245\002\000\000\056\003\000\000\078\008\000\000\
\000\000\030\000\000\000\000\000\102\004\190\001\000\000\000\000\
\190\001\130\001\179\255\000\000\051\255\190\001\130\001\089\002\
\201\255\000\000\000\000\214\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\161\013\000\000\000\000\
\000\000\000\000\000\000\000\000\086\010\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\169\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\185\255\000\000\000\000\000\000\134\001\251\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\126\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\004\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\005\000\000\000\000\202\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\010\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\203\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\009\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\049\000\000\000\000\000\222\255\193\254\086\002\102\255\000\000\
\081\000\074\001\248\255\060\002\160\000\249\000\121\254\064\000\
\013\000\000\000\214\254\000\000\131\001\194\254\010\001\141\001\
\167\255\106\255\142\001\000\000\124\000\021\254\093\255\000\000\
\019\255\185\254\103\000\100\255\061\002\176\001\203\254\174\001\
\217\255\027\000\247\000\000\000\000\000\111\254\000\000\000\000\
\206\001\000\000\000\000\093\001\090\254\000\000\116\000\000\000\
\000\000\000\000\236\254\054\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\002\000\000\232\000\000\000\000\000\
\000\000\000\000\000\000\203\000\000\000\000\000\249\255\194\000\
\000\000\000\000\000\000\208\002\240\001\000\000"

let yytablesize = 3941
let yytable = "\102\000\
\102\000\109\000\164\000\180\000\140\001\168\000\185\000\163\000\
\193\000\079\001\163\000\159\001\088\001\109\000\109\000\109\000\
\109\000\175\000\161\001\039\002\173\001\107\000\109\000\139\000\
\102\000\204\001\212\001\067\001\015\002\207\001\078\000\005\000\
\219\001\032\002\096\000\203\001\139\000\146\000\050\001\087\002\
\159\000\208\001\159\000\163\000\160\000\127\000\179\000\180\000\
\182\000\036\000\146\000\188\000\110\000\096\000\191\000\096\000\
\097\000\235\000\180\000\147\000\148\000\149\000\005\000\150\000\
\151\000\152\000\123\000\164\001\235\000\005\000\099\000\103\000\
\103\000\159\000\111\000\097\000\122\000\160\000\152\000\177\000\
\177\000\177\000\177\000\249\001\070\001\071\001\072\001\011\002\
\005\000\012\002\108\000\096\000\072\001\085\001\090\001\005\000\
\103\000\132\000\013\002\089\001\068\001\069\001\118\000\119\000\
\120\000\121\000\153\000\154\000\191\000\096\000\073\002\125\000\
\112\000\097\000\136\002\161\000\135\000\161\000\077\001\153\000\
\154\000\194\001\135\000\196\001\098\002\099\002\100\002\250\001\
\165\001\151\001\125\001\097\000\002\001\091\002\163\000\163\000\
\154\001\126\001\109\000\109\000\109\000\109\000\109\000\059\001\
\109\000\109\000\109\000\109\000\161\000\109\000\159\001\051\002\
\087\002\135\000\113\000\005\000\147\001\161\001\097\001\098\001\
\099\001\100\001\101\001\102\001\103\001\104\001\157\001\059\002\
\163\001\136\000\137\000\138\000\062\002\076\001\111\001\136\000\
\114\001\138\000\116\001\117\001\118\001\119\001\120\001\121\001\
\122\001\123\001\124\001\143\001\144\001\099\000\127\002\138\002\
\115\001\002\001\195\001\078\002\197\001\076\001\189\001\190\001\
\132\001\090\000\177\000\091\000\077\001\098\000\136\000\170\001\
\141\001\237\000\063\001\145\001\060\001\069\000\068\002\061\001\
\062\001\099\000\077\001\114\000\096\002\082\000\078\001\173\000\
\097\002\098\000\078\000\127\001\128\001\129\001\130\001\131\001\
\069\002\134\001\135\001\137\001\138\001\132\000\139\001\090\000\
\115\000\091\000\079\001\201\001\206\001\209\001\078\001\237\000\
\139\000\110\002\111\002\149\002\107\002\162\000\098\000\214\001\
\135\000\090\000\237\000\091\000\177\001\178\001\146\000\098\000\
\174\001\163\000\163\000\182\001\179\001\184\001\082\000\073\001\
\163\000\154\001\163\000\028\002\103\002\104\002\041\001\064\001\
\133\002\098\000\065\001\066\001\082\002\112\001\149\000\049\000\
\150\000\151\000\152\000\083\000\084\000\078\001\210\001\130\000\
\131\000\132\000\133\000\116\000\142\000\117\000\005\000\123\000\
\215\001\157\001\089\001\045\001\251\001\136\000\084\000\138\000\
\134\000\136\001\058\002\252\001\135\000\124\000\180\000\061\002\
\106\002\185\000\109\000\193\000\174\000\079\001\108\000\079\001\
\151\002\126\000\108\000\153\000\154\000\070\002\240\000\085\001\
\090\001\242\000\240\000\090\001\083\000\242\000\217\001\046\001\
\128\000\108\000\130\000\131\000\132\000\133\000\108\000\077\001\
\229\001\230\001\129\000\047\001\240\000\180\000\159\001\242\000\
\180\000\180\000\180\000\185\000\185\000\161\001\188\000\135\000\
\181\000\136\000\137\000\138\000\009\002\180\000\231\001\108\000\
\049\001\163\000\043\001\108\000\051\001\052\001\202\001\088\001\
\024\002\025\002\044\001\019\002\202\001\163\000\163\000\021\002\
\240\000\058\001\159\001\242\000\088\001\245\000\216\001\117\000\
\220\001\161\001\239\000\005\000\240\000\188\000\146\000\242\000\
\188\000\188\000\124\001\199\001\180\000\053\001\103\000\180\000\
\180\000\237\001\117\000\074\001\136\000\137\000\138\000\117\000\
\075\001\103\000\094\001\022\002\002\000\121\002\084\001\002\000\
\095\001\245\000\130\000\131\000\132\000\133\000\239\000\023\002\
\149\001\169\000\170\000\096\001\113\001\245\000\143\001\017\002\
\154\002\155\002\239\000\134\000\171\000\157\001\146\001\135\000\
\157\001\172\000\001\002\241\001\148\001\157\001\150\001\074\002\
\085\001\156\001\166\001\075\002\163\000\040\002\185\001\168\001\
\163\000\147\000\169\001\069\000\187\001\085\001\198\001\069\000\
\233\001\234\001\069\000\001\002\001\000\002\000\003\000\171\001\
\078\000\038\002\176\001\019\002\078\000\090\002\069\000\078\000\
\181\001\236\001\163\000\069\000\069\000\069\000\069\000\094\002\
\017\002\239\001\135\000\078\000\136\000\137\000\138\000\242\001\
\244\001\157\001\202\001\245\001\069\000\178\000\246\001\202\001\
\163\000\247\001\157\001\253\001\069\000\014\002\254\001\010\002\
\143\001\069\000\065\002\066\002\069\000\255\001\007\002\008\002\
\077\002\078\000\026\002\027\002\148\000\029\002\078\000\069\000\
\071\002\078\000\030\002\031\002\124\002\157\001\069\000\033\002\
\035\002\163\000\045\002\036\002\078\000\142\000\037\002\090\001\
\090\001\142\000\142\000\078\000\043\002\046\002\142\000\041\002\
\142\000\142\000\047\002\049\002\041\000\048\002\069\000\142\000\
\142\000\142\000\142\000\142\000\142\000\142\000\142\000\001\002\
\042\002\060\002\142\000\142\000\142\000\142\000\050\002\067\002\
\052\000\053\000\054\000\055\000\072\002\157\001\076\002\079\002\
\071\000\080\002\081\002\142\000\142\000\142\000\142\000\142\000\
\142\000\142\000\142\000\142\000\157\001\056\000\084\002\085\002\
\142\000\086\002\089\002\142\000\092\002\252\001\093\002\017\002\
\158\002\102\002\078\001\119\002\120\002\163\000\142\000\108\002\
\109\002\112\002\114\002\157\001\113\002\142\000\115\002\001\002\
\001\002\116\002\128\002\122\002\129\002\123\002\152\000\134\002\
\131\002\132\002\135\002\142\000\142\000\137\002\147\002\139\002\
\140\002\152\002\141\002\148\002\142\000\142\000\142\000\146\000\
\142\000\142\000\157\002\146\000\146\000\143\001\082\000\159\002\
\146\000\129\001\146\000\146\000\001\000\208\000\144\002\008\001\
\083\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
\146\000\003\000\015\001\139\000\146\000\146\000\146\000\146\000\
\082\000\212\000\140\000\141\000\142\000\143\000\144\000\145\000\
\216\000\146\000\166\000\102\000\231\000\146\000\146\000\146\000\
\146\000\146\000\146\000\146\000\146\000\146\000\004\001\103\000\
\111\000\110\001\146\000\133\001\243\001\146\000\064\002\147\000\
\148\000\149\000\147\000\150\000\151\000\152\000\147\000\147\000\
\146\000\218\001\063\002\147\000\211\001\147\000\147\000\146\000\
\143\002\213\001\150\002\162\001\147\000\147\000\147\000\147\000\
\147\000\147\000\147\000\147\000\153\000\146\000\146\000\147\000\
\147\000\147\000\147\000\200\001\205\001\153\002\146\000\146\000\
\146\000\183\001\146\000\146\000\083\002\042\001\153\000\154\000\
\147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
\147\000\034\002\105\002\155\000\156\000\147\000\130\002\172\001\
\147\000\126\002\048\001\000\000\000\000\148\000\000\000\000\000\
\000\000\148\000\148\000\147\000\000\000\000\000\148\000\000\000\
\148\000\148\000\147\000\000\000\000\000\000\000\000\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\148\000\154\000\
\147\000\147\000\148\000\148\000\148\000\148\000\000\000\000\000\
\178\000\147\000\147\000\147\000\000\000\147\000\147\000\000\000\
\178\000\178\000\000\000\148\000\148\000\148\000\148\000\148\000\
\148\000\148\000\148\000\148\000\000\000\000\000\000\000\000\000\
\148\000\000\000\000\000\148\000\000\000\000\000\071\000\000\000\
\000\000\000\000\071\000\000\000\000\000\071\000\148\000\178\000\
\221\001\178\000\178\000\178\000\178\000\148\000\000\000\000\000\
\000\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\164\000\148\000\148\000\000\000\000\000\000\000\
\130\000\131\000\132\000\133\000\148\000\148\000\148\000\152\000\
\148\000\148\000\000\000\152\000\152\000\000\000\000\000\071\000\
\152\000\134\000\152\000\152\000\071\000\135\000\000\000\071\000\
\000\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
\152\000\000\000\071\000\000\000\152\000\152\000\152\000\152\000\
\000\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\000\000\152\000\152\000\152\000\
\152\000\152\000\152\000\152\000\152\000\152\000\000\000\240\001\
\000\000\000\000\152\000\000\000\000\000\152\000\000\000\000\000\
\000\000\000\000\136\000\137\000\138\000\000\000\000\000\000\000\
\152\000\000\000\223\001\130\000\131\000\132\000\133\000\152\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\134\000\152\000\152\000\000\000\
\135\000\000\000\130\000\131\000\132\000\133\000\152\000\152\000\
\152\000\000\000\152\000\152\000\000\000\153\000\000\000\000\000\
\000\000\153\000\153\000\134\000\000\000\000\000\153\000\135\000\
\153\000\153\000\000\000\000\000\000\000\000\000\000\000\153\000\
\153\000\153\000\153\000\153\000\153\000\153\000\153\000\000\000\
\000\000\000\000\153\000\153\000\153\000\153\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\000\137\000\138\000\
\000\000\000\000\120\000\153\000\153\000\153\000\153\000\153\000\
\153\000\153\000\153\000\153\000\000\000\000\000\000\000\000\000\
\153\000\000\000\000\000\153\000\136\000\137\000\138\000\000\000\
\154\000\000\000\000\000\000\000\154\000\154\000\153\000\000\000\
\000\000\154\000\000\000\154\000\154\000\153\000\000\000\000\000\
\000\000\000\000\154\000\154\000\154\000\154\000\154\000\154\000\
\154\000\154\000\000\000\153\000\153\000\154\000\154\000\154\000\
\154\000\000\000\000\000\000\000\153\000\153\000\153\000\000\000\
\153\000\153\000\000\000\000\000\000\000\122\000\154\000\154\000\
\154\000\154\000\154\000\154\000\154\000\154\000\154\000\000\000\
\000\000\000\000\000\000\154\000\000\000\000\000\154\000\000\000\
\000\000\000\000\000\000\164\000\000\000\000\000\000\000\164\000\
\164\000\154\000\000\000\000\000\164\000\000\000\164\000\164\000\
\154\000\000\000\000\000\000\000\000\000\000\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\000\000\154\000\154\000\
\164\000\164\000\164\000\164\000\000\000\000\000\000\000\154\000\
\154\000\154\000\000\000\154\000\154\000\000\000\000\000\000\000\
\041\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\000\000\081\000\000\000\000\000\164\000\070\000\
\000\000\164\000\000\000\070\000\000\000\000\000\070\000\082\000\
\083\000\084\000\085\000\000\000\164\000\000\000\000\000\000\000\
\000\000\000\000\070\000\164\000\000\000\000\000\000\000\070\000\
\070\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\164\000\164\000\000\000\000\000\000\000\000\000\000\000\
\070\000\000\000\164\000\164\000\164\000\042\000\164\000\164\000\
\070\000\042\000\000\000\042\000\042\000\070\000\000\000\000\000\
\070\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\070\000\000\000\042\000\042\000\042\000\
\042\000\000\000\070\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\101\000\129\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\000\000\070\000\042\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\120\000\000\000\000\000\000\000\000\000\
\120\000\042\000\000\000\000\000\120\000\000\000\120\000\120\000\
\042\000\000\000\000\000\000\000\000\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\000\000\042\000\042\000\
\120\000\120\000\120\000\120\000\000\000\000\000\000\000\042\000\
\042\000\042\000\000\000\042\000\042\000\000\000\000\000\000\000\
\117\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\000\000\120\000\000\000\000\000\000\000\000\000\120\000\000\000\
\000\000\120\000\000\000\000\000\000\000\000\000\122\000\000\000\
\000\000\000\000\000\000\122\000\120\000\000\000\000\000\122\000\
\000\000\122\000\122\000\120\000\000\000\000\000\000\000\000\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\000\000\120\000\120\000\122\000\122\000\122\000\122\000\000\000\
\000\000\000\000\120\000\120\000\120\000\000\000\120\000\120\000\
\000\000\000\000\000\000\009\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\000\000\122\000\000\000\000\000\000\000\
\000\000\122\000\000\000\000\000\122\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\122\000\
\000\000\000\000\041\000\000\000\041\000\041\000\122\000\000\000\
\000\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\122\000\122\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\122\000\122\000\122\000\
\000\000\122\000\122\000\224\001\027\000\072\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\041\000\
\000\000\000\000\000\000\130\000\131\000\132\000\133\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\000\000\134\000\000\000\000\000\000\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\041\000\000\000\000\000\000\000\000\000\000\000\129\000\000\000\
\041\000\041\000\041\000\129\000\041\000\041\000\028\000\129\000\
\000\000\129\000\129\000\000\000\000\000\000\000\000\000\000\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\000\000\000\000\000\000\129\000\129\000\129\000\129\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\000\137\000\138\000\
\000\000\000\000\000\000\000\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\000\000\129\000\000\000\000\000\000\000\
\000\000\129\000\000\000\000\000\129\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\117\000\129\000\
\000\000\000\000\117\000\000\000\117\000\117\000\129\000\000\000\
\000\000\000\000\000\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\000\000\129\000\129\000\117\000\117\000\
\117\000\117\000\000\000\000\000\000\000\129\000\129\000\129\000\
\000\000\129\000\129\000\000\000\000\000\000\000\000\000\117\000\
\117\000\117\000\000\000\117\000\117\000\117\000\000\000\117\000\
\000\000\000\000\000\000\000\000\117\000\000\000\000\000\117\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\009\000\117\000\000\000\000\000\009\000\000\000\000\000\
\009\000\117\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\000\000\117\000\
\117\000\009\000\009\000\009\000\009\000\000\000\000\000\000\000\
\117\000\117\000\117\000\000\000\117\000\117\000\000\000\000\000\
\000\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\000\000\009\000\130\000\131\000\132\000\133\000\009\000\
\000\000\000\000\009\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\072\000\134\000\009\000\027\000\072\000\
\135\000\027\000\072\000\000\000\009\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\072\000\000\000\
\000\000\000\000\027\000\027\000\027\000\027\000\000\000\000\000\
\000\000\000\000\000\000\009\000\009\000\009\000\145\002\009\000\
\009\000\000\000\000\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\027\000\072\000\000\000\000\000\000\000\
\027\000\072\000\020\000\027\000\072\000\136\000\137\000\138\000\
\000\000\000\000\000\000\000\000\028\000\000\000\027\000\072\000\
\028\000\000\000\000\000\028\000\000\000\027\000\072\000\000\000\
\000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\000\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\000\000\000\000\000\000\000\000\027\000\027\000\027\000\000\000\
\027\000\027\000\000\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\000\000\028\000\000\000\000\000\
\000\000\021\000\028\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\030\000\
\028\000\000\000\030\000\000\000\000\000\000\000\000\000\028\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
\000\000\000\000\000\000\030\000\030\000\030\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\028\000\
\028\000\000\000\028\000\028\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\000\000\030\000\000\000\000\000\000\000\
\022\000\030\000\000\000\000\000\030\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\000\000\000\000\031\000\030\000\
\000\000\031\000\000\000\000\000\000\000\000\000\030\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\031\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\
\000\000\030\000\030\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\000\000\031\000\000\000\000\000\000\000\048\000\
\031\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\029\000\031\000\000\000\
\029\000\000\000\000\000\000\000\000\000\031\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\031\000\000\000\
\031\000\031\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\029\000\000\000\000\000\000\000\050\000\029\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\020\000\000\000\000\000\000\000\020\000\029\000\000\000\020\000\
\000\000\000\000\000\000\000\000\029\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
\020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\029\000\029\000\000\000\029\000\
\029\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\020\000\000\000\000\000\000\000\047\000\020\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\021\000\020\000\000\000\021\000\000\000\
\000\000\000\000\000\000\020\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
\021\000\021\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\020\000\020\000\000\000\020\000\020\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
\021\000\000\000\000\000\000\000\019\000\021\000\000\000\000\000\
\021\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\022\000\021\000\000\000\022\000\000\000\000\000\
\000\000\000\000\021\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\021\000\021\000\000\000\021\000\021\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\000\000\000\000\000\000\018\000\022\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\048\000\022\000\000\000\048\000\000\000\000\000\000\000\
\000\000\022\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\022\000\022\000\000\000\022\000\022\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\048\000\000\000\
\000\000\000\000\043\000\048\000\000\000\000\000\048\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\000\000\000\000\
\050\000\048\000\000\000\050\000\000\000\000\000\000\000\000\000\
\048\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\000\000\000\000\000\000\000\000\050\000\050\000\050\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\048\000\048\000\000\000\048\000\048\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\050\000\000\000\000\000\
\000\000\044\000\050\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\000\000\047\000\
\050\000\000\000\047\000\000\000\000\000\000\000\000\000\050\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\050\000\000\000\050\000\050\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\000\000\047\000\007\000\000\000\000\000\
\000\000\047\000\000\000\000\000\047\000\000\000\000\000\080\000\
\000\000\000\000\019\000\000\000\000\000\000\000\019\000\047\000\
\000\000\019\000\000\000\000\000\000\000\000\000\047\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\000\000\000\000\
\000\000\000\000\019\000\019\000\019\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\000\000\047\000\047\000\019\000\019\000\019\000\000\000\019\000\
\000\000\000\000\000\000\019\000\000\000\000\000\076\000\000\000\
\019\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\018\000\019\000\000\000\
\018\000\000\000\000\000\000\000\000\000\019\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\000\000\000\000\000\000\
\000\000\018\000\018\000\018\000\018\000\000\000\000\000\000\000\
\130\000\131\000\132\000\133\000\019\000\019\000\019\000\000\000\
\019\000\019\000\018\000\018\000\018\000\075\000\018\000\000\000\
\000\000\134\000\018\000\000\000\000\000\135\000\000\000\018\000\
\000\000\000\000\018\000\000\000\000\000\000\000\105\001\000\000\
\043\000\000\000\000\000\000\000\043\000\018\000\000\000\043\000\
\000\000\068\000\067\000\000\000\018\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\000\000\000\000\000\000\130\000\
\131\000\132\000\133\000\018\000\018\000\018\000\000\000\018\000\
\018\000\043\000\136\000\137\000\106\001\043\000\000\000\000\000\
\134\000\043\000\000\000\000\000\135\000\066\000\043\000\000\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\044\000\
\101\002\000\000\000\000\044\000\043\000\073\000\044\000\000\000\
\000\000\000\000\000\000\043\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\077\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\043\000\043\000\000\000\043\000\043\000\
\044\000\136\000\137\000\138\000\044\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\044\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\
\000\000\000\000\007\000\044\000\000\000\080\000\000\000\000\000\
\000\000\080\000\044\000\000\000\080\000\000\000\007\000\000\000\
\000\000\000\000\000\000\007\000\007\000\007\000\007\000\000\000\
\080\000\000\000\000\000\000\000\000\000\080\000\080\000\080\000\
\080\000\044\000\044\000\044\000\007\000\044\000\044\000\000\000\
\007\000\000\000\000\000\000\000\007\000\000\000\080\000\000\000\
\000\000\007\000\080\000\000\000\007\000\000\000\080\000\130\000\
\131\000\132\000\133\000\080\000\076\000\000\000\080\000\007\000\
\076\000\000\000\000\000\076\000\000\000\000\000\007\000\000\000\
\134\000\080\000\000\000\000\000\135\000\000\000\000\000\076\000\
\080\000\000\000\000\000\000\000\076\000\076\000\076\000\076\000\
\000\000\000\000\000\000\000\000\000\000\007\000\007\000\007\000\
\000\000\000\000\000\000\000\000\000\000\076\000\000\000\080\000\
\080\000\080\000\146\002\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\076\000\075\000\000\000\076\000\000\000\075\000\
\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\076\000\136\000\137\000\138\000\000\000\000\000\075\000\076\000\
\000\000\000\000\000\000\075\000\075\000\075\000\075\000\068\000\
\067\000\000\000\000\000\068\000\067\000\000\000\068\000\067\000\
\000\000\000\000\000\000\000\000\075\000\000\000\076\000\076\000\
\076\000\000\000\068\000\067\000\075\000\000\000\000\000\068\000\
\068\000\075\000\068\000\000\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\068\000\067\000\000\000\066\000\000\000\000\000\075\000\066\000\
\068\000\067\000\066\000\000\000\000\000\068\000\067\000\000\000\
\068\000\067\000\000\000\073\000\000\000\000\000\066\000\073\000\
\000\000\000\000\073\000\068\000\067\000\000\000\075\000\075\000\
\000\000\000\000\068\000\067\000\077\000\000\000\073\000\000\000\
\077\000\000\000\000\000\077\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\000\000\000\000\077\000\
\000\000\066\000\000\000\000\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\000\000\000\000\000\066\000\
\000\000\073\000\000\000\000\000\073\000\000\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\000\000\073\000\
\000\000\000\000\077\000\000\000\000\000\077\000\073\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\183\000\184\000\185\000\186\000\187\000\188\000\189\000\190\000\
\191\000\192\000\193\000\194\000\195\000\196\000\197\000\198\000\
\199\000\200\000\201\000\202\000\203\000\204\000\205\000\206\000\
\207\000\208\000\209\000\210\000\211\000\212\000\213\000\214\000\
\215\000\216\000\217\000\218\000\219\000\220\000\221\000\222\000\
\223\000\224\000\225\000\226\000\227\000\228\000\229\000\230\000\
\231\000\232\000\233\000\234\000\235\000\236\000\237\000\238\000\
\239\000\240\000\241\000\242\000\243\000\244\000\245\000\246\000\
\247\000\248\000\249\000\250\000\251\000\252\000\253\000\000\000\
\254\000\255\000\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\005\000\000\000\081\000\006\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\083\000\084\000\085\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\009\000\225\001\000\000\
\000\000\000\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\000\000\000\000\
\022\000\023\000\024\000\025\000\000\000\000\000\130\000\131\000\
\132\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\027\000\000\000\000\000\000\000\000\000\000\000\134\000\
\000\000\000\000\000\000\135\000\000\000\000\000\000\000\000\000\
\028\000\000\000\000\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\000\000\030\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\081\000\006\000\
\007\000\000\000\000\000\031\000\000\000\000\000\032\000\033\000\
\034\000\035\000\082\000\083\000\084\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\136\000\137\000\138\000\000\000\000\000\010\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\000\000\022\000\023\000\024\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\005\000\030\000\000\000\006\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
\000\000\032\000\000\000\034\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\009\000\000\000\000\000\000\000\
\000\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\024\000\025\000\005\000\000\000\081\000\000\000\089\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\027\000\082\000\083\000\084\000\085\000\000\002\000\000\130\000\
\131\000\132\000\133\000\000\000\000\000\000\000\000\000\028\000\
\005\000\000\000\000\000\006\000\007\000\000\000\000\000\000\000\
\134\000\000\000\000\000\029\000\135\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\001\000\000\000\000\000\000\
\000\000\000\000\031\000\008\000\009\000\032\000\033\000\034\000\
\035\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\024\000\025\000\228\001\000\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\101\000\026\000\
\027\000\136\000\137\000\138\000\000\000\125\002\000\000\000\000\
\000\000\000\000\000\000\130\000\131\000\132\000\133\000\028\000\
\005\000\000\000\000\000\006\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\134\000\030\000\000\000\000\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\008\000\009\000\032\000\033\000\034\000\
\035\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\024\000\025\000\235\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\222\001\000\000\000\000\026\000\
\027\000\130\000\131\000\132\000\133\000\136\000\137\000\138\000\
\000\000\000\000\000\000\130\000\131\000\132\000\133\000\028\000\
\001\000\000\000\134\000\001\000\001\000\000\000\135\000\000\000\
\000\000\000\000\000\000\029\000\134\000\030\000\000\000\000\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\001\000\001\000\032\000\033\000\034\000\
\035\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\000\000\001\000\
\001\000\001\000\001\000\238\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\136\000\137\000\138\000\000\000\001\000\
\001\000\000\000\000\000\000\000\000\000\136\000\137\000\138\000\
\000\000\000\000\000\000\130\000\131\000\132\000\133\000\001\000\
\005\000\000\000\226\001\006\000\007\000\000\000\000\000\130\000\
\131\000\132\000\133\000\001\000\134\000\001\000\000\000\000\000\
\135\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\134\000\000\000\001\000\117\002\135\000\001\000\001\000\001\000\
\001\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\024\000\025\000\130\000\131\000\132\000\133\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\027\000\000\000\000\000\000\000\134\000\136\000\137\000\138\000\
\135\000\000\000\041\000\042\000\000\000\043\000\044\000\028\000\
\045\000\136\000\137\000\138\000\046\000\047\000\048\000\049\000\
\000\000\050\000\051\000\029\000\000\000\030\000\052\000\053\000\
\054\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\156\002\000\000\031\000\000\000\000\000\032\000\000\000\034\000\
\035\000\000\000\000\000\056\000\057\000\000\000\000\000\058\000\
\000\000\059\000\000\000\000\000\000\000\136\000\137\000\138\000\
\130\000\131\000\132\000\133\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\134\000\042\000\000\000\000\000\135\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\000\000\081\000\000\000\000\000\042\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\142\002\
\082\000\083\000\084\000\085\000\042\000\005\000\000\000\081\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\083\000\084\000\085\000\000\000\
\000\000\227\001\136\000\137\000\138\000\000\000\130\000\131\000\
\132\000\133\000\000\000\000\000\232\001\000\000\000\000\042\000\
\042\000\130\000\131\000\132\000\133\000\000\000\000\000\134\000\
\042\000\042\000\042\000\135\000\042\000\042\000\000\000\000\000\
\000\000\000\000\134\000\118\002\000\000\000\000\135\000\000\000\
\130\000\131\000\132\000\133\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\101\000\000\000\000\000\
\000\000\134\000\000\000\000\000\000\000\135\000\000\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\101\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\136\000\137\000\138\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\136\000\137\000\138\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\136\000\137\000\138\000"

let yycheck = "\008\000\
\009\000\010\000\042\000\000\000\159\000\045\000\000\000\042\000\
\000\000\099\000\045\000\175\000\102\000\022\000\023\000\024\000\
\025\000\052\000\175\000\186\001\041\001\009\000\031\000\012\001\
\033\000\079\001\089\001\015\001\164\001\083\001\066\001\006\001\
\095\001\179\001\006\001\078\001\012\001\026\001\078\000\019\002\
\005\001\084\001\005\001\078\000\009\001\033\000\054\000\055\000\
\056\000\001\000\026\001\000\000\005\001\025\001\009\001\007\000\
\006\001\063\001\000\000\048\001\049\001\050\001\001\001\052\001\
\053\001\054\001\005\001\019\001\074\001\001\001\007\000\008\000\
\009\000\005\001\005\001\025\001\028\000\009\001\054\001\053\000\
\054\000\055\000\056\000\147\001\093\000\094\000\095\000\159\001\
\063\001\161\001\010\000\063\001\101\000\102\000\103\000\001\001\
\033\000\032\001\162\001\005\001\088\001\089\001\022\000\023\000\
\024\000\025\000\095\001\096\001\063\001\081\001\246\001\031\000\
\005\001\063\001\094\002\080\001\051\001\080\001\050\001\095\001\
\096\001\015\001\051\001\015\001\035\002\036\002\037\002\148\001\
\080\001\169\000\139\000\081\001\020\001\023\002\169\000\170\000\
\171\000\146\000\147\000\148\000\149\000\150\000\151\000\015\001\
\153\000\154\000\155\000\156\000\080\001\158\000\058\001\205\001\
\132\002\051\001\005\001\001\001\165\000\058\001\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\175\000\210\001\
\176\000\104\001\105\001\106\001\215\001\005\001\126\000\104\001\
\128\000\106\001\130\000\131\000\132\000\133\000\134\000\135\000\
\136\000\137\000\138\000\161\000\162\000\126\000\080\002\102\002\
\129\000\081\001\088\001\003\002\088\001\005\001\101\001\102\001\
\152\000\025\001\176\000\025\001\050\001\005\001\104\001\181\000\
\160\000\025\001\015\001\163\000\084\001\000\000\063\001\087\001\
\088\001\154\000\050\001\005\001\028\002\006\001\054\001\073\001\
\032\002\025\001\000\000\147\000\148\000\149\000\150\000\151\000\
\081\001\153\000\154\000\155\000\156\000\032\001\158\000\063\001\
\005\001\063\001\076\001\077\001\005\001\005\001\054\001\063\001\
\012\001\056\002\057\002\131\002\050\002\057\001\054\001\005\001\
\051\001\081\001\074\001\081\001\044\001\045\001\026\001\063\001\
\043\001\044\001\045\001\051\001\047\001\053\001\055\001\006\001\
\051\001\052\001\053\001\174\001\041\002\042\002\060\001\084\001\
\088\002\081\001\087\001\088\001\010\002\126\000\050\001\069\001\
\052\001\053\001\054\001\006\001\063\001\054\001\054\001\030\001\
\031\001\032\001\033\001\005\001\000\000\005\001\001\001\005\001\
\054\001\058\001\005\001\027\001\062\001\104\001\081\001\106\001\
\047\001\154\000\209\001\069\001\051\001\005\001\059\001\214\001\
\046\002\059\001\075\001\059\001\073\001\159\001\001\001\161\001\
\136\002\005\001\005\001\095\001\096\001\232\001\005\001\088\001\
\089\001\005\001\009\001\092\001\055\001\009\001\095\001\063\001\
\005\001\020\001\030\001\031\001\032\001\033\001\025\001\050\001\
\105\001\106\001\005\001\075\001\027\001\098\001\010\002\027\001\
\101\001\102\001\103\001\101\001\102\001\010\002\059\001\051\001\
\057\001\104\001\105\001\106\001\156\001\059\001\106\001\050\001\
\000\000\156\001\001\001\054\001\067\001\068\001\078\001\217\001\
\168\001\169\001\001\001\166\001\084\001\168\001\169\001\027\001\
\063\001\019\001\046\002\063\001\230\001\027\001\094\001\001\001\
\096\001\046\002\027\001\001\001\075\001\098\001\000\000\075\001\
\101\001\102\001\106\001\075\001\098\001\100\001\095\001\101\001\
\102\001\113\001\020\001\006\001\104\001\105\001\106\001\025\001\
\006\001\106\001\063\001\063\001\060\001\072\002\013\001\063\001\
\025\001\063\001\030\001\031\001\032\001\033\001\063\001\075\001\
\009\001\057\001\058\001\063\001\063\001\075\001\164\001\165\001\
\139\002\140\002\075\001\047\001\068\001\206\001\063\001\051\001\
\209\001\073\001\154\001\055\001\025\001\214\001\063\001\247\001\
\217\001\001\001\005\001\251\001\247\001\187\001\103\001\009\001\
\251\001\000\000\009\001\006\001\098\001\230\001\015\001\010\001\
\006\001\006\001\013\001\179\001\001\000\002\000\003\000\063\001\
\006\001\185\001\063\001\014\002\010\001\021\002\025\001\013\001\
\063\001\006\001\021\002\030\001\031\001\032\001\033\001\026\002\
\222\001\006\001\051\001\025\001\104\001\105\001\106\001\055\001\
\006\001\010\002\210\001\081\001\047\001\000\000\025\001\215\001\
\043\002\009\001\019\002\063\001\055\001\005\001\060\001\019\001\
\246\001\060\001\226\001\227\001\063\001\063\001\063\001\063\001\
\254\001\055\001\005\001\009\001\000\000\063\001\060\001\074\001\
\240\001\063\001\063\001\063\001\076\002\046\002\081\001\063\001\
\063\001\076\002\020\001\063\001\074\001\001\001\063\001\056\002\
\057\002\005\001\006\001\081\001\059\001\025\001\010\001\099\001\
\012\001\013\001\015\001\006\001\056\001\015\001\105\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\023\002\
\099\001\006\001\030\001\031\001\032\001\033\001\055\001\027\001\
\076\001\077\001\078\001\079\001\005\001\094\002\057\001\074\001\
\000\000\025\001\063\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\109\002\097\001\020\001\025\001\
\060\001\081\001\006\001\063\001\063\001\069\001\063\001\085\002\
\152\002\009\001\054\001\067\002\068\002\152\002\074\001\006\001\
\025\001\006\001\006\001\132\002\055\001\081\001\055\001\079\002\
\080\002\006\001\020\001\063\001\006\001\063\001\000\000\063\001\
\019\001\025\001\063\001\095\001\096\001\006\001\006\001\063\001\
\063\001\027\001\063\001\063\001\104\001\105\001\106\001\001\001\
\108\001\109\001\020\001\005\001\006\001\131\002\013\001\063\001\
\010\001\000\000\012\001\013\001\001\001\000\000\118\002\000\000\
\013\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\006\001\000\000\012\001\030\001\031\001\032\001\033\001\
\055\001\063\001\019\001\020\001\021\001\022\001\023\001\024\001\
\000\000\026\001\020\001\006\001\063\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\081\001\006\001\
\006\001\124\000\060\001\152\000\139\001\063\001\222\001\048\001\
\049\001\050\001\001\001\052\001\053\001\054\001\005\001\006\001\
\074\001\095\001\217\001\010\001\088\001\012\001\013\001\081\001\
\109\002\092\001\132\002\175\000\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\000\000\095\001\096\001\030\001\
\031\001\032\001\033\001\076\001\079\001\138\002\104\001\105\001\
\106\001\052\001\108\001\109\001\014\002\062\000\095\001\096\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\181\001\043\002\108\001\109\001\060\001\085\002\040\001\
\063\001\079\002\075\000\255\255\255\255\001\001\255\255\255\255\
\255\255\005\001\006\001\074\001\255\255\255\255\010\001\255\255\
\012\001\013\001\081\001\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\000\000\
\095\001\096\001\030\001\031\001\032\001\033\001\255\255\255\255\
\059\001\104\001\105\001\106\001\255\255\108\001\109\001\255\255\
\067\001\068\001\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\255\255\255\255\255\255\255\255\
\060\001\255\255\255\255\063\001\255\255\255\255\006\001\255\255\
\255\255\255\255\010\001\255\255\255\255\013\001\074\001\098\001\
\006\001\100\001\101\001\102\001\103\001\081\001\255\255\255\255\
\255\255\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\095\001\096\001\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\104\001\105\001\106\001\001\001\
\108\001\109\001\255\255\005\001\006\001\255\255\255\255\055\001\
\010\001\047\001\012\001\013\001\060\001\051\001\255\255\063\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\074\001\255\255\030\001\031\001\032\001\033\001\
\255\255\081\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\255\255\010\001\
\255\255\255\255\060\001\255\255\255\255\063\001\255\255\255\255\
\255\255\255\255\104\001\105\001\106\001\255\255\255\255\255\255\
\074\001\255\255\006\001\030\001\031\001\032\001\033\001\081\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\047\001\095\001\096\001\255\255\
\051\001\255\255\030\001\031\001\032\001\033\001\104\001\105\001\
\106\001\255\255\108\001\109\001\255\255\001\001\255\255\255\255\
\255\255\005\001\006\001\047\001\255\255\255\255\010\001\051\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\255\255\000\000\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\255\255\255\255\255\255\255\255\
\060\001\255\255\255\255\063\001\104\001\105\001\106\001\255\255\
\001\001\255\255\255\255\255\255\005\001\006\001\074\001\255\255\
\255\255\010\001\255\255\012\001\013\001\081\001\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\095\001\096\001\030\001\031\001\032\001\
\033\001\255\255\255\255\255\255\104\001\105\001\106\001\255\255\
\108\001\109\001\255\255\255\255\255\255\000\000\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\255\255\
\255\255\255\255\255\255\060\001\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\001\001\255\255\255\255\255\255\005\001\
\006\001\074\001\255\255\255\255\010\001\255\255\012\001\013\001\
\081\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\095\001\096\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\104\001\
\105\001\106\001\255\255\108\001\109\001\255\255\255\255\255\255\
\000\000\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\255\255\003\001\255\255\255\255\060\001\006\001\
\255\255\063\001\255\255\010\001\255\255\255\255\013\001\015\001\
\016\001\017\001\018\001\255\255\074\001\255\255\255\255\255\255\
\255\255\255\255\025\001\081\001\255\255\255\255\255\255\030\001\
\031\001\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\096\001\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\104\001\105\001\106\001\006\001\108\001\109\001\
\055\001\010\001\255\255\012\001\013\001\060\001\255\255\255\255\
\063\001\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\074\001\255\255\030\001\031\001\032\001\
\033\001\255\255\081\001\083\001\084\001\085\001\086\001\087\001\
\088\001\089\001\090\001\091\001\092\001\000\000\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\255\255\
\255\255\255\255\105\001\060\001\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\001\001\255\255\255\255\255\255\255\255\
\006\001\074\001\255\255\255\255\010\001\255\255\012\001\013\001\
\081\001\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\095\001\096\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\104\001\
\105\001\106\001\255\255\108\001\109\001\255\255\255\255\255\255\
\000\000\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\255\255\255\255\006\001\074\001\255\255\255\255\010\001\
\255\255\012\001\013\001\081\001\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\095\001\096\001\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\104\001\105\001\106\001\255\255\108\001\109\001\
\255\255\255\255\255\255\000\000\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\255\255\255\255\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\074\001\
\255\255\255\255\010\001\255\255\012\001\013\001\081\001\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\095\001\096\001\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\108\001\109\001\006\001\000\000\000\000\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\063\001\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\074\001\255\255\255\255\255\255\255\255\255\255\
\255\255\081\001\255\255\255\255\047\001\255\255\255\255\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\096\001\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\104\001\105\001\106\001\006\001\108\001\109\001\000\000\010\001\
\255\255\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\255\255\255\255\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\006\001\074\001\
\255\255\255\255\010\001\255\255\012\001\013\001\081\001\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\095\001\096\001\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\108\001\109\001\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\255\255\055\001\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\006\001\074\001\255\255\255\255\010\001\255\255\255\255\
\013\001\081\001\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\095\001\
\096\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\104\001\105\001\106\001\255\255\108\001\109\001\255\255\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\030\001\031\001\032\001\033\001\060\001\
\255\255\255\255\063\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\006\001\006\001\047\001\074\001\010\001\010\001\
\051\001\013\001\013\001\255\255\081\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\025\001\255\255\
\255\255\255\255\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\104\001\105\001\106\001\081\001\108\001\
\109\001\255\255\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\055\001\255\255\255\255\255\255\
\060\001\060\001\000\000\063\001\063\001\104\001\105\001\106\001\
\255\255\255\255\255\255\255\255\006\001\255\255\074\001\074\001\
\010\001\255\255\255\255\013\001\255\255\081\001\081\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\104\001\105\001\106\001\255\255\
\108\001\109\001\255\255\255\255\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\255\255\255\255\
\255\255\000\000\060\001\255\255\255\255\063\001\255\255\255\255\
\255\255\255\255\255\255\006\001\255\255\255\255\255\255\010\001\
\074\001\255\255\013\001\255\255\255\255\255\255\255\255\081\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\104\001\105\001\
\106\001\255\255\108\001\109\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\255\255\255\255\255\255\
\000\000\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\006\001\255\255\255\255\255\255\010\001\074\001\
\255\255\013\001\255\255\255\255\255\255\255\255\081\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\108\001\109\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\255\255\255\255\255\255\000\000\
\060\001\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\006\001\255\255\255\255\255\255\010\001\074\001\255\255\
\013\001\255\255\255\255\255\255\255\255\081\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\255\255\
\255\255\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\104\001\105\001\106\001\255\255\
\108\001\109\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\255\255\255\255\255\255\000\000\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\255\255\255\255\
\006\001\255\255\255\255\255\255\010\001\074\001\255\255\013\001\
\255\255\255\255\255\255\255\255\081\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\104\001\105\001\106\001\255\255\108\001\
\109\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\255\255\255\255\255\255\000\000\060\001\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\255\255\006\001\
\255\255\255\255\255\255\010\001\074\001\255\255\013\001\255\255\
\255\255\255\255\255\255\081\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\104\001\105\001\106\001\255\255\108\001\109\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\255\255\255\255\255\255\000\000\060\001\255\255\255\255\
\063\001\255\255\255\255\255\255\255\255\255\255\006\001\255\255\
\255\255\255\255\010\001\074\001\255\255\013\001\255\255\255\255\
\255\255\255\255\081\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\104\001\105\001\106\001\255\255\108\001\109\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\055\001\
\255\255\255\255\255\255\000\000\060\001\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\006\001\255\255\255\255\
\255\255\010\001\074\001\255\255\013\001\255\255\255\255\255\255\
\255\255\081\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\104\001\105\001\106\001\255\255\108\001\109\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\255\255\
\255\255\255\255\000\000\060\001\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\006\001\255\255\255\255\255\255\
\010\001\074\001\255\255\013\001\255\255\255\255\255\255\255\255\
\081\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\104\001\
\105\001\106\001\255\255\108\001\109\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\255\255\255\255\
\255\255\000\000\060\001\255\255\255\255\063\001\255\255\255\255\
\255\255\255\255\255\255\006\001\255\255\255\255\255\255\010\001\
\074\001\255\255\013\001\255\255\255\255\255\255\255\255\081\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\104\001\105\001\
\106\001\255\255\108\001\109\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\000\000\255\255\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\000\000\
\255\255\255\255\006\001\255\255\255\255\255\255\010\001\074\001\
\255\255\013\001\255\255\255\255\255\255\255\255\081\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\108\001\109\001\047\001\048\001\049\001\255\255\051\001\
\255\255\255\255\255\255\055\001\255\255\255\255\000\000\255\255\
\060\001\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\006\001\255\255\255\255\255\255\010\001\074\001\255\255\
\013\001\255\255\255\255\255\255\255\255\081\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\255\255\
\255\255\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\104\001\105\001\106\001\255\255\
\108\001\109\001\047\001\048\001\049\001\000\000\051\001\255\255\
\255\255\047\001\055\001\255\255\255\255\051\001\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\060\001\255\255\
\006\001\255\255\255\255\255\255\010\001\074\001\255\255\013\001\
\255\255\000\000\000\000\255\255\081\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\104\001\105\001\106\001\255\255\108\001\
\109\001\047\001\104\001\105\001\106\001\051\001\255\255\255\255\
\047\001\055\001\255\255\255\255\051\001\000\000\060\001\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\255\255\006\001\
\063\001\255\255\255\255\010\001\074\001\000\000\013\001\255\255\
\255\255\255\255\255\255\081\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\255\255\000\000\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\104\001\105\001\106\001\255\255\108\001\109\001\
\047\001\104\001\105\001\106\001\051\001\255\255\255\255\255\255\
\055\001\255\255\255\255\255\255\255\255\060\001\255\255\255\255\
\063\001\255\255\255\255\006\001\255\255\255\255\255\255\010\001\
\255\255\255\255\013\001\074\001\255\255\006\001\255\255\255\255\
\255\255\010\001\081\001\255\255\013\001\255\255\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\255\255\
\025\001\255\255\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\104\001\105\001\106\001\047\001\108\001\109\001\255\255\
\051\001\255\255\255\255\255\255\055\001\255\255\047\001\255\255\
\255\255\060\001\051\001\255\255\063\001\255\255\055\001\030\001\
\031\001\032\001\033\001\060\001\006\001\255\255\063\001\074\001\
\010\001\255\255\255\255\013\001\255\255\255\255\081\001\255\255\
\047\001\074\001\255\255\255\255\051\001\255\255\255\255\025\001\
\081\001\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\104\001\
\105\001\106\001\081\001\255\255\255\255\055\001\255\255\255\255\
\255\255\255\255\060\001\006\001\255\255\063\001\255\255\010\001\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\255\255\
\074\001\104\001\105\001\106\001\255\255\255\255\025\001\081\001\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\006\001\
\006\001\255\255\255\255\010\001\010\001\255\255\013\001\013\001\
\255\255\255\255\255\255\255\255\047\001\255\255\104\001\105\001\
\106\001\255\255\025\001\025\001\055\001\255\255\255\255\030\001\
\031\001\060\001\033\001\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\074\001\
\047\001\047\001\255\255\006\001\255\255\255\255\081\001\010\001\
\055\001\055\001\013\001\255\255\255\255\060\001\060\001\255\255\
\063\001\063\001\255\255\006\001\255\255\255\255\025\001\010\001\
\255\255\255\255\013\001\074\001\074\001\255\255\105\001\106\001\
\255\255\255\255\081\001\081\001\006\001\255\255\025\001\255\255\
\010\001\255\255\255\255\013\001\047\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\025\001\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\074\001\
\255\255\060\001\255\255\255\255\063\001\255\255\081\001\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\255\255\074\001\
\255\255\255\255\060\001\255\255\255\255\063\001\081\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\081\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\255\255\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\092\001\093\001\094\001\095\001\096\001\
\097\001\098\001\099\001\100\001\101\001\102\001\103\001\104\001\
\105\001\106\001\107\001\108\001\109\001\110\001\111\001\112\001\
\113\001\001\001\255\255\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\006\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\048\001\049\001\050\001\051\001\255\255\255\255\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\083\001\084\001\085\001\086\001\087\001\
\088\001\089\001\090\001\091\001\092\001\255\255\094\001\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\003\001\004\001\
\005\001\255\255\255\255\107\001\255\255\255\255\110\001\111\001\
\112\001\113\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\104\001\105\001\106\001\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\255\255\048\001\049\001\050\001\051\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\065\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\083\001\084\001\
\085\001\086\001\087\001\088\001\089\001\090\001\091\001\092\001\
\001\001\094\001\255\255\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\107\001\255\255\
\255\255\110\001\255\255\112\001\113\001\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\255\255\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\255\255\255\255\048\001\
\049\001\050\001\051\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\065\001\015\001\016\001\017\001\018\001\070\001\255\255\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\080\001\
\001\001\255\255\255\255\004\001\005\001\255\255\255\255\255\255\
\047\001\255\255\255\255\092\001\051\001\094\001\255\255\255\255\
\255\255\255\255\255\255\255\255\050\001\255\255\255\255\255\255\
\255\255\255\255\107\001\028\001\029\001\110\001\111\001\112\001\
\113\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\255\255\255\255\048\001\
\049\001\050\001\051\001\006\001\255\255\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\092\001\064\001\
\065\001\104\001\105\001\106\001\255\255\070\001\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\080\001\
\001\001\255\255\255\255\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\092\001\047\001\094\001\255\255\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\107\001\028\001\029\001\110\001\111\001\112\001\
\113\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\255\255\255\255\048\001\
\049\001\050\001\051\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\255\255\255\255\064\001\
\065\001\030\001\031\001\032\001\033\001\104\001\105\001\106\001\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\080\001\
\001\001\255\255\047\001\004\001\005\001\255\255\051\001\255\255\
\255\255\255\255\255\255\092\001\047\001\094\001\255\255\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\107\001\028\001\029\001\110\001\111\001\112\001\
\113\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\255\255\255\255\048\001\
\049\001\050\001\051\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\104\001\105\001\106\001\255\255\064\001\
\065\001\255\255\255\255\255\255\255\255\104\001\105\001\106\001\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\080\001\
\001\001\255\255\025\001\004\001\005\001\255\255\255\255\030\001\
\031\001\032\001\033\001\092\001\047\001\094\001\255\255\255\255\
\051\001\255\255\255\255\001\001\255\255\255\255\255\255\255\255\
\047\001\255\255\107\001\006\001\051\001\110\001\111\001\112\001\
\113\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\255\255\255\255\048\001\
\049\001\050\001\051\001\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\065\001\255\255\255\255\255\255\047\001\104\001\105\001\106\001\
\051\001\255\255\056\001\057\001\255\255\059\001\060\001\080\001\
\062\001\104\001\105\001\106\001\066\001\067\001\068\001\069\001\
\255\255\071\001\072\001\092\001\255\255\094\001\076\001\077\001\
\078\001\079\001\255\255\255\255\255\255\255\255\255\255\255\255\
\006\001\255\255\107\001\255\255\255\255\110\001\255\255\112\001\
\113\001\255\255\255\255\097\001\098\001\255\255\255\255\101\001\
\255\255\103\001\255\255\255\255\255\255\104\001\105\001\106\001\
\030\001\031\001\032\001\033\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\047\001\026\001\255\255\255\255\051\001\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\014\001\
\015\001\016\001\017\001\018\001\060\001\001\001\255\255\003\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\255\255\
\255\255\025\001\104\001\105\001\106\001\255\255\030\001\031\001\
\032\001\033\001\255\255\255\255\025\001\255\255\255\255\095\001\
\096\001\030\001\031\001\032\001\033\001\255\255\255\255\047\001\
\104\001\105\001\106\001\051\001\108\001\109\001\255\255\255\255\
\255\255\255\255\047\001\025\001\255\255\255\255\051\001\255\255\
\030\001\031\001\032\001\033\001\083\001\084\001\085\001\086\001\
\087\001\088\001\089\001\090\001\091\001\092\001\255\255\255\255\
\255\255\047\001\255\255\255\255\255\255\051\001\255\255\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\092\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\104\001\105\001\106\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\104\001\105\001\106\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\104\001\105\001\106\001"

let yynames_const = "\
  LPAR\000\
  RPAR\000\
  IF\000\
  ELSE\000\
  COLON\000\
  COLON2\000\
  COLONCOLON\000\
  DOT\000\
  DOTDOT\000\
  DOTDOTDOT\000\
  INT\000\
  INTEGER\000\
  REAL\000\
  FLOAT\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  EQ\000\
  NE\000\
  COMMA\000\
  ARROW\000\
  EQUAL\000\
  FORALL\000\
  EXISTS\000\
  IFF\000\
  IMPLIES\000\
  AND\000\
  OR\000\
  NOT\000\
  TRUE\000\
  FALSE\000\
  OLD\000\
  AT\000\
  RESULT\000\
  BLOCK_LENGTH\000\
  BASE_ADDR\000\
  VALID\000\
  VALID_INDEX\000\
  VALID_RANGE\000\
  FRESH\000\
  DOLLAR\000\
  QUESTION\000\
  MINUS\000\
  PLUS\000\
  STAR\000\
  AMP\000\
  SLASH\000\
  PERCENT\000\
  LSQUARE\000\
  RSQUARE\000\
  EOF\000\
  GLOBAL\000\
  INVARIANT\000\
  VARIANT\000\
  DECREASES\000\
  FOR\000\
  LABEL\000\
  ASSERT\000\
  SEMICOLON\000\
  NULL\000\
  EMPTY\000\
  REQUIRES\000\
  ENSURES\000\
  ASSIGNS\000\
  LOOP\000\
  NOTHING\000\
  SLICE\000\
  IMPACT\000\
  PRAGMA\000\
  FROM\000\
  READS\000\
  LOGIC\000\
  PREDICATE\000\
  AXIOM\000\
  LEMMA\000\
  LBRACE\000\
  RBRACE\000\
  GHOST\000\
  VOID\000\
  CHAR\000\
  SIGNED\000\
  UNSIGNED\000\
  SHORT\000\
  LONG\000\
  DOUBLE\000\
  STRUCT\000\
  ENUM\000\
  UNION\000\
  BSUNION\000\
  INTER\000\
  LTCOLON\000\
  COLONGT\000\
  TYPE\000\
  BEHAVIOR\000\
  BEHAVIORS\000\
  ASSUMES\000\
  COMPLETE\000\
  DISJOINT\000\
  TERMINATES\000\
  HAT\000\
  HATHAT\000\
  PIPE\000\
  TILDE\000\
  GTGT\000\
  LTLT\000\
  SIZEOF\000\
  LAMBDA\000\
  TYPEOF\000\
  BSTYPE\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  STRING_LITERAL\000\
  TYPENAME\000\
  CONSTANT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "cil/src/logic/logic_parser.mly"
            ( enter_kw_c_mode () )
# 1767 "cil/src/logic/logic_parser.ml"
               : 'enter_kw_c_mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "cil/src/logic/logic_parser.mly"
            ( exit_kw_c_mode () )
# 1773 "cil/src/logic/logic_parser.ml"
               : 'exit_kw_c_mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "cil/src/logic/logic_parser.mly"
                ( [] )
# 1779 "cil/src/logic/logic_parser.ml"
               : 'lexpr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ne_lexpr_list) in
    Obj.repr(
# 116 "cil/src/logic/logic_parser.mly"
                 ( _1 )
# 1786 "cil/src/logic/logic_parser.ml"
               : 'lexpr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 120 "cil/src/logic/logic_parser.mly"
                           ( [_1] )
# 1793 "cil/src/logic/logic_parser.ml"
               : 'ne_lexpr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ne_lexpr_list) in
    Obj.repr(
# 121 "cil/src/logic/logic_parser.mly"
                            ( _1 :: _3 )
# 1801 "cil/src/logic/logic_parser.ml"
               : 'ne_lexpr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 125 "cil/src/logic/logic_parser.mly"
                                ( _1 )
# 1808 "cil/src/logic/logic_parser.ml"
               : 'lexpr_rel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr_inner) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rel_list) in
    Obj.repr(
# 127 "cil/src/logic/logic_parser.mly"
      ( let rel, rhs, _, oth_rel = _2 in
        let loc = loc_start _1, loc_end rhs in
        let relation = loc_info loc (PLrel(_1,rel,rhs)) in
        match oth_rel with
            None -> relation
          | Some oth_relation -> info (PLand(relation,oth_relation))
      )
# 1822 "cil/src/logic/logic_parser.ml"
               : 'lexpr_rel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 136 "cil/src/logic/logic_parser.mly"
                    ( info (PLnot _2) )
# 1829 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "cil/src/logic/logic_parser.mly"
         ( info PLtrue )
# 1835 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "cil/src/logic/logic_parser.mly"
          ( info PLfalse )
# 1841 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 139 "cil/src/logic/logic_parser.mly"
                          ( info (PLvalid (_3)) )
# 1848 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Logic_ptree.lexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 140 "cil/src/logic/logic_parser.mly"
                                            ( info (PLvalid_index (_3,_5)) )
# 1856 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Logic_ptree.lexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Logic_ptree.lexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 142 "cil/src/logic/logic_parser.mly"
      ( info (PLvalid_range (_3,_5,_7)) )
# 1865 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 143 "cil/src/logic/logic_parser.mly"
                          ( info (PLfresh (_3)) )
# 1872 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "cil/src/logic/logic_parser.mly"
         ( info PLnull )
# 1878 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.constant) in
    Obj.repr(
# 145 "cil/src/logic/logic_parser.mly"
             ( info (PLconstant _1) )
# 1885 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 146 "cil/src/logic/logic_parser.mly"
                                 ( info (PLbinop (_1, Badd, _3)) )
# 1893 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 147 "cil/src/logic/logic_parser.mly"
                                  ( info (PLbinop (_1, Bsub, _3)) )
# 1901 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 148 "cil/src/logic/logic_parser.mly"
                                 ( info (PLbinop (_1, Bmul, _3)) )
# 1909 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 149 "cil/src/logic/logic_parser.mly"
                                  ( info (PLbinop (_1, Bdiv, _3)) )
# 1917 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 150 "cil/src/logic/logic_parser.mly"
                                    ( info (PLbinop (_1, Bmod, _3)) )
# 1925 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 151 "cil/src/logic/logic_parser.mly"
                                 ( info (PLarrow (_1, _3)) )
# 1933 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 152 "cil/src/logic/logic_parser.mly"
                               ( info (PLdot (_1, _3)) )
# 1941 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'range) in
    Obj.repr(
# 153 "cil/src/logic/logic_parser.mly"
                                      ( info (PLarrget (_1, _3)) )
# 1949 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 154 "cil/src/logic/logic_parser.mly"
                                      ( info (PLarrget (_1, _3)) )
# 1957 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 155 "cil/src/logic/logic_parser.mly"
                                        ( info (PLunop (Uminus, _2)) )
# 1964 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 156 "cil/src/logic/logic_parser.mly"
                                       ( _2 )
# 1971 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 157 "cil/src/logic/logic_parser.mly"
                      ( info (PLunop (Ubw_not, _2)) )
# 1978 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 158 "cil/src/logic/logic_parser.mly"
                     ( info (PLunop (Ustar, _2)) )
# 1985 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 159 "cil/src/logic/logic_parser.mly"
                    ( info (PLunop (Uamp, _2)) )
# 1992 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 160 "cil/src/logic/logic_parser.mly"
                           ( info (PLsizeofE _3) )
# 1999 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'logic_type_not_id) in
    Obj.repr(
# 161 "cil/src/logic/logic_parser.mly"
                                       ( info (PLsizeof _3) )
# 2006 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 162 "cil/src/logic/logic_parser.mly"
                        ( info (PLold _3) )
# 2013 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Logic_ptree.lexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'label) in
    Obj.repr(
# 163 "cil/src/logic/logic_parser.mly"
                                   ( info (PLat (_3, _5)) )
# 2021 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 164 "cil/src/logic/logic_parser.mly"
                              ( info (PLbase_addr _3) )
# 2028 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 165 "cil/src/logic/logic_parser.mly"
                                 ( info (PLblock_length _3) )
# 2035 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "cil/src/logic/logic_parser.mly"
           ( info PLresult )
# 2041 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ne_lexpr_list) in
    Obj.repr(
# 168 "cil/src/logic/logic_parser.mly"
      ( info (PLapp (_1, [], _3)) )
# 2049 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ne_tvar_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'ne_lexpr_list) in
    Obj.repr(
# 170 "cil/src/logic/logic_parser.mly"
      ( info (PLapp (_1, _3, _6)) )
# 2058 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ne_tvar_list) in
    Obj.repr(
# 172 "cil/src/logic/logic_parser.mly"
      ( info (PLapp (_1, _3, [])) )
# 2066 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 173 "cil/src/logic/logic_parser.mly"
                                ( info (PLvar _1) )
# 2073 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 174 "cil/src/logic/logic_parser.mly"
                                 ( info (PLbinop (_1, Brshift, _3)))
# 2081 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 175 "cil/src/logic/logic_parser.mly"
                                 ( info (PLbinop (_1, Blshift, _3)))
# 2089 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 176 "cil/src/logic/logic_parser.mly"
                                   ( info _2.lexpr_node )
# 2096 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'range) in
    Obj.repr(
# 177 "cil/src/logic/logic_parser.mly"
                    ( info _2.lexpr_node )
# 2103 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'logic_type_not_id) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 179 "cil/src/logic/logic_parser.mly"
      ( info (PLcast (_2, _4)) )
# 2111 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 181 "cil/src/logic/logic_parser.mly"
      ( info (PLsubtype (_1, _3)) )
# 2119 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logic_type_not_id) in
    Obj.repr(
# 183 "cil/src/logic/logic_parser.mly"
      ( info (PLcoercion (_1, _3)) )
# 2127 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 185 "cil/src/logic/logic_parser.mly"
      ( info (PLcoercionE (_1, _3)) )
# 2135 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 186 "cil/src/logic/logic_parser.mly"
                           ( info (PLtypeof _3) )
# 2142 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec_not_id) in
    Obj.repr(
# 187 "cil/src/logic/logic_parser.mly"
                                      ( info (PLtype _3) )
# 2149 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "cil/src/logic/logic_parser.mly"
          ( info PLempty )
# 2155 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr_list) in
    Obj.repr(
# 190 "cil/src/logic/logic_parser.mly"
                               ( info (PLunion _3) )
# 2162 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr_list) in
    Obj.repr(
# 191 "cil/src/logic/logic_parser.mly"
                               ( info (PLinter _3) )
# 2169 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Logic_ptree.lexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'binders) in
    Obj.repr(
# 193 "cil/src/logic/logic_parser.mly"
      (info (PLcomprehension (_2,_4,None)) )
# 2177 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Logic_ptree.lexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'binders) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 195 "cil/src/logic/logic_parser.mly"
      ( info (PLcomprehension (_2,_4,Some _6)) )
# 2186 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Logic_ptree.lexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 197 "cil/src/logic/logic_parser.mly"
                                                   ( info (PLupdate(_2,_4,_6)) )
# 2195 "cil/src/logic/logic_parser.ml"
               : 'lexpr_inner))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "cil/src/logic/logic_parser.mly"
          ( Lt )
# 2201 "cil/src/logic/logic_parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "cil/src/logic/logic_parser.mly"
          ( Gt )
# 2207 "cil/src/logic/logic_parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "cil/src/logic/logic_parser.mly"
          ( Le )
# 2213 "cil/src/logic/logic_parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "cil/src/logic/logic_parser.mly"
          ( Ge )
# 2219 "cil/src/logic/logic_parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "cil/src/logic/logic_parser.mly"
          ( Eq )
# 2225 "cil/src/logic/logic_parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "cil/src/logic/logic_parser.mly"
          ( Neq )
# 2231 "cil/src/logic/logic_parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_option) in
    Obj.repr(
# 210 "cil/src/logic/logic_parser.mly"
                                   ( info (PLrange(_1,_3)) )
# 2239 "cil/src/logic/logic_parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 214 "cil/src/logic/logic_parser.mly"
                      ( info (PLimplies (_1, _3)) )
# 2247 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 215 "cil/src/logic/logic_parser.mly"
                  ( info (PLiff (_1, _3)) )
# 2255 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 216 "cil/src/logic/logic_parser.mly"
                     ( info (PLor (_1, _3)) )
# 2263 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 217 "cil/src/logic/logic_parser.mly"
                     ( info (PLand (_1, _3)) )
# 2271 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 218 "cil/src/logic/logic_parser.mly"
                        ( info (PLxor (_1, _3)) )
# 2279 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binders) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 220 "cil/src/logic/logic_parser.mly"
      ( info (PLforall (_2, _4)) )
# 2287 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binders) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 222 "cil/src/logic/logic_parser.mly"
      ( info (PLexists (_2, _4)) )
# 2295 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binders) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 224 "cil/src/logic/logic_parser.mly"
      ( info (PLlambda (_2,_4)) )
# 2303 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 226 "cil/src/logic/logic_parser.mly"
                  ( info (PLbinop (_1, Bbw_and, _3)) )
# 2311 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 227 "cil/src/logic/logic_parser.mly"
                   ( info (PLbinop (_1, Bbw_or, _3)) )
# 2319 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 228 "cil/src/logic/logic_parser.mly"
                  ( info (PLbinop (_1, Bbw_xor, _3)) )
# 2327 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Logic_ptree.lexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 230 "cil/src/logic/logic_parser.mly"
    ( info (PLif (_1, _3, _5)) )
# 2336 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 232 "cil/src/logic/logic_parser.mly"
                                          ( info (PLnamed (_1, _3)) )
# 2344 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_rel) in
    Obj.repr(
# 233 "cil/src/logic/logic_parser.mly"
                                ( _1 )
# 2351 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'relation) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr_inner) in
    Obj.repr(
# 238 "cil/src/logic/logic_parser.mly"
  ( _1, _2, fst(relation_sense _1 Unknown), None )
# 2359 "cil/src/logic/logic_parser.ml"
               : 'rel_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relation) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr_inner) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rel_list) in
    Obj.repr(
# 240 "cil/src/logic/logic_parser.mly"
  (
    let next_rel, rhs, sense, oth_rel = _3 in
    let (sense, correct) = relation_sense _1 sense
    in
    if correct then
      let loc = loc_start _2, loc_end rhs in
      let my_rel = loc_info loc (PLrel(_2,next_rel,rhs)) in
      let oth_rel = match oth_rel with
          None -> my_rel
        | Some rel ->
	    let loc = loc_start _2, loc_end rel in
	    loc_info loc (PLand(my_rel,rel))
      in
      _1,_2,sense,Some oth_rel
    else begin
      let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 3 in
      raise (Not_well_formed
               (loc,"Inconsistent relation chain."));

    end
  )
# 2388 "cil/src/logic/logic_parser.ml"
               : 'rel_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "cil/src/logic/logic_parser.mly"
                ( None )
# 2394 "cil/src/logic/logic_parser.ml"
               : 'lexpr_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 265 "cil/src/logic/logic_parser.mly"
                ( Some _1 )
# 2401 "cil/src/logic/logic_parser.ml"
               : 'lexpr_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binders_reentrance) in
    Obj.repr(
# 270 "cil/src/logic/logic_parser.mly"
                            ( let (_lt, vars) = _1 in vars )
# 2408 "cil/src/logic/logic_parser.ml"
               : 'binders))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec) in
    Obj.repr(
# 274 "cil/src/logic/logic_parser.mly"
    ( let (lt, var) = _1 in (lt, [var])
    )
# 2416 "cil/src/logic/logic_parser.ml"
               : 'binders_reentrance))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binders_reentrance) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec) in
    Obj.repr(
# 277 "cil/src/logic/logic_parser.mly"
    ( let _, vars = _1 in
      let (lt, var) = _3 in
        (lt, vars @ [ var ])
    )
# 2427 "cil/src/logic/logic_parser.ml"
               : 'binders_reentrance))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binders_reentrance) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec) in
    Obj.repr(
# 282 "cil/src/logic/logic_parser.mly"
    ( let last_type_spec, vars = _1 in
        (last_type_spec, vars @ [ let (modif, name) = _3 in (modif last_type_spec, name)])
    )
# 2437 "cil/src/logic/logic_parser.ml"
               : 'binders_reentrance))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec_for_id) in
    Obj.repr(
# 289 "cil/src/logic/logic_parser.mly"
   ( let last_type_spec = LTnamed(_1, []) in
       (last_type_spec, let (modif, name) = _2 in [ (modif last_type_spec, name)])
   )
# 2447 "cil/src/logic/logic_parser.ml"
               : 'binders_reentrance))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'binders_reentrance) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec_for_id) in
    Obj.repr(
# 296 "cil/src/logic/logic_parser.mly"
   ( let _, vars = _1 in
     let last_type_spec = LTnamed(_3, []) in
       (last_type_spec, vars @ let (modif, name) = _4 in [ (modif last_type_spec, name)])
   )
# 2459 "cil/src/logic/logic_parser.ml"
               : 'binders_reentrance))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec_bis_for_id) in
    Obj.repr(
# 305 "cil/src/logic/logic_parser.mly"
                                     ( _1 )
# 2466 "cil/src/logic/logic_parser.ml"
               : 'var_spec_for_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stars) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec_bis_for_id) in
    Obj.repr(
# 307 "cil/src/logic/logic_parser.mly"
  ( let (modif, name) = _2 in
      ((fun x -> _1 (modif x)), name) )
# 2475 "cil/src/logic/logic_parser.ml"
               : 'var_spec_for_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 315 "cil/src/logic/logic_parser.mly"
                 ( ((fun x -> x), _1) )
# 2482 "cil/src/logic/logic_parser.ml"
               : 'var_spec_bis_for_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_spec_bis_for_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr_option) in
    Obj.repr(
# 317 "cil/src/logic/logic_parser.mly"
      ( (* TODO: use size information for LTarray - $3 *)
        let (modif, name) = _1 in
          ((fun x -> LTarray (modif x)), name)
      )
# 2493 "cil/src/logic/logic_parser.ml"
               : 'var_spec_bis_for_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_spec_bis_for_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'abs_param_type_list) in
    Obj.repr(
# 321 "cil/src/logic/logic_parser.mly"
                                                    ( (* TODO *) raise Parse_error )
# 2501 "cil/src/logic/logic_parser.ml"
               : 'var_spec_bis_for_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec_not_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec) in
    Obj.repr(
# 325 "cil/src/logic/logic_parser.mly"
                            ( (_1, let (modif, name) = _2 in (modif _1, name))  )
# 2509 "cil/src/logic/logic_parser.ml"
               : 'decl_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec_bis) in
    Obj.repr(
# 329 "cil/src/logic/logic_parser.mly"
                     ( _1 )
# 2516 "cil/src/logic/logic_parser.ml"
               : 'var_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stars) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec_bis) in
    Obj.repr(
# 331 "cil/src/logic/logic_parser.mly"
  ( let (modif, name) = _2 in
      ((fun x -> _1 (modif x)), name) )
# 2525 "cil/src/logic/logic_parser.ml"
               : 'var_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 336 "cil/src/logic/logic_parser.mly"
                 ( ((fun x -> x), _1) )
# 2532 "cil/src/logic/logic_parser.ml"
               : 'var_spec_bis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_spec_bis) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr_option) in
    Obj.repr(
# 338 "cil/src/logic/logic_parser.mly"
      ( (* TODO: use size information for LTarray - $3 *)
        let (modif, name) = _1 in
          ((fun x -> LTarray (modif x)), name)
      )
# 2543 "cil/src/logic/logic_parser.ml"
               : 'var_spec_bis))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var_spec) in
    Obj.repr(
# 342 "cil/src/logic/logic_parser.mly"
                     ( _2 )
# 2550 "cil/src/logic/logic_parser.ml"
               : 'var_spec_bis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_spec_bis) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'abs_param_type_list) in
    Obj.repr(
# 343 "cil/src/logic/logic_parser.mly"
                                             ( (* TODO *) raise Parse_error )
# 2558 "cil/src/logic/logic_parser.ml"
               : 'var_spec_bis))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "cil/src/logic/logic_parser.mly"
              ( [ ] )
# 2564 "cil/src/logic/logic_parser.ml"
               : 'abs_param_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_param_list) in
    Obj.repr(
# 348 "cil/src/logic/logic_parser.mly"
                 ( _1 )
# 2571 "cil/src/logic/logic_parser.ml"
               : 'abs_param_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'abs_param_list) in
    Obj.repr(
# 349 "cil/src/logic/logic_parser.mly"
                                 ( (* TODO *) raise Parse_error )
# 2578 "cil/src/logic/logic_parser.ml"
               : 'abs_param_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_param) in
    Obj.repr(
# 353 "cil/src/logic/logic_parser.mly"
            ( [ _1 ] )
# 2585 "cil/src/logic/logic_parser.ml"
               : 'abs_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'abs_param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_param) in
    Obj.repr(
# 354 "cil/src/logic/logic_parser.mly"
                                 ( _1 @ [ _3 ] )
# 2593 "cil/src/logic/logic_parser.ml"
               : 'abs_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 361 "cil/src/logic/logic_parser.mly"
            ( _1 )
# 2600 "cil/src/logic/logic_parser.ml"
               : 'abs_param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 367 "cil/src/logic/logic_parser.mly"
              ( LTnamed(_1, []) )
# 2607 "cil/src/logic/logic_parser.ml"
               : 'id_as_typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ne_logic_type_list) in
    Obj.repr(
# 372 "cil/src/logic/logic_parser.mly"
  ( LTnamed(_1, _3) )
# 2615 "cil/src/logic/logic_parser.ml"
               : 'id_as_typename_poly))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec_not_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_spec_option) in
    Obj.repr(
# 378 "cil/src/logic/logic_parser.mly"
                                    ( _2 _1 )
# 2623 "cil/src/logic/logic_parser.ml"
               : 'logic_type_not_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 382 "cil/src/logic/logic_parser.mly"
            ( [_1] )
# 2630 "cil/src/logic/logic_parser.ml"
               : 'ne_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ne_parameters) in
    Obj.repr(
# 383 "cil/src/logic/logic_parser.mly"
                                ( _1 :: _3 )
# 2638 "cil/src/logic/logic_parser.ml"
               : 'ne_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec) in
    Obj.repr(
# 387 "cil/src/logic/logic_parser.mly"
                     ( let (modif, name) = _2 in (modif _1, name))
# 2646 "cil/src/logic/logic_parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_as_typename) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_spec) in
    Obj.repr(
# 388 "cil/src/logic/logic_parser.mly"
                          ( let (modif, name) = _2 in (modif _1, name) )
# 2654 "cil/src/logic/logic_parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_spec_option) in
    Obj.repr(
# 395 "cil/src/logic/logic_parser.mly"
                             ( _2 _1 )
# 2662 "cil/src/logic/logic_parser.ml"
               : 'logic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_as_typename) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_spec_option) in
    Obj.repr(
# 396 "cil/src/logic/logic_parser.mly"
                                 ( _2 _1 )
# 2670 "cil/src/logic/logic_parser.ml"
               : 'logic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 400 "cil/src/logic/logic_parser.mly"
                              ( fun t -> t )
# 2676 "cil/src/logic/logic_parser.ml"
               : 'abs_spec_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_spec) in
    Obj.repr(
# 401 "cil/src/logic/logic_parser.mly"
           ( _1 )
# 2683 "cil/src/logic/logic_parser.ml"
               : 'abs_spec_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tabs) in
    Obj.repr(
# 405 "cil/src/logic/logic_parser.mly"
                          ( _1 )
# 2690 "cil/src/logic/logic_parser.ml"
               : 'abs_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stars) in
    Obj.repr(
# 406 "cil/src/logic/logic_parser.mly"
                                         ( _1 )
# 2697 "cil/src/logic/logic_parser.ml"
               : 'abs_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stars) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tabs) in
    Obj.repr(
# 407 "cil/src/logic/logic_parser.mly"
                                         ( fun t -> _2 (_1 t) )
# 2705 "cil/src/logic/logic_parser.ml"
               : 'abs_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stars) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_spec_bis) in
    Obj.repr(
# 408 "cil/src/logic/logic_parser.mly"
                                         ( fun t -> _2 (_1 t) )
# 2713 "cil/src/logic/logic_parser.ml"
               : 'abs_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stars) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'abs_spec_bis) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tabs) in
    Obj.repr(
# 409 "cil/src/logic/logic_parser.mly"
                                         ( fun t -> _2 (_3 (_1 t)) )
# 2722 "cil/src/logic/logic_parser.ml"
               : 'abs_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'abs_spec_bis) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tabs) in
    Obj.repr(
# 410 "cil/src/logic/logic_parser.mly"
                                         ( fun t -> _1 (_2 t) )
# 2730 "cil/src/logic/logic_parser.ml"
               : 'abs_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'abs_spec) in
    Obj.repr(
# 414 "cil/src/logic/logic_parser.mly"
                     ( _2 )
# 2737 "cil/src/logic/logic_parser.ml"
               : 'abs_spec_bis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'abs_spec_bis) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'abs_param_type_list) in
    Obj.repr(
# 415 "cil/src/logic/logic_parser.mly"
                                             ( (* TODO *) raise Parse_error )
# 2745 "cil/src/logic/logic_parser.ml"
               : 'abs_spec_bis))
; (fun __caml_parser_env ->
    Obj.repr(
# 419 "cil/src/logic/logic_parser.mly"
             ( fun t -> LTpointer t )
# 2751 "cil/src/logic/logic_parser.ml"
               : 'stars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stars) in
    Obj.repr(
# 420 "cil/src/logic/logic_parser.mly"
             ( fun t -> _2 (LTpointer t) )
# 2758 "cil/src/logic/logic_parser.ml"
               : 'stars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr_option) in
    Obj.repr(
# 425 "cil/src/logic/logic_parser.mly"
    (  (* TODO: use size information for LTarray - $2 *)
      fun t -> LTarray t
    )
# 2767 "cil/src/logic/logic_parser.ml"
               : 'tabs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tabs) in
    Obj.repr(
# 429 "cil/src/logic/logic_parser.mly"
    (  (* TODO: use size information for LTarray - $2 *)
      fun t -> LTarray (_4 t)
    )
# 2777 "cil/src/logic/logic_parser.ml"
               : 'tabs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_spec_not_id) in
    Obj.repr(
# 435 "cil/src/logic/logic_parser.mly"
                   ( _1 )
# 2784 "cil/src/logic/logic_parser.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_as_typename_poly) in
    Obj.repr(
# 436 "cil/src/logic/logic_parser.mly"
                      ( _1 )
# 2791 "cil/src/logic/logic_parser.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 440 "cil/src/logic/logic_parser.mly"
                 ( LTinteger )
# 2797 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 441 "cil/src/logic/logic_parser.mly"
                 ( LTreal )
# 2803 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 442 "cil/src/logic/logic_parser.mly"
                 ( LTvoid )
# 2809 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "cil/src/logic/logic_parser.mly"
                 ( LTint IChar )
# 2815 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 444 "cil/src/logic/logic_parser.mly"
                 ( LTint ISChar )
# 2821 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 445 "cil/src/logic/logic_parser.mly"
                 ( LTint IUChar )
# 2827 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 446 "cil/src/logic/logic_parser.mly"
                 ( LTint IInt )
# 2833 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 447 "cil/src/logic/logic_parser.mly"
                 ( LTint IInt )
# 2839 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 448 "cil/src/logic/logic_parser.mly"
                 ( LTint IUInt )
# 2845 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 449 "cil/src/logic/logic_parser.mly"
                 ( LTint IUInt )
# 2851 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "cil/src/logic/logic_parser.mly"
                 ( LTint IShort )
# 2857 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "cil/src/logic/logic_parser.mly"
                 ( LTint IShort )
# 2863 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "cil/src/logic/logic_parser.mly"
                 ( LTint IUShort )
# 2869 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 453 "cil/src/logic/logic_parser.mly"
                 ( LTint ILong )
# 2875 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "cil/src/logic/logic_parser.mly"
                 ( LTint ILong )
# 2881 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 455 "cil/src/logic/logic_parser.mly"
                 ( LTint IULong )
# 2887 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "cil/src/logic/logic_parser.mly"
                 ( LTint ILong )
# 2893 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "cil/src/logic/logic_parser.mly"
                 ( LTint ILong )
# 2899 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 458 "cil/src/logic/logic_parser.mly"
                    ( LTint IULong )
# 2905 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 459 "cil/src/logic/logic_parser.mly"
                 ( LTint ILongLong )
# 2911 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 461 "cil/src/logic/logic_parser.mly"
                     ( LTint ILongLong )
# 2917 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 463 "cil/src/logic/logic_parser.mly"
                     ( LTint IULongLong )
# 2923 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 465 "cil/src/logic/logic_parser.mly"
                    ( LTint ILongLong )
# 2929 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 467 "cil/src/logic/logic_parser.mly"
                        ( LTint ILongLong )
# 2935 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 469 "cil/src/logic/logic_parser.mly"
                         ( LTint IULongLong )
# 2941 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 471 "cil/src/logic/logic_parser.mly"
                    ( LTfloat FFloat )
# 2947 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 472 "cil/src/logic/logic_parser.mly"
                    ( LTfloat FDouble )
# 2953 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 473 "cil/src/logic/logic_parser.mly"
                    ( LTfloat FLongDouble )
# 2959 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 474 "cil/src/logic/logic_parser.mly"
                    ( LTstruct _2 )
# 2966 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 475 "cil/src/logic/logic_parser.mly"
                    ( LTenum _2 )
# 2973 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 476 "cil/src/logic/logic_parser.mly"
                    ( LTunion _2 )
# 2980 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 477 "cil/src/logic/logic_parser.mly"
                    ( LTnamed (_1,[]) )
# 2987 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ne_logic_type_list) in
    Obj.repr(
# 478 "cil/src/logic/logic_parser.mly"
                                    ( LTnamed(_1,_3) )
# 2995 "cil/src/logic/logic_parser.ml"
               : 'type_spec_not_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logic_type) in
    Obj.repr(
# 482 "cil/src/logic/logic_parser.mly"
                                      ( [_1] )
# 3002 "cil/src/logic/logic_parser.ml"
               : 'ne_logic_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logic_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ne_logic_type_list) in
    Obj.repr(
# 483 "cil/src/logic/logic_parser.mly"
                                      ( _1 :: _3 )
# 3010 "cil/src/logic/logic_parser.ml"
               : 'ne_logic_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 489 "cil/src/logic/logic_parser.mly"
                                     ( _2 )
# 3019 "cil/src/logic/logic_parser.ml"
               : 'full_lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 493 "cil/src/logic/logic_parser.mly"
                                          ( _2 )
# 3028 "cil/src/logic/logic_parser.ml"
               : 'full_identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ne_parameters) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 497 "cil/src/logic/logic_parser.mly"
                                             ( _2 )
# 3037 "cil/src/logic/logic_parser.ml"
               : 'full_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'parameter) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 501 "cil/src/logic/logic_parser.mly"
                                         ( _2 )
# 3046 "cil/src/logic/logic_parser.ml"
               : 'full_parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tsets) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 505 "cil/src/logic/logic_parser.mly"
                                      ( _2 )
# 3055 "cil/src/logic/logic_parser.ml"
               : 'full_tsets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ne_lexpr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 509 "cil/src/logic/logic_parser.mly"
                                             ( _2 )
# 3064 "cil/src/logic/logic_parser.ml"
               : 'full_ne_lexpr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'logic_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 513 "cil/src/logic/logic_parser.mly"
                                          ( _2 )
# 3073 "cil/src/logic/logic_parser.ml"
               : 'full_logic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enter_kw_c_mode) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assigns) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exit_kw_c_mode) in
    Obj.repr(
# 517 "cil/src/logic/logic_parser.mly"
                                       ( _2 )
# 3082 "cil/src/logic/logic_parser.ml"
               : 'full_assigns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'location_dep) in
    Obj.repr(
# 521 "cil/src/logic/logic_parser.mly"
               ( _1 )
# 3089 "cil/src/logic/logic_parser.ml"
               : 'assigns))
; (fun __caml_parser_env ->
    Obj.repr(
# 522 "cil/src/logic/logic_parser.mly"
          ( [Nothing,[]] )
# 3095 "cil/src/logic/logic_parser.ml"
               : 'assigns))
; (fun __caml_parser_env ->
    Obj.repr(
# 526 "cil/src/logic/logic_parser.mly"
                ( [] )
# 3101 "cil/src/logic/logic_parser.ml"
               : 'requires))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'full_lexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'requires) in
    Obj.repr(
# 527 "cil/src/logic/logic_parser.mly"
                                         ( _2::_4 )
# 3109 "cil/src/logic/logic_parser.ml"
               : 'requires))
; (fun __caml_parser_env ->
    Obj.repr(
# 532 "cil/src/logic/logic_parser.mly"
                ( [],[],[] )
# 3115 "cil/src/logic/logic_parser.ml"
               : 'behavior_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ne_behavior_body) in
    Obj.repr(
# 533 "cil/src/logic/logic_parser.mly"
                   ( _1 )
# 3122 "cil/src/logic/logic_parser.ml"
               : 'behavior_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'full_lexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'behavior_body) in
    Obj.repr(
# 537 "cil/src/logic/logic_parser.mly"
    ( let a,b,c = _4 in _2::a,b,c )
# 3130 "cil/src/logic/logic_parser.ml"
               : 'ne_behavior_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'full_lexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'behavior_body) in
    Obj.repr(
# 539 "cil/src/logic/logic_parser.mly"
    ( let a,b,c = _4 in a,_2::b,c )
# 3138 "cil/src/logic/logic_parser.ml"
               : 'ne_behavior_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'full_assigns) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'behavior_body) in
    Obj.repr(
# 541 "cil/src/logic/logic_parser.mly"
    ( let a,b,c = _4 in
      let assigns =
        match c,_2 with
            ([] | [(Nothing,_) ]), ([] | [(Nothing,_) ]) -> [(Nothing,[])]
          | [(Nothing,_) ], _ | _, [(Nothing,_)] ->
              raise (
                Not_well_formed (loc(),"Mixing \\nothing and a real location"))
          | _,_ -> _2 @ c
      in a,b,assigns
    )
# 3155 "cil/src/logic/logic_parser.ml"
               : 'ne_behavior_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 554 "cil/src/logic/logic_parser.mly"
                ( [] )
# 3161 "cil/src/logic/logic_parser.ml"
               : 'behaviors))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'full_identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'behavior_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'behaviors) in
    Obj.repr(
# 556 "cil/src/logic/logic_parser.mly"
      ( let (assumes,ensures,assigns) = _4 in
        Logic_const.check_assigns ~loc:(loc()) assigns;
        {b_name=_2; b_assumes = assumes;
         b_ensures = ensures;
         b_assigns = assigns}::_5 )
# 3174 "cil/src/logic/logic_parser.ml"
               : 'behaviors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'behavior_body) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'terminates) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'behavior_body) in
    Obj.repr(
# 565 "cil/src/logic/logic_parser.mly"
      ( let (assumes1, ensures1, assigns1) = _1 in
        let (assumes2, ensures2,assigns2) = _3 in
        (Some _2, (assumes1 @ assumes2,
                      ensures1 @ ensures2, assigns1 @ assigns2))
      )
# 3187 "cil/src/logic/logic_parser.ml"
               : 'simple_behavior_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'behavior_body) in
    Obj.repr(
# 570 "cil/src/logic/logic_parser.mly"
                ( (None, _1) )
# 3194 "cil/src/logic/logic_parser.ml"
               : 'simple_behavior_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_behavior_body) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'behaviors) in
    Obj.repr(
# 575 "cil/src/logic/logic_parser.mly"
    ( let (terminates,(assumes,ensures,assigns)) = _1 in
      let behaviors =
        if assumes <> [] || ensures <> [] || assigns <> [] then
          { b_name = "default";b_assumes = assumes;
            b_ensures = ensures;
            b_assigns = assigns} :: _2
        else _2
      in
      terminates, behaviors
    )
# 3211 "cil/src/logic/logic_parser.ml"
               : 'behaviors_or_default))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.lexpr) in
    Obj.repr(
# 587 "cil/src/logic/logic_parser.mly"
                                       ( _2 )
# 3218 "cil/src/logic/logic_parser.ml"
               : 'terminates))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'full_identifier) in
    Obj.repr(
# 591 "cil/src/logic/logic_parser.mly"
                  ( [_1] )
# 3225 "cil/src/logic/logic_parser.ml"
               : 'ne_full_identifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'full_identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ne_full_identifier_list) in
    Obj.repr(
# 592 "cil/src/logic/logic_parser.mly"
                                                (_1 :: _3)
# 3233 "cil/src/logic/logic_parser.ml"
               : 'ne_full_identifier_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 596 "cil/src/logic/logic_parser.mly"
                ( [],[] )
# 3239 "cil/src/logic/logic_parser.ml"
               : 'complete_or_disjoint))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ne_full_identifier_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'complete_or_disjoint) in
    Obj.repr(
# 598 "cil/src/logic/logic_parser.mly"
      ( let (complete,disjoint) = _5 in (_3::complete, disjoint) )
# 3247 "cil/src/logic/logic_parser.ml"
               : 'complete_or_disjoint))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ne_full_identifier_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'complete_or_disjoint) in
    Obj.repr(
# 600 "cil/src/logic/logic_parser.mly"
      ( let (complete,disjoint) = _5 in (complete, _3::disjoint) )
# 3255 "cil/src/logic/logic_parser.ml"
               : 'complete_or_disjoint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'requires) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'behaviors_or_default) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'complete_or_disjoint) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'decreases) in
    Obj.repr(
# 604 "cil/src/logic/logic_parser.mly"
      (
        { spec_requires = _1;
          spec_behavior = snd _2;
          spec_variant = _4;
          spec_terminates = fst _2;
          spec_complete_behaviors = fst _3;
          spec_disjoint_behaviors = snd _3;
        },loc() )
# 3272 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.spec * Cabs.cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 619 "cil/src/logic/logic_parser.mly"
           ( () )
# 3278 "cil/src/logic/logic_parser.ml"
               : 'is_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 620 "cil/src/logic/logic_parser.mly"
           ( () )
# 3284 "cil/src/logic/logic_parser.ml"
               : 'is_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 621 "cil/src/logic/logic_parser.mly"
          ( () )
# 3290 "cil/src/logic/logic_parser.ml"
               : 'is_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 622 "cil/src/logic/logic_parser.mly"
          ( () )
# 3296 "cil/src/logic/logic_parser.ml"
               : 'is_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 623 "cil/src/logic/logic_parser.mly"
            ( () )
# 3302 "cil/src/logic/logic_parser.ml"
               : 'is_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 624 "cil/src/logic/logic_parser.mly"
             ( () )
# 3308 "cil/src/logic/logic_parser.ml"
               : 'is_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 625 "cil/src/logic/logic_parser.mly"
           ( () )
# 3314 "cil/src/logic/logic_parser.ml"
               : 'is_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_invariant) in
    Obj.repr(
# 629 "cil/src/logic/logic_parser.mly"
                 ( [AInvariant (fst _1,true,snd _1)] )
# 3321 "cil/src/logic/logic_parser.ml"
               : 'loop_annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_effects) in
    Obj.repr(
# 630 "cil/src/logic/logic_parser.mly"
               ( List.map (fun x -> AAssigns x) _1 )
# 3328 "cil/src/logic/logic_parser.ml"
               : 'loop_annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_variant) in
    Obj.repr(
# 631 "cil/src/logic/logic_parser.mly"
               ( [AVariant _1] )
# 3335 "cil/src/logic/logic_parser.ml"
               : 'loop_annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_pragma) in
    Obj.repr(
# 632 "cil/src/logic/logic_parser.mly"
              ( [APragma (Loop_pragma _1)] )
# 3342 "cil/src/logic/logic_parser.ml"
               : 'loop_annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_annot) in
    Obj.repr(
# 637 "cil/src/logic/logic_parser.mly"
    ( _1 )
# 3349 "cil/src/logic/logic_parser.ml"
               : 'loop_annotations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'loop_annot) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'loop_annotations) in
    Obj.repr(
# 638 "cil/src/logic/logic_parser.mly"
                              ( _1 @ _2 )
# 3357 "cil/src/logic/logic_parser.ml"
               : 'loop_annotations))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'full_identifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'full_parameter) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 644 "cil/src/logic/logic_parser.mly"
  ( let typ,name = _5 in{ inv_name = _3; this_name = name; this_type = typ; inv = _8; } )
# 3366 "cil/src/logic/logic_parser.ml"
               : 'type_annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'full_lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'full_identifier) in
    Obj.repr(
# 648 "cil/src/logic/logic_parser.mly"
                                 ( (_1, Some _3) )
# 3374 "cil/src/logic/logic_parser.ml"
               : 'variant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'full_lexpr) in
    Obj.repr(
# 649 "cil/src/logic/logic_parser.mly"
                            ( (_1, None) )
# 3381 "cil/src/logic/logic_parser.ml"
               : 'variant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'ne_full_identifier_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 654 "cil/src/logic/logic_parser.mly"
    ( (_2,_6) )
# 3389 "cil/src/logic/logic_parser.ml"
               : 'loop_invariant))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 655 "cil/src/logic/logic_parser.mly"
                                      ( ([],_3) )
# 3396 "cil/src/logic/logic_parser.ml"
               : 'loop_invariant))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variant) in
    Obj.repr(
# 659 "cil/src/logic/logic_parser.mly"
                                 ( _3 )
# 3403 "cil/src/logic/logic_parser.ml"
               : 'loop_variant))
; (fun __caml_parser_env ->
    Obj.repr(
# 663 "cil/src/logic/logic_parser.mly"
                  ( None )
# 3409 "cil/src/logic/logic_parser.ml"
               : 'decreases))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variant) in
    Obj.repr(
# 664 "cil/src/logic/logic_parser.mly"
                              ( Some _2 )
# 3416 "cil/src/logic/logic_parser.ml"
               : 'decreases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'slice_pragma) in
    Obj.repr(
# 668 "cil/src/logic/logic_parser.mly"
                   ( APragma (Slice_pragma _1) )
# 3423 "cil/src/logic/logic_parser.ml"
               : 'code_annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'impact_pragma) in
    Obj.repr(
# 669 "cil/src/logic/logic_parser.mly"
                   ( APragma (Impact_pragma _1) )
# 3430 "cil/src/logic/logic_parser.ml"
               : 'code_annotation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ne_full_identifier_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 671 "cil/src/logic/logic_parser.mly"
      ( AAssert (_2,_5) )
# 3438 "cil/src/logic/logic_parser.ml"
               : 'code_annotation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 672 "cil/src/logic/logic_parser.mly"
                                 ( AAssert ([],_2) )
# 3445 "cil/src/logic/logic_parser.ml"
               : 'code_annotation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 673 "cil/src/logic/logic_parser.mly"
                                 ( AInvariant ([],false,_2) )
# 3452 "cil/src/logic/logic_parser.ml"
               : 'code_annotation))
; (fun __caml_parser_env ->
    Obj.repr(
# 677 "cil/src/logic/logic_parser.mly"
              ( )
# 3458 "cil/src/logic/logic_parser.ml"
               : 'loop_pragma_tk))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'loop_pragma_tk) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'full_ne_lexpr_list) in
    Obj.repr(
# 682 "cil/src/logic/logic_parser.mly"
  ( if _2 = "UNROLL_LOOP" || _2 = "UNROLL" then
      match _3 with
        | [level] -> Unroll_level level
        | _ -> raise(
            Not_well_formed(loc(),"usage: loop pragma unroll n;"))
    else if _2 = "WIDEN_VARIABLES" then
      Widen_variables _3
    else if _2 = "WIDEN_HINTS" then
      Widen_hints _3
    else raise (Not_well_formed (loc(),"unknown loop pragma")) )
# 3476 "cil/src/logic/logic_parser.ml"
               : 'loop_pragma))
; (fun __caml_parser_env ->
    Obj.repr(
# 694 "cil/src/logic/logic_parser.mly"
               ( )
# 3482 "cil/src/logic/logic_parser.ml"
               : 'slice_pragma_tk))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'slice_pragma_tk) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 699 "cil/src/logic/logic_parser.mly"
    ( if _2 = "expr" then SPexpr _3
      else raise (Not_well_formed (loc(), "unknown slice pragma")) )
# 3492 "cil/src/logic/logic_parser.ml"
               : 'slice_pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'slice_pragma_tk) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 702 "cil/src/logic/logic_parser.mly"
    ( if _2 = "ctrl" then SPctrl
      else if _2 = "stmt" then SPstmt
      else raise (Not_well_formed (loc(), "unknown slice pragma")) )
# 3502 "cil/src/logic/logic_parser.ml"
               : 'slice_pragma))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 708 "cil/src/logic/logic_parser.mly"
    ( if _3 = "expr" then IPexpr _4
      else raise (Not_well_formed (loc(), "unknown impact pragma")) )
# 3511 "cil/src/logic/logic_parser.ml"
               : 'impact_pragma))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 711 "cil/src/logic/logic_parser.mly"
    ( if _3 = "stmt" then IPstmt
      else raise (Not_well_formed (loc(), "unknown impact pragma")) )
# 3519 "cil/src/logic/logic_parser.ml"
               : 'impact_pragma))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'full_assigns) in
    Obj.repr(
# 715 "cil/src/logic/logic_parser.mly"
                                      ( _3 )
# 3526 "cil/src/logic/logic_parser.ml"
               : 'loop_effects))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'zones) in
    Obj.repr(
# 719 "cil/src/logic/logic_parser.mly"
        ( List.map (fun x -> (x,[])) _1 )
# 3533 "cil/src/logic/logic_parser.ml"
               : 'location_dep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'zones) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'zones) in
    Obj.repr(
# 720 "cil/src/logic/logic_parser.mly"
                   (List.map (fun x -> (x, _3)) _1)
# 3541 "cil/src/logic/logic_parser.ml"
               : 'location_dep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'zones) in
    Obj.repr(
# 721 "cil/src/logic/logic_parser.mly"
                      (List.map (fun x -> (x, [Nothing])) _1)
# 3548 "cil/src/logic/logic_parser.ml"
               : 'location_dep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tsets) in
    Obj.repr(
# 723 "cil/src/logic/logic_parser.mly"
              ( List.map (fun x -> Location x) _1 )
# 3555 "cil/src/logic/logic_parser.ml"
               : 'zones))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'location) in
    Obj.repr(
# 726 "cil/src/logic/logic_parser.mly"
           ( [_1] )
# 3562 "cil/src/logic/logic_parser.ml"
               : 'tsets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'location) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tsets) in
    Obj.repr(
# 727 "cil/src/logic/logic_parser.mly"
                       ( _1 :: _3 )
# 3570 "cil/src/logic/logic_parser.ml"
               : 'tsets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.lexpr) in
    Obj.repr(
# 731 "cil/src/logic/logic_parser.mly"
        ( _1 )
# 3577 "cil/src/logic/logic_parser.ml"
               : 'location))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'full_logic_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'poly_id) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'full_parameters) in
    Obj.repr(
# 736 "cil/src/logic/logic_parser.mly"
  ( let (id,labels,tvars) = _3 in
    (_2,id,labels, tvars,_5) )
# 3587 "cil/src/logic/logic_parser.ml"
               : 'logic_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'full_logic_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'poly_id) in
    Obj.repr(
# 739 "cil/src/logic/logic_parser.mly"
  ( let (id,labels,tvars) = _3 in
    (_2,id,labels, tvars,[]) )
# 3596 "cil/src/logic/logic_parser.ml"
               : 'logic_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'full_identifier) in
    Obj.repr(
# 743 "cil/src/logic/logic_parser.mly"
                  ( (_1,[],[]) )
# 3603 "cil/src/logic/logic_parser.ml"
               : 'poly_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'full_identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ne_tvar_list) in
    Obj.repr(
# 744 "cil/src/logic/logic_parser.mly"
                                     ( _1,[],_3 )
# 3611 "cil/src/logic/logic_parser.ml"
               : 'poly_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'full_identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ne_label_list) in
    Obj.repr(
# 745 "cil/src/logic/logic_parser.mly"
                                              ( (_1,_3,[]) )
# 3619 "cil/src/logic/logic_parser.ml"
               : 'poly_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'full_identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ne_label_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'ne_tvar_list) in
    Obj.repr(
# 746 "cil/src/logic/logic_parser.mly"
                                                                 ( _1,_3,_6 )
# 3628 "cil/src/logic/logic_parser.ml"
               : 'poly_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 749 "cil/src/logic/logic_parser.mly"
             ( _1 )
# 3635 "cil/src/logic/logic_parser.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 753 "cil/src/logic/logic_parser.mly"
              ( [] )
# 3641 "cil/src/logic/logic_parser.ml"
               : 'opt_parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'full_parameters) in
    Obj.repr(
# 754 "cil/src/logic/logic_parser.mly"
                            ( _2 )
# 3648 "cil/src/logic/logic_parser.ml"
               : 'opt_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'logic_decl) in
    Obj.repr(
# 758 "cil/src/logic/logic_parser.mly"
    ( let (rt, id, labels, tvars, args) = _1 in
      LDlogic_reads (id, labels, tvars, rt, args, []) )
# 3656 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'logic_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'full_tsets) in
    Obj.repr(
# 761 "cil/src/logic/logic_parser.mly"
    ( let (rt, id, labels, tvars, args) = _1 in
      LDlogic_reads (id, labels, tvars, rt, args, _3) )
# 3665 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'logic_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 764 "cil/src/logic/logic_parser.mly"
    ( let (rt, id, labels, tvars, args) = _1 in
      LDlogic_def (id, labels, tvars, rt, args, _3) )
# 3674 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'poly_id) in
    Obj.repr(
# 767 "cil/src/logic/logic_parser.mly"
    ( let (id,labels,tvars) = _2 in
      assert (labels = []);
      LDtype(id,tvars) )
# 3683 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'poly_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_parameters) in
    Obj.repr(
# 771 "cil/src/logic/logic_parser.mly"
    ( let (id,labels,tvars) = _2 in
      LDpredicate_reads (id, labels, tvars, _3, []) )
# 3692 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'poly_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'tsets) in
    Obj.repr(
# 774 "cil/src/logic/logic_parser.mly"
    ( let (id,labels,tvars) = _2 in
      LDpredicate_reads (id, labels, tvars, _3, _5) )
# 3702 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'poly_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 777 "cil/src/logic/logic_parser.mly"
    ( let (id,labels,tvars) = _2 in
      LDpredicate_def (id, labels, tvars, _3, _5) )
# 3712 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'poly_id) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 780 "cil/src/logic/logic_parser.mly"
    ( let (id,labels,tvars) = _2 in
      LDlemma (id, true, labels, tvars, _4) )
# 3721 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'poly_id) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 783 "cil/src/logic/logic_parser.mly"
    ( let (id,labels,tvars) = _2 in
      LDlemma (id, false, labels, tvars, _4) )
# 3730 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'full_identifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'full_lexpr) in
    Obj.repr(
# 786 "cil/src/logic/logic_parser.mly"
    ( LDinvariant (_3, _5) )
# 3738 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_annot) in
    Obj.repr(
# 787 "cil/src/logic/logic_parser.mly"
             (LDtype_annot _1)
# 3745 "cil/src/logic/logic_parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'full_identifier) in
    Obj.repr(
# 791 "cil/src/logic/logic_parser.mly"
                  ( [_1] )
# 3752 "cil/src/logic/logic_parser.ml"
               : 'ne_tvar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'full_identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ne_tvar_list) in
    Obj.repr(
# 792 "cil/src/logic/logic_parser.mly"
                                     ( _1 :: _3 )
# 3760 "cil/src/logic/logic_parser.ml"
               : 'ne_tvar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 796 "cil/src/logic/logic_parser.mly"
        ( [_1] )
# 3767 "cil/src/logic/logic_parser.ml"
               : 'ne_label_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ne_label_list) in
    Obj.repr(
# 797 "cil/src/logic/logic_parser.mly"
                            ( _1 :: _3 )
# 3775 "cil/src/logic/logic_parser.ml"
               : 'ne_label_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'full_identifier) in
    Obj.repr(
# 801 "cil/src/logic/logic_parser.mly"
                  ( _1 )
# 3782 "cil/src/logic/logic_parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'annotation) in
    Obj.repr(
# 805 "cil/src/logic/logic_parser.mly"
                   ( _1 )
# 3789 "cil/src/logic/logic_parser.ml"
               : Logic_ptree.annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 809 "cil/src/logic/logic_parser.mly"
       ( [(loc(), _1)] )
# 3796 "cil/src/logic/logic_parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list) in
    Obj.repr(
# 810 "cil/src/logic/logic_parser.mly"
                 ( (loc(),_1) :: _2 )
# 3804 "cil/src/logic/logic_parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list) in
    Obj.repr(
# 813 "cil/src/logic/logic_parser.mly"
                        ( Adecl (_1) )
# 3811 "cil/src/logic/logic_parser.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'is_spec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'any) in
    Obj.repr(
# 814 "cil/src/logic/logic_parser.mly"
                   ( Aspec )
# 3819 "cil/src/logic/logic_parser.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_annotations) in
    Obj.repr(
# 815 "cil/src/logic/logic_parser.mly"
                   ( Logic_const.check_loop_annotation ~loc:(loc()) _1;
                     Aloop_annot (loc (), _1) )
# 3827 "cil/src/logic/logic_parser.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'code_annotation) in
    Obj.repr(
# 817 "cil/src/logic/logic_parser.mly"
                  ( Acode_annot (loc(),_1) )
# 3834 "cil/src/logic/logic_parser.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 818 "cil/src/logic/logic_parser.mly"
                  ( Aattribute_annot (loc (), _1) )
# 3841 "cil/src/logic/logic_parser.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'wildcard) in
    Obj.repr(
# 823 "cil/src/logic/logic_parser.mly"
           ( () )
# 3848 "cil/src/logic/logic_parser.ml"
               : 'any))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'wildcard) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'any) in
    Obj.repr(
# 824 "cil/src/logic/logic_parser.mly"
               ( () )
# 3856 "cil/src/logic/logic_parser.ml"
               : 'any))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 828 "cil/src/logic/logic_parser.mly"
             ( () )
# 3863 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 829 "cil/src/logic/logic_parser.mly"
                 ( () )
# 3870 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 830 "cil/src/logic/logic_parser.mly"
           ( () )
# 3877 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.constant) in
    Obj.repr(
# 831 "cil/src/logic/logic_parser.mly"
           ( () )
# 3884 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 832 "cil/src/logic/logic_parser.mly"
       ( () )
# 3890 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 833 "cil/src/logic/logic_parser.mly"
       ( () )
# 3896 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 834 "cil/src/logic/logic_parser.mly"
     ( () )
# 3902 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 835 "cil/src/logic/logic_parser.mly"
       ( () )
# 3908 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 836 "cil/src/logic/logic_parser.mly"
        ( () )
# 3914 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 837 "cil/src/logic/logic_parser.mly"
         ( () )
# 3920 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 838 "cil/src/logic/logic_parser.mly"
             ( () )
# 3926 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 839 "cil/src/logic/logic_parser.mly"
      ( () )
# 3932 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 840 "cil/src/logic/logic_parser.mly"
         ( () )
# 3938 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 841 "cil/src/logic/logic_parser.mly"
            ( () )
# 3944 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 842 "cil/src/logic/logic_parser.mly"
      ( () )
# 3950 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 843 "cil/src/logic/logic_parser.mly"
          ( () )
# 3956 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 844 "cil/src/logic/logic_parser.mly"
       ( () )
# 3962 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 845 "cil/src/logic/logic_parser.mly"
        ( () )
# 3968 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 846 "cil/src/logic/logic_parser.mly"
     ( () )
# 3974 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 847 "cil/src/logic/logic_parser.mly"
     ( () )
# 3980 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 848 "cil/src/logic/logic_parser.mly"
     ( () )
# 3986 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 849 "cil/src/logic/logic_parser.mly"
     ( () )
# 3992 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 850 "cil/src/logic/logic_parser.mly"
     ( () )
# 3998 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 851 "cil/src/logic/logic_parser.mly"
     ( () )
# 4004 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 852 "cil/src/logic/logic_parser.mly"
        ( () )
# 4010 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 853 "cil/src/logic/logic_parser.mly"
        ( () )
# 4016 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 854 "cil/src/logic/logic_parser.mly"
        ( () )
# 4022 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 855 "cil/src/logic/logic_parser.mly"
         ( () )
# 4028 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 856 "cil/src/logic/logic_parser.mly"
         ( () )
# 4034 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 857 "cil/src/logic/logic_parser.mly"
      ( () )
# 4040 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 858 "cil/src/logic/logic_parser.mly"
          ( () )
# 4046 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 859 "cil/src/logic/logic_parser.mly"
      ( () )
# 4052 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 860 "cil/src/logic/logic_parser.mly"
     ( () )
# 4058 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 861 "cil/src/logic/logic_parser.mly"
      ( () )
# 4064 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 862 "cil/src/logic/logic_parser.mly"
       ( () )
# 4070 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 863 "cil/src/logic/logic_parser.mly"
        ( () )
# 4076 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 864 "cil/src/logic/logic_parser.mly"
      ( () )
# 4082 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 865 "cil/src/logic/logic_parser.mly"
     ( () )
# 4088 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 866 "cil/src/logic/logic_parser.mly"
         ( () )
# 4094 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 867 "cil/src/logic/logic_parser.mly"
               ( () )
# 4100 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 868 "cil/src/logic/logic_parser.mly"
            ( () )
# 4106 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 869 "cil/src/logic/logic_parser.mly"
        ( () )
# 4112 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 870 "cil/src/logic/logic_parser.mly"
              ( () )
# 4118 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 871 "cil/src/logic/logic_parser.mly"
              ( () )
# 4124 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 872 "cil/src/logic/logic_parser.mly"
        ( () )
# 4130 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 873 "cil/src/logic/logic_parser.mly"
         ( () )
# 4136 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 874 "cil/src/logic/logic_parser.mly"
           ( () )
# 4142 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 875 "cil/src/logic/logic_parser.mly"
        ( () )
# 4148 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 876 "cil/src/logic/logic_parser.mly"
       ( () )
# 4154 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 877 "cil/src/logic/logic_parser.mly"
       ( () )
# 4160 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 878 "cil/src/logic/logic_parser.mly"
      ( () )
# 4166 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 879 "cil/src/logic/logic_parser.mly"
        ( () )
# 4172 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 880 "cil/src/logic/logic_parser.mly"
          ( () )
# 4178 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 881 "cil/src/logic/logic_parser.mly"
          ( () )
# 4184 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 882 "cil/src/logic/logic_parser.mly"
          ( () )
# 4190 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 883 "cil/src/logic/logic_parser.mly"
         ( () )
# 4196 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 884 "cil/src/logic/logic_parser.mly"
            ( () )
# 4202 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 885 "cil/src/logic/logic_parser.mly"
          ( () )
# 4208 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 886 "cil/src/logic/logic_parser.mly"
            ( () )
# 4214 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 887 "cil/src/logic/logic_parser.mly"
      ( () )
# 4220 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 888 "cil/src/logic/logic_parser.mly"
        ( () )
# 4226 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 889 "cil/src/logic/logic_parser.mly"
         ( () )
# 4232 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 890 "cil/src/logic/logic_parser.mly"
            ( () )
# 4238 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 891 "cil/src/logic/logic_parser.mly"
       ( () )
# 4244 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 892 "cil/src/logic/logic_parser.mly"
        ( () )
# 4250 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 893 "cil/src/logic/logic_parser.mly"
           ( () )
# 4256 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 894 "cil/src/logic/logic_parser.mly"
          ( () )
# 4262 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 895 "cil/src/logic/logic_parser.mly"
          ( () )
# 4268 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 896 "cil/src/logic/logic_parser.mly"
       ( () )
# 4274 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 897 "cil/src/logic/logic_parser.mly"
          ( () )
# 4280 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 898 "cil/src/logic/logic_parser.mly"
        ( () )
# 4286 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 899 "cil/src/logic/logic_parser.mly"
         ( () )
# 4292 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 900 "cil/src/logic/logic_parser.mly"
       ( () )
# 4298 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 901 "cil/src/logic/logic_parser.mly"
        ( () )
# 4304 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 902 "cil/src/logic/logic_parser.mly"
        ( () )
# 4310 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 903 "cil/src/logic/logic_parser.mly"
            ( () )
# 4316 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 904 "cil/src/logic/logic_parser.mly"
        ( () )
# 4322 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 905 "cil/src/logic/logic_parser.mly"
        ( () )
# 4328 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 906 "cil/src/logic/logic_parser.mly"
         ( () )
# 4334 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 907 "cil/src/logic/logic_parser.mly"
         ( () )
# 4340 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 908 "cil/src/logic/logic_parser.mly"
        ( () )
# 4346 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 909 "cil/src/logic/logic_parser.mly"
       ( () )
# 4352 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 910 "cil/src/logic/logic_parser.mly"
       ( () )
# 4358 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 911 "cil/src/logic/logic_parser.mly"
         ( () )
# 4364 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 912 "cil/src/logic/logic_parser.mly"
           ( () )
# 4370 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 913 "cil/src/logic/logic_parser.mly"
        ( () )
# 4376 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 914 "cil/src/logic/logic_parser.mly"
       ( () )
# 4382 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 915 "cil/src/logic/logic_parser.mly"
         ( () )
# 4388 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 916 "cil/src/logic/logic_parser.mly"
         ( () )
# 4394 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 917 "cil/src/logic/logic_parser.mly"
       ( () )
# 4400 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 918 "cil/src/logic/logic_parser.mly"
        ( () )
# 4406 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 919 "cil/src/logic/logic_parser.mly"
          ( () )
# 4412 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 920 "cil/src/logic/logic_parser.mly"
        ( () )
# 4418 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 921 "cil/src/logic/logic_parser.mly"
          ( () )
# 4424 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 922 "cil/src/logic/logic_parser.mly"
          ( () )
# 4430 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 923 "cil/src/logic/logic_parser.mly"
       ( () )
# 4436 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 924 "cil/src/logic/logic_parser.mly"
           ( () )
# 4442 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 925 "cil/src/logic/logic_parser.mly"
          ( () )
# 4448 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 926 "cil/src/logic/logic_parser.mly"
      ( () )
# 4454 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 927 "cil/src/logic/logic_parser.mly"
         ( () )
# 4460 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 928 "cil/src/logic/logic_parser.mly"
       ( () )
# 4466 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 929 "cil/src/logic/logic_parser.mly"
        ( () )
# 4472 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 930 "cil/src/logic/logic_parser.mly"
       ( () )
# 4478 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 931 "cil/src/logic/logic_parser.mly"
       ( () )
# 4484 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 932 "cil/src/logic/logic_parser.mly"
         ( () )
# 4490 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 933 "cil/src/logic/logic_parser.mly"
           ( () )
# 4496 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 934 "cil/src/logic/logic_parser.mly"
            ( () )
# 4502 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 935 "cil/src/logic/logic_parser.mly"
           ( () )
# 4508 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 936 "cil/src/logic/logic_parser.mly"
             ( () )
# 4514 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 937 "cil/src/logic/logic_parser.mly"
         ( () )
# 4520 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 938 "cil/src/logic/logic_parser.mly"
         ( () )
# 4526 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
; (fun __caml_parser_env ->
    Obj.repr(
# 939 "cil/src/logic/logic_parser.mly"
         ( () )
# 4532 "cil/src/logic/logic_parser.ml"
               : 'wildcard))
(* Entry lexpr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry annot *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry spec *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let lexpr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Logic_ptree.lexpr)
let annot (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Logic_ptree.annot)
let spec (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Logic_ptree.spec * Cabs.cabsloc)
;;
